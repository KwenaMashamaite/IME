<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.8.20" doxygen_gitid="f246dd2f1c58eea39ea3f50c108019e4d4137bd5">
  <compound kind="class">
    <name>ime::AABB</name>
    <filename>classime_1_1_a_a_b_b.html</filename>
    <base>ime::Object</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Object &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ad7bb736ac3c2213c99521958fd75c289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AABB</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a7b68d537e770e6e3daf485b5f8acf83a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a4f23510ef81dc5b8b81ed799262269d9</anchor>
      <arglist>(Vector2f lowerBounds, Vector2f upperBounds)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a173f61c8bd28bdf7356e816c54ca42bf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Vector2f, Vector2f &gt;</type>
      <name>getBounds</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a1cde040eba497a209ac92f7107f98093</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getLowerBounds</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a71c4f7360104b2e19388c0173c737bd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getUpperBounds</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a39f1e0c7cabf4cb9017e7f32c4e0eacf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPerimeter</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a9997094d16f095285f4fc45ec3e3504d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getCenter</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a2dc999ce9e4b672297dc59b8007c1506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combine</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>ab7a8a24b297ff9925589dd627e1a35d2</anchor>
      <arglist>(const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>combine</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a84f04afd1c1ebef8eb8a21dd39669fe2</anchor>
      <arglist>(const AABB &amp;aabb1, const AABB &amp;aabb2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>aa3f89851202df9896c2bea3af9b4ea27</anchor>
      <arglist>(const AABB &amp;aabb) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AABB</name>
      <anchorfile>classime_1_1_a_a_b_b.html</anchorfile>
      <anchor>a8f63150a8192ed3f96a62f153f0bbcc5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a8c3d545176c422a07532de6e2eb35f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::AccessViolationException</name>
    <filename>classime_1_1_access_violation_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>AccessViolationException</name>
      <anchorfile>classime_1_1_access_violation_exception.html</anchorfile>
      <anchor>a37d4b5531e84b7573c4d483572f4c61e</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::AdjacencyList</name>
    <filename>classime_1_1_adjacency_list.html</filename>
    <member kind="function">
      <type>void</type>
      <name>generateFrom</name>
      <anchorfile>classime_1_1_adjacency_list.html</anchorfile>
      <anchor>ad6ef3e0a4c2a79e5bd4b4cd071bd2460</anchor>
      <arglist>(const Grid2D &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; Index &gt; &amp;</type>
      <name>getNeighbours</name>
      <anchorfile>classime_1_1_adjacency_list.html</anchorfile>
      <anchor>a1ac06078db0fc16f07e69b13925142a7</anchor>
      <arglist>(const Index &amp;index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Animation</name>
    <filename>classime_1_1_animation.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Direction</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ae1a794c1c9e4d63a46ae232e12b32648</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_animation.html" anchor="ae1a794c1c9e4d63a46ae232e12b32648a67d2f6740a8eaebf4d5c6f79be8da481">Forward</enumvalue>
      <enumvalue file="classime_1_1_animation.html" anchor="ae1a794c1c9e4d63a46ae232e12b32648a67f115c1fddc4ce1aeb1c754001585bc">Reverse</enumvalue>
      <enumvalue file="classime_1_1_animation.html" anchor="ae1a794c1c9e4d63a46ae232e12b32648a1ef4c8d1a2c65a37a9297632c05bdcfd">Alternate_Forward</enumvalue>
      <enumvalue file="classime_1_1_animation.html" anchor="ae1a794c1c9e4d63a46ae232e12b32648a6ac11521a013bc5a8c43b4849aabcc28">Alternate_Reverse</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Animation &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a3601a28eb812065fb1e647b01236b1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Animation</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a4c17d1bed69812c917ec28883b96e674</anchor>
      <arglist>(const std::string &amp;name, const SpriteSheet &amp;spriteSheet, const Time &amp;duration=Time::Zero)</arglist>
    </member>
    <member kind="function">
      <type>const SpriteSheet &amp;</type>
      <name>getSpriteSheet</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a2c9066827a97a94ad83ce36703efa0e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeatCount</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ae240455c75182a5c9d51adb7598137bc</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRepeatCount</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a84735fe2690342becbaf22d27d6eb0d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRepeating</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>aa9d5482a8821a040d2a6b7a2baf91730</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoop</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>aa9bc4a1d3913e13196ccabfd0b434a4d</anchor>
      <arglist>(bool loop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooped</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>afdbaab22a0d82b9a94692a99d20651ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDuration</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a9411b99ea892ba82b37b688184ba05b3</anchor>
      <arglist>(const Time &amp;duration)</arglist>
    </member>
    <member kind="function">
      <type>const Time &amp;</type>
      <name>getDuration</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a1efc0157a5c4d23518c188d928a3ef18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPlaybackSpeed</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a1f7c527c9656e846df2212cea65b0499</anchor>
      <arglist>(float speed)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPlaybackSpeed</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a60706f9738bcac80fbf221ad2b8d66e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameRate</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ad388630356b434f7061df648af46b328</anchor>
      <arglist>(unsigned int frameRate)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getFrameRate</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>aca974d18677b9fb28d5bd98f352da73a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>accb566a77905a65533120e81536dfdaa</anchor>
      <arglist>(Direction direction)</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getDirection</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>adadf675b046a51672fa84922886f6bc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>adf6a39597a68862e4956ba645f743cf8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStartDelay</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a8942cfa9caca339585976065ec1cd856</anchor>
      <arglist>(const Time &amp;delay, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>const Time &amp;</type>
      <name>getStartDelay</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a422625226a8fc9fe9a4a9c4bef18d9e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStartDelayedOnce</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a64a305197ac86eab20da729a73e6c97a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStartDelayed</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a3b4571753fc56c70c54a757ed89a390f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showTargetOnStart</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a1204d59baa4aa60cd42c0cdd6c9b009d</anchor>
      <arglist>(bool show)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTargetShownOnStart</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>abf05fc94b9ac5337e10d5824d81e7075</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideTargetOnCompletion</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a665898951c7cfd9dc74c162fb3f9dd37</anchor>
      <arglist>(bool hide)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTargetHiddenOnCompletion</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a6570f778f66abd6aee5a5ca46c54aa30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCurrentFrameResetOnInterrupt</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ab9891a153c8f3174cd4a78b1915d001f</anchor>
      <arglist>(bool reset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrentFrameResetOnInterrupt</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a706f0d9fd05692f7116e1c5dc1bda462</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrames</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a05e140188200008d1dde542da7f93ecb</anchor>
      <arglist>(const Index &amp;startPos, unsigned int numOfFrames, FrameArrangement arrangement=FrameArrangement::Horizontal)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>aa09798633ea37eb8579bc801ed9e3cd5</anchor>
      <arglist>(const Index &amp;frame)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertFrameAt</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a85a3ac60bec0a30be8e6e9c1a9f3fdef</anchor>
      <arglist>(unsigned int index, const Index &amp;frameIndex)</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getFirstFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ae503e4262a2e9ed182546d60fbbc859e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getLastFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>adc5c9605389217065656e7f2b10e962f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getFrameAt</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ad885bdcc921748efae32cc339be86eda</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ab6b5984edcaa6960a77b791909ea7a40</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; AnimationFrame &gt; &amp;</type>
      <name>getAllFrames</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ae89766052f59628f7d83334a8ba7f1ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getFrameCount</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a9e7b55ea16b3a141bfd7cb876cd88c33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Time &amp;</type>
      <name>getFrameTime</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a7ed4fc9c0f1719e09ed7dbcfb2b42abf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFrameAtIndex</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a6c4db7665d13f8be643e23bd4525ea0d</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFirstFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a33cfeb77dc6a4bb50ffee26f40c90419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeLastFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a7f63805d648c773138c40167ce815e73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeFrameAt</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a4bbef4d47e167a4ba1e3397d29a389e8</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a450abae51568b2e3dab1ffa2d6af974a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishOnFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ad779954abf1587c023094de623fbc558</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishOnFirstFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a6fd3020da2c4d89435163ca55529cf53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finishOnLastFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a4266845706fabfc0eb3337c0cc03ab85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getCompletionFrameIndex</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a1c1be68d4efc67e56d2383a699882d22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getCurrentFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ab1fcdebc847839c529b96f60163c9bfa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getNextFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a3a06bef3466728ee9b7f70bf7e231ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getPreviousFrame</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>abda1d62ce9a8083d0e54a1bfecbe3dcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getProgress</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a3615560202905caa3739efe52324a4ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ab4bd84bffd8add07eaa84940ce28f89e</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ac1517a76007f272324cba39edc7a4e5a</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a6bd56bbc397a019e51c6e4f6d01f71c2</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onFrameSwitch</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a8d0dff6e2582916ea52e6cdcb60d6ad4</anchor>
      <arglist>(const Callback&lt; AnimationFrame * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onStart</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a1f722963b4054c8d622b968c8134f8a5</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPlay</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a895ce7f20d1745b121c5fc0b4d4415d8</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPause</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>af91c3eb0477cfafa10ec446cb6fb0509</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onResume</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a37a692abb6ae1451a02731e331ae7c85</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onRestart</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ae918ff922640fb3bd3113baa5daa75ab</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onStop</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a516e1bc6797ad924a9d6d6762591e53e</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onRepeat</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a3094fd83bdf9083ba54c8711298856ee</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onComplete</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>a1004d2649891fbcd4d8f0dc58043517c</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Animation::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_animation.html</anchorfile>
      <anchor>ab72566116ba5ff0b87192cc05c110690</anchor>
      <arglist>(const std::string &amp;name, const SpriteSheet &amp;spriteSheet, const Time &amp;duration=Time::Zero)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::AnimationFrame</name>
    <filename>classime_1_1_animation_frame.html</filename>
    <member kind="function">
      <type></type>
      <name>AnimationFrame</name>
      <anchorfile>classime_1_1_animation_frame.html</anchorfile>
      <anchor>ae4bad7f1032113956acc3ffb157dcf27</anchor>
      <arglist>(unsigned int rectLeft, unsigned int rectTop, unsigned int rectWidth, unsigned int rectHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnimationFrame</name>
      <anchorfile>classime_1_1_animation_frame.html</anchorfile>
      <anchor>abcc87e1d518f7da656e0bdf3eda8314c</anchor>
      <arglist>(const UIntRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnimationFrame</name>
      <anchorfile>classime_1_1_animation_frame.html</anchorfile>
      <anchor>a5bf07645f99598ed9e49593a530041f2</anchor>
      <arglist>(const AnimationFrame &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_animation_frame.html</anchorfile>
      <anchor>a9dd748cd056fa7a8e3464f829e1cb5a4</anchor>
      <arglist>(const AnimationFrame &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1_animation_frame.html</anchorfile>
      <anchor>a36e45786b715b0bae6b65e3d85f1b0ef</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1_animation_frame.html</anchorfile>
      <anchor>a76f85b64191d4adbf634f74ec2d51c68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const UIntRect &amp;</type>
      <name>getSpritesheetRect</name>
      <anchorfile>classime_1_1_animation_frame.html</anchorfile>
      <anchor>a2e408cde8bed407fee03b4fabc78a04a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCurrent</name>
      <anchorfile>classime_1_1_animation_frame.html</anchorfile>
      <anchor>a0b0822d6b15b096f020d74180d6ba4f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIndex</name>
      <anchorfile>classime_1_1_animation_frame.html</anchorfile>
      <anchor>aeff9ef6ede3b3baff918f92cb9edec5a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Animator</name>
    <filename>classime_1_1_animator.html</filename>
    <member kind="function">
      <type></type>
      <name>Animator</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a07506d27b46bfea3319bee5679169b84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Animator</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a3b1bd1daa56552d2952f2b4821e69d15</anchor>
      <arglist>(Sprite &amp;target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Animator</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a8268a85747b4c1348ba61ba319893354</anchor>
      <arglist>(const Animator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Animator &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a77de0fa968cde17e2b8443f8e8fd7699</anchor>
      <arglist>(Animator)</arglist>
    </member>
    <member kind="function">
      <type>Animation::Ptr</type>
      <name>createAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a2e6209992e2bcc08616381275d452c6a</anchor>
      <arglist>(const std::string &amp;name, const SpriteSheet &amp;spriteSheet, const Time &amp;duration=Time::Zero)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>ae13173c91d50fdc73db70f144f83e128</anchor>
      <arglist>(Sprite &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimescale</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a53a623fc2b6826a55ee78c022ea20e65</anchor>
      <arglist>(float timescale)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTimescale</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>af12a9ee44bce5779472dea21f8231a73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a92b78a620344a285908c9de25a4dc665</anchor>
      <arglist>(Animation::Ptr animation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>aa68c400e5cd5a1ef9cfae33c5d9feb8a</anchor>
      <arglist>(std::initializer_list&lt; Animation::Ptr &gt; animations)</arglist>
    </member>
    <member kind="function">
      <type>Animation::Ptr</type>
      <name>getAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>ae76ec511fbc019006fb647afa9887cd1</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Animation::Ptr</type>
      <name>getActiveAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a4e26ffb534304ca08d24fda1fe1818f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getCurrentFrame</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a2ef1ce3091f1ac1d3a4be915c69cbb27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getNextFrame</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a558040d4f539a6a2822ffd12a8beb966</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AnimationFrame *</type>
      <name>getPreviousFrame</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a1cb7afccbaef51dd457ff6e8eb50d23f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a341da3134bd786545faf68b413763bb8</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>aa903674605827854335dee582fac98ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>ae6110866662de110f2293975bd26de43</anchor>
      <arglist>(const Animation::Ptr &amp;animation) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>ac94748ea7f5567e07339b386f091b45c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>chainAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a23dcfbbff32891349c658d21868b52bf</anchor>
      <arglist>(Animation::Ptr animation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>chainAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>ab7bebe95dceee3a52d99b9716ac99a11</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unchain</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a8ce41ca5250d028b58056c9b7087ecc1</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearAllChains</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>ade1c08f1d50f422ccf5e78eaea95d34c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>switchAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a7695bd312c8fb95923bc2a464b2695c6</anchor>
      <arglist>(const std::string &amp;name, bool ignorePlaying=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startAnimation</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a1c8570b19288643deb6a770d1534b9b3</anchor>
      <arglist>(const std::string &amp;name, bool unchain=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a2981aa2b5353b56a708b236878398ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a09f0a008f3f40d5543e8f11ff0952ed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a4c71e273858f91c99810609efcbc2a64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a49b4d0070b688f6484e50cdb9a9c0f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>ae5531ba8ea8513e7bef9b3a69567c60d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>complete</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a61dc7fae3a2293dabfaa9672b43cd8ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a325f848b8d4cedc164e9d858988c65be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPaused</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a0838745bf97f5b8f44684ad4c84e5368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationStarted</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>afdc22329b8724e2e51b9298cd852f0fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a2a6484d73c41e9c91b2ef04ba2081a95</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>ad1a1cc8970e7b0df984aea7357a1b996</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>aaa404334023ff7851f7a1d0188f2ef31</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAnimStart</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>aad0b3c191e1a9aac70a74b3b174d5048</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAnimPlay</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a074dab31fcd88fc8a60738fdc3b21622</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAnimPause</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a1ea5999d538df45f028f8f55f81af467</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAnimResume</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a954fd20574106e8e3a1b684c5a1e8e49</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAnimRestart</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a418f763309ee5e6c20b2d7280dfe53b4</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAnimStop</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a286a9ab1690adf789c74e621bb181fa9</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAnimRepeat</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a566447b48337da4d1028c6610a741a9a</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAnimComplete</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>aaac646781c0cf563379e78c6cb57895f</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAnimSwitch</name>
      <anchorfile>classime_1_1_animator.html</anchorfile>
      <anchor>a37def50ae725e9373d1f890a53226793</anchor>
      <arglist>(const Callback&lt; Animation * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Audio</name>
    <filename>classime_1_1_audio.html</filename>
  </compound>
  <compound kind="class">
    <name>ime::audio::Audio</name>
    <filename>classime_1_1audio_1_1_audio.html</filename>
    <base>ime::Object</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Object &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ad7bb736ac3c2213c99521958fd75c289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Audio</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>ad19e34abd6422872048b995c5985184b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>aceed0b98ff7d86e61f52c53e0ba778ca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setSource</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>aa53f18e452447dcb928cd9611d70a753</anchor>
      <arglist>(const std::string &amp;filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const std::string &amp;</type>
      <name>getSource</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a2da84f0a8aae47ff42a3bcf503bb2bb7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVolume</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a820d7f302fe55f43bbe3a5a495d8a122</anchor>
      <arglist>(float volume)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustVolume</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a7ea0e35e6f8849c1732eab2a3355855a</anchor>
      <arglist>(float offset)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getVolume</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>af134b20823c2c79fda756475fac81a77</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMute</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a641456dc11a33b6bea9bcfddaeb6e806</anchor>
      <arglist>(bool mute)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuted</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>aa106dfe9809c7381947c93b70db2ee94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPitch</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a6d42f7302abb04358a0f4f2ca54573b2</anchor>
      <arglist>(float pitch)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getPitch</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>ae6c3acf166c41ec398a7279e6f53c75b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setLoop</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a014b4c30065f1ed30b326a44eb796c49</anchor>
      <arglist>(bool isLooped)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isLooped</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>aa42bc7a4f2cb0404d71c4fb1a79dc206</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>seek</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>ac573a1d154a09f2ed2784490f9754bbe</anchor>
      <arglist>(const Time &amp;position)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Time</type>
      <name>getPlayingPosition</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a2bfe394b8fb82d9046d06731dce12e67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>play</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>ac9eefc34742d90dc24e888e24d58957d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pause</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a0f03186681826b852703135bdcf0692f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stop</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a10ddc40f3869ee374b38b9e4afe6bb9d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a882d301183c31f0a79c1171bbe2974e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Time</type>
      <name>getDuration</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a723004c8bb93617643f5e357583e3fea</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Status</type>
      <name>getStatus</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a780be5a7ba87c8daa6727b3d8f024f30</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Audio</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>acc7ecf8bf389525b6cb1c2170b26bba3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a893e90e8498458bd9d43fe9041a22f02</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::AudioManager</name>
    <filename>classime_1_1_audio_manager.html</filename>
  </compound>
  <compound kind="class">
    <name>ime::audio::AudioManager</name>
    <filename>classime_1_1audio_1_1_audio_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>AudioManager</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>a8da01ceb3200d0b68fd650a57c369da6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioManager</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>acff7878dc96daed5b5b8fb057584c520</anchor>
      <arglist>(const AudioManager &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>AudioManager &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>a8b8326e8bc4fb9baa7f161076378a5aa</anchor>
      <arglist>(const AudioManager &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AudioManager</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>af4dc5dbddfb4ffa60bc0c370b1666682</anchor>
      <arglist>(AudioManager &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>AudioManager &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>ae050a49b405ffe2104c97baef376b605</anchor>
      <arglist>(AudioManager &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Audio *</type>
      <name>play</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>a399a57ed56213a7ce62153ccfe1ebe86</anchor>
      <arglist>(Type audioType, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>ada24042c7713108e5c93c92beb71ec0c</anchor>
      <arglist>(Type audioType, float volume)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolumeFor</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>aaad88cc0424cd5f9c48d60cca5174ee7</anchor>
      <arglist>(Type audioType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMasterVolume</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>a0307cfb234ae11366d52666aa4242732</anchor>
      <arglist>(float volume)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustMasterVolume</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>a58974baa9044fbd91e7f892c38ac1745</anchor>
      <arglist>(float offset)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMasterVolume</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>a29bffbb944291160716ab2bdfe59004a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>playAll</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>af559b1568c7600c8b0a533a96b2bd1f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pauseAll</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>af7221ed09288c334c0cc82932a96f120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopAll</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>ac33408b17b93e0577a3b697259f9cbc8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMute</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>aa93273871558aa6df4eaa2861e0f9d9a</anchor>
      <arglist>(bool isMuted)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onMute</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>a4844776ce2eb20ad64741aedc167455d</anchor>
      <arglist>(Callback&lt; bool &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onVolumeChanged</name>
      <anchorfile>classime_1_1audio_1_1_audio_manager.html</anchorfile>
      <anchor>ab77ef0a186939f4cbd18954b9e54191b</anchor>
      <arglist>(Callback&lt; float &gt; callback)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::BFS</name>
    <filename>classime_1_1_b_f_s.html</filename>
    <base>ime::IPathFinderStrategy</base>
    <member kind="function">
      <type></type>
      <name>BFS</name>
      <anchorfile>classime_1_1_b_f_s.html</anchorfile>
      <anchor>a1281ef263a5b9f2ceb546904d0d69ccd</anchor>
      <arglist>(const Vector2u &amp;gridSize)</arglist>
    </member>
    <member kind="function">
      <type>std::stack&lt; Index &gt;</type>
      <name>findPath</name>
      <anchorfile>classime_1_1_b_f_s.html</anchorfile>
      <anchor>a498d27da20b24fef9462630dd4af1f32</anchor>
      <arglist>(const Grid2D &amp;grid, const Index &amp;sourceTile, const Index &amp;targetTile) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getType</name>
      <anchorfile>classime_1_1_b_f_s.html</anchorfile>
      <anchor>a2ec44bd0bb6aed3b31cdaed5001ad60b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::stack&lt; Index &gt;</type>
      <name>backtrack</name>
      <anchorfile>classime_1_1_i_path_finder_strategy.html</anchorfile>
      <anchor>aa8a80786e3010939275af8f26f6ea388</anchor>
      <arglist>(const std::vector&lt; Node &gt; &amp;exploredNodes, const Index &amp;target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::BitmapButton</name>
    <filename>classime_1_1ui_1_1_bitmap_button.html</filename>
    <base>ime::ui::ClickableWidget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BitmapButton &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a027a5d5486170324874406880bfa7b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const BitmapButton &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a63e94d3947ddeeda63bbd4e7b715c20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapButton</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a1835fe2f2069c5102846a86180e850bd</anchor>
      <arglist>(const BitmapButton &amp;)</arglist>
    </member>
    <member kind="function">
      <type>BitmapButton &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>aeff14b2647ea16f97d238f3c7ea2c8ce</anchor>
      <arglist>(const BitmapButton &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitmapButton</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>ac56d9bf4f3818f8d9ec7a16bbe34a9f8</anchor>
      <arglist>(BitmapButton &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BitmapButton &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a36a682807baa18cbfae39252fb14231e</anchor>
      <arglist>(BitmapButton &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BitmapButton::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a8cf029a5ae16b86627b965d83f944de3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ButtonRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>ad3ad1bd933451ead7a34b6fcb70a5e60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a8d8eb2505a3528dbbca3bf6bbc33d1e5</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a9fc66e628325bbf05df2da4292b94b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImage</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>ac84e16decc74d670383ae6ae154d5bd7</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImageScaling</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a8e4552b31d676ced9db8b0bd900f9a15</anchor>
      <arglist>(float relativeHeight)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getImageScaling</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>aa4ecf350c39734df6bc38a6177773470</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a39109301e33d25e40c71fc726279a546</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a0359f80b989e36cfc9558c296ada1eda</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BitmapButton</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a89f2f2e8997360d6ef8f3db9c0041b44</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>af9e2710fa80d4302bfcf3bbe598a7f9d</anchor>
      <arglist>(bool isEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aef17b82d68a97101bed11d120b0cd3fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a3873c38840d4d313d03aeb6894511e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a9d4deb57bcd9d3cfb390d4d7e941ab62</anchor>
      <arglist>(bool isFocused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a22a95490969b9836a4f9421346527188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BitmapButton::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_bitmap_button.html</anchorfile>
      <anchor>a53156edec1ca2781f242d3be7d12076e</anchor>
      <arglist>(const std::string &amp;text=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Borders</name>
    <filename>structime_1_1_borders.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>left</name>
      <anchorfile>structime_1_1_borders.html</anchorfile>
      <anchor>a413315694472b685e82b53b792c18071</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>top</name>
      <anchorfile>structime_1_1_borders.html</anchorfile>
      <anchor>a78843bd33c9fc6932411c8bdee1b8a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>right</name>
      <anchorfile>structime_1_1_borders.html</anchorfile>
      <anchor>a2472f23e2b3a7434bb2a6046b0e7048b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>bottom</name>
      <anchorfile>structime_1_1_borders.html</anchorfile>
      <anchor>a5d14b7cf5c06b7bcb6dcd2d153cf1bac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::BoxCollider</name>
    <filename>classime_1_1_box_collider.html</filename>
    <base>ime::Collider</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BoxCollider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>a40dd010541c6b09a3bd8e38ee1c7fd90</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2415031582cf0d43ad6fb0a4d1f8c8dd</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda30954d90085f6eaaf5817917fc5fecb3">Circle</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda3cfce651e667ab85486dd42a8185f98a">Box</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8ddae4a297a0f76119a442c2595ac040673e">Edge</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Collider *, Collider *)&gt;</type>
      <name>CollisionCallback</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a6d3d0f3cff1081d433e4e0f718281949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxCollider</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>a5ceb0a3e032b80cc0d12194b213531c4</anchor>
      <arglist>(const Vector2f &amp;size={0.1f, 0.1f})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoxCollider</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>a512a47589f16f96f6e3f80d1b270e074</anchor>
      <arglist>(BoxCollider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BoxCollider &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>a49227d8dc288ce9223085895a1dc86a4</anchor>
      <arglist>(BoxCollider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>BoxCollider::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>a90fdde1f874e355bf713100961d50afd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Collider::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>ac11115012b5dc7c148e81e0b5b29cb18</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>ac9845689904b0e95b7a51776a6460633</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>a27f00d3281da2a1632877bc40b3d5510</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>a14d8d9c8998c86b3c38aceff528454a3</anchor>
      <arglist>(const Vector2f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>a4920758da0560610f5f4bec2ae5cb6ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxCollider</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>a1d5ed8261118588c84a1027021a427ca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ac44c4b0ee550601366e73df9775a0d51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>afa1d09fd0e6ce441b3f2d3bea139b090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2f378fd015e16c95969e492355e03d91</anchor>
      <arglist>(float density)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af9e97fa2e18d91f73d1e4e817bf95471</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a20cd09ce098cfdf58faec0fbc5f30489</anchor>
      <arglist>(float friction)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a0d199c1e6cfb0878dead6aeabe66e91b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acf6bf0876de22fa487ed19134e862e5b</anchor>
      <arglist>(float restitution)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a973064c47b209f6059afda97e176bcf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aafef833a75f448eb7132674bb6b529be</anchor>
      <arglist>(float threshold)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af4bbe2a4d95aa674a384e3718708e17f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ae94d60f49800bd913640f6f5f45beab3</anchor>
      <arglist>(bool sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ad50f8712319dc00c42deb412cc679314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollisionFilter</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a32562e8dc0dee0bd6f985979329b048d</anchor>
      <arglist>(const CollisionFilterData &amp;filterData)</arglist>
    </member>
    <member kind="function">
      <type>const CollisionFilterData &amp;</type>
      <name>getCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a97c926ba8d6a0d3310c7813e47c2bc06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acddf186f01d08754fbc03f1a3efcd3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnable</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a488ac3ca6da6039d159f972b4fadef18</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttachedToBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a4576c4f1d0985bed496164fafcce3115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a10ae9d612b3e063372804fc4eef4a351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa9d396d8e0c191b7ea7dd8372dbf4408</anchor>
      <arglist>(const Vector2f &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a69f252089ac37cb7329ae151681614e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactBegin</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>abb61d78452cbceb12f427e61e3bf6f48</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactEnd</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa51a380cc693325caaf5584ebb86e464</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactStay</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acea608515a9740acf6c5e445bafdfbbb</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BoxCollider::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_box_collider.html</anchorfile>
      <anchor>ab49437b868d3484b388210b9f062e38e</anchor>
      <arglist>(const Vector2f &amp;size={0.1f, 0.1f})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::BoxLayoutRenderer</name>
    <filename>classime_1_1ui_1_1_box_layout_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; BoxLayoutRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>ab61015af254c8ff80fe655215e788dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPadding</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a58593fc1268ed8d64e61782f051c53f2</anchor>
      <arglist>(const Padding &amp;padding)</arglist>
    </member>
    <member kind="function">
      <type>Padding</type>
      <name>getPadding</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>aed3baef6c967ce5c700adbad5ad3850d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpaceBetweenWidgets</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a36f50add4b72226d8932f8b1e0a3f32f</anchor>
      <arglist>(float distance)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSpaceBetweenWidgets</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a55703046de9f33aad4c6b2a7489d665f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a7fed8e0b82153a6f2a0523af50825010</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a3076b7e2f40cdcce588dfa204097a115</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a4607575dcb0c38de295cfdbff8de696f</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>abcf73df503ed4b9dca0ad8ba6c61e5e8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a758c5abf7684207aa68b766c4ad8c30f</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a217c4ef3c3cd511fcf8caa74c0250836</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a29f44ad4390efc3aa424ec224a817f2c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>afa4dcafa2b466250311e1818e0d88700</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoxLayoutRenderer</name>
      <anchorfile>classime_1_1ui_1_1_box_layout_renderer.html</anchorfile>
      <anchor>a6bdffb8b8bf3278348581caaf20e0ed5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::Button</name>
    <filename>classime_1_1ui_1_1_button.html</filename>
    <base>ime::ui::ClickableWidget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Button &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>aa4605ecaa2647e4d170677459859d849</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Button &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>a061ca2b99e0d94a200b58bab959dd46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Button</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>ac4bd726e21229837df25c00de857b31d</anchor>
      <arglist>(const Button &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Button &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>a8ca01d06b70c8ecb1089d51394163232</anchor>
      <arglist>(const Button &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Button</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>aa51dc100c6b7478687e6966c5c910530</anchor>
      <arglist>(Button &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Button &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>ae2707e187dc95c1478c178d10c63daa5</anchor>
      <arglist>(Button &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Button::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>ac4b0ee507e86eecb0ff9ac480967957d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ButtonRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>a0c6a139815ddcb5c52b0fca1be4386da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>aafdb740969276d4bb8ce34cff3559e8b</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>a42b15992dff04251ca31c11f29bb5819</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>accd0afd9ca9442d78898657b52d139f5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>ae7188d19882c33306e03127f298226c5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Button</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>a5d7182fd6ccaa935930674bd29e510bc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>af9e2710fa80d4302bfcf3bbe598a7f9d</anchor>
      <arglist>(bool isEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aef17b82d68a97101bed11d120b0cd3fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a3873c38840d4d313d03aeb6894511e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a9d4deb57bcd9d3cfb390d4d7e941ab62</anchor>
      <arglist>(bool isFocused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a22a95490969b9836a4f9421346527188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Button::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_button.html</anchorfile>
      <anchor>a30a1712c3d5f9e1c050a0e957340cc48</anchor>
      <arglist>(const std::string &amp;text=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::ButtonRenderer</name>
    <filename>classime_1_1ui_1_1_button_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; IWidgetRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>a57539c67aec409d457c571a46fc105bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a0c698f604b371e78dd63e39d5422c798</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a4e30a1a8021faac0e31761f5862b95ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a010a5d93523de31da03bc570e5cb4b53</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a95594df8be86444048b41cc5987ad90d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a069d3b7014a3bbd24c91c2c19e4ae975</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>ad4a01280a8251fc0853ba7cffbd67d7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColourOnMouseDown</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a170d36fc652d1d0d24d379202898d4bd</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColourOnMouseDown</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a4c71e7b05cb8cab2f159815f0a991ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a0eb83a867354d3f46f3acf25ccc1016c</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>adaf1b7553ec69f477960723057cb928a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>ae10448526492c5ced6539438e16df3dc</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColourFocused</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a854872abe6cd33d2e2c9eabb8e1f88ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a552bbc70ebf78b793880b7d3e10436ca</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a5c883f52ae64043c4366a61b4787e827</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>ac4150a8815b023b551652bcf126d922b</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColourHover</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a9d551e78ceddc8e38f92152e55f859d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColourDown</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a73a9e0b8318e93bfbace7f418c90de16</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColourDown</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>ada8eaae3b5c9dbe5d219c6a2f900fc63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a636c5a27ae461b6cecd451394f8463eb</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>aa71dd64da6c487479a8abbecad6b8a09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a7fc5121138fbb0a966c66bbbc667be05</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFocusedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a75e7275e63caf1d9a29e9d31a8d7d330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a9421521dc1f43fa570a32a0fe111db2d</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a2cac5fdbd409b06a609e18bac31704c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a5e999abb1470fba9019c14f0218e2502</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a531e522937f0c2ea46a5745339c0867a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColourOnMouseDown</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a2d3279a2505963c2fd9f9d9f1a5be0f2</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColourOnMouseDown</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a8c071af18cc8fa4b20fd65aa07c6e121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a3d57cce75bd5882f74bc356855dfce7a</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>aaeaff15ac69f095ea3f4810d37845e97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a176d042a0ef320784b05cfb06a337088</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColourFocused</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a4e8e1c45a0ed4558a2d0a8915c3d7a33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a0b9fd2bfb6278fc302db0b57f26faaeb</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureHover</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a0999c950d31a2993ae6caed1349aa4b1</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseDownTexture</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a863facd14c8f65db32e10ce941890713</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledTexture</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a34e0ea12dea7ed5778ed6ba859e4297d</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedTextureFocused</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a62deef10a3d5289777131ff9ffc8ad72</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a1bed5e7f7869cd74d9b5fe41a6dc1f98</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a6e27d162571358122897fc66076e2d01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHoverTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a66a111c949e2aeacc87fda691e7dde7d</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getHoverTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>ad76468e4fca54982c5e01ed76fb8e5f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextStyleOnMouseDown</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>ad84dbf81f386d27ef3ed24804fa22404</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getTextStyleOnMouseDown</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a36a5f20b7245743f203cc58c7e7f9d18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextStyleDisabled</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a818deed4d9ab5847e7e18a4fe9499b33</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getTextStyleDisabled</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a9993c9bca2486004e14baefa23942cd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextStyleFocused</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>ad1c482587c573e4714a8d10e64be8209</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getTextStyleFocused</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a56cbef178243b31975c78e350ac031cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextOutlineColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a8c77d761ebc38b5e777484452b93f39e</anchor>
      <arglist>(Colour outlineColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextOutlineColour</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a4706ff0451f42e1ee2058b6e53576f32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextOutlineThickness</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>acfbd9b587f90881cf84c7fe326b885d3</anchor>
      <arglist>(float outlineThickness)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTextOutlineThickness</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>aa110c61d6dc6f2dfe2f9044bcd27bfd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRoundedBorderRadius</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>ad32894ec39ad0812d45a59c1dd63a80d</anchor>
      <arglist>(float radius)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRoundedBorderRadius</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>ae39777525fd891765d83c012106462a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a967b015afaf2847ba7cca914c9f4d6d7</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a30ed14563ea916dbba894073ad4899db</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a6f89a4a3a992a6eaaea2bfb8c9898127</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>af632f0adfc978a8a00de6978a0cba4c5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a139dd5cedf1a42cd4e7ce3c980068683</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a8363cbd154b51fa752b398db325553e9</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>a34e0468b0f3c8a8a3b3da63a0dc619f9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>af06ff7e5e54263dd8270d2824c69e1bc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ButtonRenderer</name>
      <anchorfile>classime_1_1ui_1_1_button_renderer.html</anchorfile>
      <anchor>af18489b3b2a14555ea2af11bdb094e01</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Camera</name>
    <filename>classime_1_1_camera.html</filename>
    <base>ime::Object</base>
    <member kind="enumeration">
      <type></type>
      <name>OnWinResize</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>ac53614e91761b7f426caa195da6c3223</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_camera.html" anchor="ac53614e91761b7f426caa195da6c3223afbb09a82eafab60150d0996e8fe46560">Stretch</enumvalue>
      <enumvalue file="classime_1_1_camera.html" anchor="ac53614e91761b7f426caa195da6c3223a3dc18b8e71fc36c10329da4554d58737">Letterbox</enumvalue>
      <enumvalue file="classime_1_1_camera.html" anchor="ac53614e91761b7f426caa195da6c3223af7fc0b215c2ca1fe31e23ccbc9bbab08">MaintainSize</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Object &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ad7bb736ac3c2213c99521958fd75c289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Camera</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a90c2ab7fe7fce32a0e795b554e3504cd</anchor>
      <arglist>(const Camera &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Camera &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a443ae7ee04f55161e3f417b0b77e7d79</anchor>
      <arglist>(const Camera &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Camera</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a62eb92d58e0ced5e0cc6f7a34718f150</anchor>
      <arglist>(Camera &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Camera &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a87567bd294b95e3dfc1fb3a46c3190a4</anchor>
      <arglist>(Camera &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a55e45ddc1c5337d52ddabea69d588254</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenter</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>af18ef4510996b32818066f81f5bc9fa3</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCenter</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a47632044fe516530f132ce44020c835f</anchor>
      <arglist>(const Vector2f &amp;centre)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getCenter</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>af4215620691961b22998698fbb660b7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a61f264eef38420ab3f7b2dd9505191f7</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a42fffa02e5b9279006a59fa154ad9a61</anchor>
      <arglist>(const Vector2f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a7d8c899eb724ca1f3fbd52a4e373dd9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>af9c0d099dfa7606bbe35fdd481cf9e7c</anchor>
      <arglist>(float angle)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>aa0d02daf6133beb44e804c3edc7665d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewport</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a89e729dd9f6c32c22bf94100bc3bdc37</anchor>
      <arglist>(const FloatRect &amp;viewport)</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getViewport</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>addec7d03028166a674e6b9a7942a8837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWindowResizeResponse</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a93c3e1acd032b5c17dcf86bee96bf86c</anchor>
      <arglist>(OnWinResize response)</arglist>
    </member>
    <member kind="function">
      <type>OnWinResize</type>
      <name>getWindowResizeResponse</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>ae6b1662a86ad43e4bc187317f403e6fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDrawable</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>ab7b17b5c4adf2b109d9c79934d393a13</anchor>
      <arglist>(bool drawable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDrawable</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a1b7f3760b9d693b925acae78bdfa7324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineThickness</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a951feec8fd799c5c12896a0c30443d1b</anchor>
      <arglist>(float thickness)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOutlineThickness</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a69c6b7e24431b7ede5e3038bee052a3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineColour</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a92419962b6562fa5ed7d61a3551a8328</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getOutlineColour</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a64c561b3c43a32ccdba01ded640bab42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getBounds</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a8778d441127425489fb4f3963cd11205</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>aea0261c7e2a1e0bf57ebb75de0fdbe7b</anchor>
      <arglist>(const FloatRect &amp;rectangle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetToDefault</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>ae956e9a8e0494d45c2ece3571a804938</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a166617532deafd0d23e883d501c99f5b</anchor>
      <arglist>(float offsetX, float offsetY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a78ac4e051e48147e7f9e9dfe482559a0</anchor>
      <arglist>(const Vector2f &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a0bd91b0f04ed3bdf0fecaad1ca3c6966</anchor>
      <arglist>(float angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zoom</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a5c6ac1020a160e3ab68c775a25b2edf8</anchor>
      <arglist>(float factor, const Vector2i &amp;zoomPos={std::numeric_limits&lt; int &gt;::max(), std::numeric_limits&lt; int &gt;::max()})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zoomIn</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>ad47f2af38f3a771e79931a16b62c5d5d</anchor>
      <arglist>(float factor, const Vector2i &amp;zoomPos={std::numeric_limits&lt; int &gt;::max(), std::numeric_limits&lt; int &gt;::max()})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>zoomOut</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a1efd93483cc75062e7973eaaa9f59202</anchor>
      <arglist>(float factor, const Vector2i &amp;zoomPos={std::numeric_limits&lt; int &gt;::max(), std::numeric_limits&lt; int &gt;::max()})</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>windowCoordToWorldCoord</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a2fc4a10ddc8866b570fa692385397869</anchor>
      <arglist>(const Vector2i &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2i</type>
      <name>worldCoordToWindowCoord</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a5b7f6a0d76b9efb27ef57b533d33e7d4</anchor>
      <arglist>(const Vector2f &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startFollow</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>abb1c95e008532d2d2eb850bda54324dd</anchor>
      <arglist>(GameObject *gameObject, const Vector2f &amp;offset={0, 0})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopFollow</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a6f0ca84c614580a5b6e9245efa518995</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFollowingTarget</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>aadae0ed2918bde0a3b4abfdb9875dff1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>getFollowTarget</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>ab104a1b4774e69789341752a39e73ab8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTargetFollowOffset</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a5fb7f5e42a1b7c6904bb2c739fb0a659</anchor>
      <arglist>(const Vector2f &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getTargetFollowOffset</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a544557c87948e3dd9043aedbb6df8625</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Camera</name>
      <anchorfile>classime_1_1_camera.html</anchorfile>
      <anchor>a98bf57598f8db3f6bbefd4aa096e42ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a8c3d545176c422a07532de6e2eb35f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::CameraContainer</name>
    <filename>classime_1_1_camera_container.html</filename>
    <base>ObjectContainer&lt; Camera &gt;</base>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae027bfc00fd139103849934bde296ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const Camera *)&gt;</type>
      <name>Predicate</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aab7510136cf7c452265d68aeac0f2615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Camera &gt;</type>
      <name>ObjectPtr</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5ae3d51bd034b26d8e7b857f62a5a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CameraContainer</name>
      <anchorfile>classime_1_1_camera_container.html</anchorfile>
      <anchor>acdd370fee8c80b04dca9cd04beea7d54</anchor>
      <arglist>(const CameraContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>CameraContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_camera_container.html</anchorfile>
      <anchor>a9c7acfca4e83860eb272b44da1e4fdf2</anchor>
      <arglist>(const CameraContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CameraContainer</name>
      <anchorfile>classime_1_1_camera_container.html</anchorfile>
      <anchor>ac3afb4b5ca5d5ba4ea68c434004559af</anchor>
      <arglist>(CameraContainer &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>CameraContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_camera_container.html</anchorfile>
      <anchor>a4c03c25ad8ecba90d652d18ead8b31ba</anchor>
      <arglist>(CameraContainer &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>add</name>
      <anchorfile>classime_1_1_camera_container.html</anchorfile>
      <anchor>a87199f287815be62964bde170c162d3b</anchor>
      <arglist>(const std::string &amp;tag, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>addObject</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af7fac8243327b97e4baea47e5528a006</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e46a10f020a21343f16b17a4f968e0c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9881b0537079eb48b07b7a1df0d2baad</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a13d6369c75c11ea680638b57d6922a72</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>add3afc05c6675aac6cc20a218015e542</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>findIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a8845c3d878a185cc4d07768c69ed027b</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ad55ca785fbfd6feb6408312803a5b1a4</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a26673a494a7b5265c6094e81583b37b4</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a258a49c10d0deac2345c78db5ab3ac9c</anchor>
      <arglist>(Camera *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af3eaf2bdab65f58c225b7aecd4879f84</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5913d605d157e07cfb1b1851d0cf903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa6b9a6116c166ce9a3ac513294888522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; Camera &gt; &amp;</type>
      <name>createGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a21e94370d66299d7e57dfdc9a2b1187c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; Camera &gt; &amp;</type>
      <name>getGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae5a6f15c8967a2c9914a3cfd6d35002c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9b9cd5119bf65be01dc8083aad2c4d75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5df7f17e840f96fcc6313392af7365d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllGroups</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4543480f98f131bf7421850bb32dbfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e93114f2ccfa2ce16256e27837324c0</anchor>
      <arglist>(const Callback&lt; Camera * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5c5405235df37dc8aaf313e52fd164b3</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; Camera * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachNotInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ab4160521ba9f9b945fbc82b45f4a29b9</anchor>
      <arglist>(const Callback&lt; Camera * &gt; &amp;callback) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::CheckBox</name>
    <filename>classime_1_1ui_1_1_check_box.html</filename>
    <base>ime::ui::ClickableWidget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CheckBox &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a0f6a80d3e75bbb63912134e1d0f2330b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const CheckBox &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a98f88bab2afa4cd62f6a8f34497c8cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckBox</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a9d4eafbb4ff7f3be67d3debd66ba632f</anchor>
      <arglist>(const CheckBox &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CheckBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a7f287d973d6eb134aed2096a7331c96a</anchor>
      <arglist>(const CheckBox &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CheckBox</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a98c96728876b2e17fdb1a2a9ec77351d</anchor>
      <arglist>(CheckBox &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CheckBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a891e3cb5d5761cf23143d07514ab74d7</anchor>
      <arglist>(CheckBox &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CheckBox::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>abca29c18972282b9397404871f601e5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CheckBoxRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a1b88cbc6b9896d39daeb122d1f54d4c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextClickable</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>ad8a15e2c12bc61525e123bf648d12bf9</anchor>
      <arglist>(bool acceptTextClick)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextClickable</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>af5cb2f8a52a4d7ab4781108cb5a2c8ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChecked</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>ab0c1367a68f96f262c7d84d344ae5c91</anchor>
      <arglist>(bool isChecked)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChecked</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a5de95721f701c6a5c6255b1afc52368a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>ad5cd4247f744b9f81d621bf4695969d2</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a246daca1dc6e972dad49d751ea2c8091</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a8c12c52d2a584c0e67b73d8cbe48ef53</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a7bb38baf680ef9ef05c1e298a9d8a398</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CheckBox</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a73444ade1ff9e1ede8c73c519bba4a90</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>af9e2710fa80d4302bfcf3bbe598a7f9d</anchor>
      <arglist>(bool isEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aef17b82d68a97101bed11d120b0cd3fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a3873c38840d4d313d03aeb6894511e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a9d4deb57bcd9d3cfb390d4d7e941ab62</anchor>
      <arglist>(bool isFocused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a22a95490969b9836a4f9421346527188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CheckBox::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_check_box.html</anchorfile>
      <anchor>a739f9aa9f4b265422bf6736b57f85362</anchor>
      <arglist>(const std::string &amp;text=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::CheckBoxRenderer</name>
    <filename>classime_1_1ui_1_1_check_box_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; CheckBoxRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a3620cb37e92981b94083c02407161f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ad0e91d855b3bca8af87864ac2d71b25c</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a43d0afa2c7f7eca1d2b12e5e72757494</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextDistanceRatio</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ad981794842579ff567f603f3ff3f387c</anchor>
      <arglist>(float ratio)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTextDistanceRatio</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ac20b37a7765b46364392cc1271307aec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a9a64b8884dd5bccf3af21c619b6080fd</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a70076d011b3fbbff2df481c2bf87170d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a25d2d5e2bd522a5f14775b3695d4fe49</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a72afddc9196c7293554e883b7bdeee29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>aaebf4e3a0dcb8ea322d78897863a695e</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a80053ed4693971aae6af381e77f4401d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a1b3012dfdaf91bbacd2b679636e90d43</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColourChecked</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>aedb5beb6ee1420aee627dfe336493bda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ad13db86cee29fd3026577bb835f5e064</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>aba1f6ddcdc1a3ecc94ce68b7ea0adf23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>aea28a37dec4edf6126c5ba9a63eab230</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ad464473b51d5688fce35e7d7e986f196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a56c995cb6e5db24344d2b10f9e361d4b</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a7ab6c3946d523adce1504e5abcb38825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a1cdae6be5ef7172fa63bcefc382b2d19</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a553479732beb22c540478a045e244fdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a577cfd4051a9995ed9d67f0f374135ee</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a489163b5d1e599bbbd637e3a74b720ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a71bcc263131e6ed67a9f1f98dae32a42</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ab8983b492ae3af0f87e4ece33af46ee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedHoverBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a42d1bb430f59b6916706750da38c2659</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedHoverBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ab2514eea5daeb406486cbac8a24d7bcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a29f17cbedaaf2b85c2a0c1d662d44ae9</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a70bca353b5ef446f41ba6b42bc506973</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ad0979170dd0f8c8856eff493d09ac3bb</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a463e76e9c45d41ccf060f358dc2ed5a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>aaafef50c48686d774d9f65b072fde025</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>adea3c30f23d2f6a3ee528175c4a61ed8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ac10dbffeb1dc7f2c5cf5daeb759a535e</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a9f4718c3a79a20be34d80dc46874715b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ad71f23444e8a7363f2df7fc33a38866f</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a00508ed7960932516ad9ef127fc4935d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a7d81407aabd8248711a852c4d805dd30</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ab3411ebbbc95a9788370fca45e75072a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedHoverBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a143e6094a75447f25aa85d70a52fafda</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedHoverBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ad58fb5742f777d467b4ed87656f90ed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>abc564f4fe7164d093fc1c5a142839c6c</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a104dbba8a6eae5cb11d23cd5c4b7a45c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a230a41e1de2b0d59af456e6487523d5c</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>acad30e75405527716218b6b517619176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a1472ff069abf956a2211276bc3a3aec1</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a64a1fb279cb81e3d1e960cf7458ce4f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a9f7a7a6a31bf20bffed5629638fe568f</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>abcd201c0e5a13099c67097e126559a04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledCheckedColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ab954c0020b476179b5c94bf9d85cbd86</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledCheckColour</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a302e548dcf203ac06491d2c16b213462</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUncheckedTexture</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a7a6807be64e249e2ffe6ed802342d5b1</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedTexture</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ab2441566d3dfa49b16150778d71f8bcb</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUncheckedHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>af6aa5c54315dc4388c522b59acd0be38</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a136dafdff5353454e9c570920d6b38d8</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUncheckedDisabledTexture</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>acaac8eb42e05cdcdf72ed7b1104b025e</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedDisabledTexture</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a8680e214afa63f7890c469dcb8577ce7</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUncheckedFocusedTexture</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a351a43e4ee3accf6250c6de3f777082a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedFocusedTexture</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a10fe33ec158ce58cfcf2f7d6a7b14525</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>af91f624b80aa6790452477ea1e606d72</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a1b44143ea9f3de6b7cce4b3d62f49d75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a419e8cacd5c83c856e3125c45ef710be</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getCheckedTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>abbfb0aa762d79b5999ddf4e3cb2ae138</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a17439f0baacde49293f0f999dd6160fb</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>aee16a0355eb466b10a33317ff7713d55</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>ac3ebe97b143c10f6e924f246e07fa19d</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>abe89daad854984e27b43aa5cf1f04f9e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a39ffd0796751371856f3e66250111917</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a75de9d1776a6d59440ab90be0b733333</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>abc68a00ba6d09f53dae4e2920082382b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>a255292fb4744b48d90445b2b6ac79e41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CheckBoxRenderer</name>
      <anchorfile>classime_1_1ui_1_1_check_box_renderer.html</anchorfile>
      <anchor>aea295975521a161aeed3513bf40105a1</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::ChildWindow</name>
    <filename>classime_1_1ui_1_1_child_window.html</filename>
    <base>ime::ui::WidgetContainer</base>
    <member kind="enumeration">
      <type></type>
      <name>TitleAlignment</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>ae4ae99a526bb06bfaeb385d845f66525</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1ui_1_1_child_window.html" anchor="ae4ae99a526bb06bfaeb385d845f66525a945d5e233cf7d6240f6b783b36a374ff">Left</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_child_window.html" anchor="ae4ae99a526bb06bfaeb385d845f66525a4f1f6016fc9f3f2353c0cc7c67b292bd">Center</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_child_window.html" anchor="ae4ae99a526bb06bfaeb385d845f66525a92b09c7c48c520c3c55e497875da437c">Right</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TitleButton</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a536fdce6123efe6e266f9e0f4f9ec636</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a536fdce6123efe6e266f9e0f4f9ec636a817c049c468fb8a368ffebc4963ad453</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Close</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a536fdce6123efe6e266f9e0f4f9ec636a970b4cc4f2b116ec746a2fe6ab9c5d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Maximize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a536fdce6123efe6e266f9e0f4f9ec636a7e77bb688a7efa7cb104f61b3b5f6dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Minimize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a536fdce6123efe6e266f9e0f4f9ec636ae4f5964d0987197058ea67e76a572438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ChildWindow &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>aadcfc3936d9fdd8024cecc3760b42d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ChildWindow &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>ab5e4574f9a435369782879c12af8bd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a536fdce6123efe6e266f9e0f4f9ec636a817c049c468fb8a368ffebc4963ad453</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Close</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a536fdce6123efe6e266f9e0f4f9ec636a970b4cc4f2b116ec746a2fe6ab9c5d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Maximize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a536fdce6123efe6e266f9e0f4f9ec636a7e77bb688a7efa7cb104f61b3b5f6dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Minimize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a536fdce6123efe6e266f9e0f4f9ec636ae4f5964d0987197058ea67e76a572438</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChildWindow</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a26db0da9acebb4c8596de7d3df74b4da</anchor>
      <arglist>(const ChildWindow &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ChildWindow &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a8d32b2e4d3f6e4ffa4842dabf32d7921</anchor>
      <arglist>(const ChildWindow &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ChildWindow</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>aac72c3b229dee97d718d2a0aea3e211f</anchor>
      <arglist>(ChildWindow &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildWindow &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a6184261ab16a2566851dbb438a9d0445</anchor>
      <arglist>(ChildWindow &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ChildWindow::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>aa0a5949ab82010071c1a04b17f0dea80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ChildWindowRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a775f6ccffcd9dddb0dd7c90bf7591ba9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClientSize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a98ed1db0d65dbf1b8c7a6e043358ec34</anchor>
      <arglist>(Vector2f size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getClientSize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>ad6fc28d3e9af6ebb4ee3c6af05aded84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumSize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>aea69a5ee2dae900666fd1082f0fea975</anchor>
      <arglist>(Vector2f size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getMaximumSize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>ab8f84725a7c938124354d1f6c566fff8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumSize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a86f20db037d3234ba058657a9f2727ff</anchor>
      <arglist>(Vector2f size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getMinimumSize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>af96ec1933c40c03fcd1f6bc5a38b8056</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitle</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a41b5b40cbac5b9a06c2c562fd4903cf8</anchor>
      <arglist>(const std::string &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTitle</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>ab4b1921f13cb02ed3e6231ff3c7838e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleTextSize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>ab26991c93957fa11148fa22e7b74c468</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTitleTextSize</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>abf75a0f07cc92210201aa7c5fb2739c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleAlignment</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>aeeae8802f9078e91ea605f6c1fcfbb46</anchor>
      <arglist>(TitleAlignment alignment)</arglist>
    </member>
    <member kind="function">
      <type>TitleAlignment</type>
      <name>getTitleAlignment</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>aff2dcb7ad803a7f95a1b64af8bc22948</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleButtons</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a9a7f3ab4fbe1a0f13240dd733dc8648b</anchor>
      <arglist>(unsigned int buttons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a776feb9cbf64fff086a420bd68be4bdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a9755c72d31846826baac4d185a93f788</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResizable</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a5232da04e5f5a1b5be5a3312b9020d90</anchor>
      <arglist>(bool resizable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResizable</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a8783627091d5aac52996e829090dd8ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDraggable</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a8f350556a0002eded1597991622354da</anchor>
      <arglist>(bool draggable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggable</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>aaa23ae7cdff34338b2eea91bc22db716</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeepInParent</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a5cbeae541a41484a5af21fcb87444b41</anchor>
      <arglist>(bool enabled=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeptInParent</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>aedba9ecd414899fdc87edbfb4d9e061e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a30cd0c771bb83159fecf3c2e11965115</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>aeacd97613fd801662b9a957ea8fcae33</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChildWindow</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a0255ea6421c670a3a2ae8ddf6e8f0dd2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a655ee1010db960c007c2be5e32a4ca25</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7b4149560be75c68d9874bb650cd1a20</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aab8793c4004717e8a3df985cfa86e22d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a6dbb5d766d355a14f4b68501bb36e703</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetAtPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ac0ffedec6aaa059237db9900a454a064</anchor>
      <arglist>(Vector2f pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8894e84e51733d3be13054df9a4f60e5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a24e9c179de1f8f39ca6c15dd1ab97b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ae071b10b1dd275b7b21b2dc8e0b045f2</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ab8fa96eadd34575b8a2a84923391895b</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ad398e39dc582f530bfd0492566eaa261</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8fcd040ece49ba681d4a49e33222a0c9</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a0826fe366a440cde9efb62dc520cd414</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>abd9db967affeef6e89ec3635a28e5504</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a5c5447ea7d1ffd6e87f2bbe2a935d146</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a294427255e4ed49aa2cf150e7d3d2a6e</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa0f983e4503190f75648b4c68dd44235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedLeaf</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a3ca1a14ea74975a02def0b1245705546</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusNextWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7e0bf072b5396208fc7ca2a8705490c0</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusPreviousWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa48887ce4b7f524910f21d34d9e061ed</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a530b03d553311b0321417543408a04e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a1046a4c1183e1bdfd0a9f15d551c3fa1</anchor>
      <arglist>(const Callback&lt; Widget * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ChildWindow::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_child_window.html</anchorfile>
      <anchor>a2270c1a39efd6d9b6269e7974bc8cadb</anchor>
      <arglist>(const std::string &amp;title=&quot;&quot;, unsigned int titleButtons=TitleButton::Close)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::ChildWindowRenderer</name>
    <filename>classime_1_1ui_1_1_child_window_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; IWidgetRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>a57539c67aec409d457c571a46fc105bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a638c30bb128685146a0a6a8645a72782</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a85101eff09b72d9510fda0d68d7d0d23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarHeight</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a8ab3c259e75c294b64f2ccbd27941957</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTitleBarHeight</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a5aaf0633abed483106851cf61e8bee3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarColour</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>ac932a116f095fa03458553fa261987da</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTitleBarColour</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a0d6ae69b81ad50f6d066ee32302edf2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleColour</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a639158ade30e29fa84811c4bfb91f568</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTitleColour</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a2cd851cc5c46b3aa03ecee8a4a696158</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a8ec70af54c2858459385a0ea70adc034</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a09b0907e1dc74131302d3bc974ceb456</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a81242422498e9e0dc03c2290a0ad5c0c</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>ac40420efab706e117f9c698e71b1679e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>ae1e7d91d9c1c41a3e2f54b3b1d4ad0f4</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColourFocused</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>ae7b099670f4bebb9a7e596fb0051a87a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderBelowTitleBar</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a9c5d4cbd96a637cd20f74fa8bc2814aa</anchor>
      <arglist>(float border)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBorderBelowTitleBar</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a94e3f27fe0984fa8ecd4b4c33b077625</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceToSide</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a2a8869d88796153a3aaded9891baaaab</anchor>
      <arglist>(float distanceToSide)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDistanceToSide</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a9e01b05a984b4da930f448cd1c976f8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPaddingBetweenButtons</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a6282e65e534e00f64e9ddfaa2dc7a908</anchor>
      <arglist>(float padding)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPaddingBetweenButtons</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>aaf560b7761a30ab02292f25872705d7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumResizableBorderWidth</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a935d58809aedf58314b264f2bb251930</anchor>
      <arglist>(float minimumBorderWidth)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMinimumResizableBorderWidth</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a820dc9faa5bb11a88b6c8e481814fed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShowTextOnTitleButtons</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a8926695e6dba4004f1d7c8478df0e83f</anchor>
      <arglist>(bool showText)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextShownOnTitleButtons</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a1f13fbf9b56fa4f5af3b97951aaf7d52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureTitleBar</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a37fe6d7c388dafaa897820bc39e64df8</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureBackground</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>abadfc137b2a2b651c894725088d48321</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a272038196fac67bd807b74c526dd2dc3</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a5bead3c50b8df0c7f95815806ab67a81</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>ac6c794c9e744970f08dbbe3647677595</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>ad11a0c2725295c821a3ecd604111f05d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>af7833df818ca0999d7ecf91898aa2f95</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>af55cdc21bbf7b3f670ac43d38e6147fa</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>a4ffb3112c4ed9db98cbb5faf6501d36d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>ad2a2ed094d787b7ef177a26a592c4ada</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ChildWindowRenderer</name>
      <anchorfile>classime_1_1ui_1_1_child_window_renderer.html</anchorfile>
      <anchor>aae904ceebbc2b40b1d73020ce77647e0</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::CircleCollider</name>
    <filename>classime_1_1_circle_collider.html</filename>
    <base>ime::Collider</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CircleCollider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>ac4eb5b3041e7db094e2c327e809b6ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2415031582cf0d43ad6fb0a4d1f8c8dd</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda30954d90085f6eaaf5817917fc5fecb3">Circle</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda3cfce651e667ab85486dd42a8185f98a">Box</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8ddae4a297a0f76119a442c2595ac040673e">Edge</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Collider *, Collider *)&gt;</type>
      <name>CollisionCallback</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a6d3d0f3cff1081d433e4e0f718281949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleCollider</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>a2aa8fdbe13738397d5ec86a1dc41dd00</anchor>
      <arglist>(float radius=0.0f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleCollider</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>a3c1512b0849036220db3fa4fe3f975d3</anchor>
      <arglist>(CircleCollider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CircleCollider &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>a5f31166fe9f187808a4256f5e4ce8af5</anchor>
      <arglist>(CircleCollider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CircleCollider::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>a259fbe57340330499657d4b05f6a2d69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Collider::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>af7c959b35921d8bdb5929acaa135d83a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>acc4abcfebd1e23b4fc6a4dad318a3884</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>aef1d54bbe35ee31b9df0438b63242234</anchor>
      <arglist>(const Vector2f &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>af4f6f6003dd67ac3d529f101d9002278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>a59ba7e73b1f91c621fa41f3b10b6fecf</anchor>
      <arglist>(float radius)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadius</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>a83bbd2f7619863025922e445b914063a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CircleCollider</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>adf88a97f58904fcf37402309a111aead</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ac44c4b0ee550601366e73df9775a0d51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>afa1d09fd0e6ce441b3f2d3bea139b090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2f378fd015e16c95969e492355e03d91</anchor>
      <arglist>(float density)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af9e97fa2e18d91f73d1e4e817bf95471</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a20cd09ce098cfdf58faec0fbc5f30489</anchor>
      <arglist>(float friction)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a0d199c1e6cfb0878dead6aeabe66e91b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acf6bf0876de22fa487ed19134e862e5b</anchor>
      <arglist>(float restitution)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a973064c47b209f6059afda97e176bcf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aafef833a75f448eb7132674bb6b529be</anchor>
      <arglist>(float threshold)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af4bbe2a4d95aa674a384e3718708e17f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ae94d60f49800bd913640f6f5f45beab3</anchor>
      <arglist>(bool sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ad50f8712319dc00c42deb412cc679314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollisionFilter</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a32562e8dc0dee0bd6f985979329b048d</anchor>
      <arglist>(const CollisionFilterData &amp;filterData)</arglist>
    </member>
    <member kind="function">
      <type>const CollisionFilterData &amp;</type>
      <name>getCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a97c926ba8d6a0d3310c7813e47c2bc06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acddf186f01d08754fbc03f1a3efcd3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnable</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a488ac3ca6da6039d159f972b4fadef18</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttachedToBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a4576c4f1d0985bed496164fafcce3115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a10ae9d612b3e063372804fc4eef4a351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa9d396d8e0c191b7ea7dd8372dbf4408</anchor>
      <arglist>(const Vector2f &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a69f252089ac37cb7329ae151681614e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactBegin</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>abb61d78452cbceb12f427e61e3bf6f48</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactEnd</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa51a380cc693325caaf5584ebb86e464</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactStay</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acea608515a9740acf6c5e445bafdfbbb</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CircleCollider::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_circle_collider.html</anchorfile>
      <anchor>a42ac87f80937e970838decfdf20fa3e0</anchor>
      <arglist>(float radius=0.0f)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::CircleShape</name>
    <filename>classime_1_1_circle_shape.html</filename>
    <base>ime::Shape</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CircleShape &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>aba897dbc357b309087c76fb064acd6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a2adff49d5377088a787ab5d5e78e1b2a</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aace9291906a4c3b042650b70d7f3b152e">Rectangle</enumvalue>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aa30954d90085f6eaaf5817917fc5fecb3">Circle</enumvalue>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aa766cae017fab4bcc1d1e83fbb9af87c3">Convex</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleShape</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>acce544a18a0f5b0b7d595584063ef0c0</anchor>
      <arglist>(float radius=0.0f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleShape</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>a6973a113bbd46090cf75c141e32bc528</anchor>
      <arglist>(const CircleShape &amp;)</arglist>
    </member>
    <member kind="function">
      <type>CircleShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>a615be6566f71f46f0c7f777c93a73adb</anchor>
      <arglist>(const CircleShape &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleShape</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>a591b6117798339e395a89a01e16c193e</anchor>
      <arglist>(CircleShape &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CircleShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>a7c5fa0aabf659528ff61769db87d9385</anchor>
      <arglist>(CircleShape &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>CircleShape::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>ae64791bfe570ac25368dda85d628a6ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>a58337800311afdee41ea20b62753d067</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>a39536c86e4868a5a2be7ec134c324daf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRadius</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>a923ce4c12924ef0f176de3ea09080303</anchor>
      <arglist>(float radius)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRadius</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>a1dc9f10edaecc273dd2fc4e468add56f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CircleShape</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>ad4fddae9f474ecc9b5f08289c79fd7fa</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aa3098cf8ffc8cde7adb16f977f35efe4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getShapeType</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ae0af9160257c5bf49c14581f214bc126</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ab90bc710480aa08120f355da43006f18</anchor>
      <arglist>(RigidBody::Ptr body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a02ab88051df380b3188f5a4c43dacc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aadc548793f5ba7c5aeb2b9d86ce12be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a0ad598930dc030f93da8e72b4ddbece7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a7228784d060da6750f2816f05d65c144</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a33424011e839c0157b90422030ab0b4f</anchor>
      <arglist>(const Texture &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>Texture *</type>
      <name>getTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a86be4c524fb7519ecc13595fa004b5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a49f20a202dc872e2317289c5d5a8493d</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFillColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a73e5a769b8bd86f4af8fc65ccf8532c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aeace88d91e94bdee09ee8e4dad9ba75f</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getOutlineColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a43fea7c097fe6317c74ccaa78d8d1b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineThickness</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af36c470d2e5809c7d5371f4a190b8f6c</anchor>
      <arglist>(float thickness)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOutlineThickness</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a1ca4905e8910ffb4283c3c1ca86b1a32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getLocalBounds</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>afd26385a59b4505a28855981eb5c1210</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getGlobalBounds</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ada6248699b13ff029af0f5ea777b67ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a283bf269d05e37bafcdf85d41317264d</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af3017f59a397b4405bf1424bead653d1</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ad8b1e72beffd398c64be419697993a36</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a3be1c9c89ef144fbeb510549aedfc77e</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aee18048dd56be84142dd1dc0c8aea2d8</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a3f82f21625f68ea7ac46c49fd752d090</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ad3f3ebc572e1b324575ae1af07126444</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a160c8bdea9afb979c7f808ad3f737c4e</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a682678070416426f84d83a2e80fa99b8</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a203ca64eb5d8721db62151d910c0b4a2</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aa8e7dcf591164a703f60d7797d38b086</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a7a480796831e01bd042e2078f0ba8ad3</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af7439d591633b8bb84b12e0d45552e73</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a98b264b897bc940e68df895b3a04557e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a549d3d6cee255015d8800b750ab49cba</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a594eefa0a97b9421cfa9f8b8b659e99a</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>afcd6406bb20fbd4473af9e6135579e23</anchor>
      <arglist>(priv::RenderTarget &amp;renderTarget) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CircleShape::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_circle_shape.html</anchorfile>
      <anchor>a18c23acc9f3e1b4e2a579ee9851c8f0b</anchor>
      <arglist>(float radius=0.0f)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::ClickableWidget</name>
    <filename>classime_1_1ui_1_1_clickable_widget.html</filename>
    <base>ime::ui::Widget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ClickableWidget &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a150b276653de443569b33b9370ca2b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClickableWidget</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a8a7301e0912d1c98ee7fc32a045cb8f8</anchor>
      <arglist>(const ClickableWidget &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ClickableWidget &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aaef9b2ba437c95242c2ab7da9d902d93</anchor>
      <arglist>(const ClickableWidget &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ClickableWidget</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a8a3bbe73cfee26930397212903905a7a</anchor>
      <arglist>(ClickableWidget &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ClickableWidget &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aa97ff53919e5f589525e69ad05e87d62</anchor>
      <arglist>(ClickableWidget &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>af9e2710fa80d4302bfcf3bbe598a7f9d</anchor>
      <arglist>(bool isEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aef17b82d68a97101bed11d120b0cd3fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a3873c38840d4d313d03aeb6894511e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a9d4deb57bcd9d3cfb390d4d7e941ab62</anchor>
      <arglist>(bool isFocused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a22a95490969b9836a4f9421346527188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ClickableWidget</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a81034f88fc556ae7f8c46928a6dcba1c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14f1c77dcb99eaba385845363242c061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a47243168addd736d0dd08eee6b4e7b89</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>acf5e72f074fd7e304e7f6071ce806d2f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Clock</name>
    <filename>classime_1_1_clock.html</filename>
    <member kind="function">
      <type></type>
      <name>Clock</name>
      <anchorfile>classime_1_1_clock.html</anchorfile>
      <anchor>a478f0dbb3ccde1d87d409c360075fa46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getElapsedTime</name>
      <anchorfile>classime_1_1_clock.html</anchorfile>
      <anchor>a98e3963299956372648a73855712651b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>restart</name>
      <anchorfile>classime_1_1_clock.html</anchorfile>
      <anchor>a1737efeaa85f826a725a46251537476e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Collider</name>
    <filename>classime_1_1_collider.html</filename>
    <base>ime::Object</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2415031582cf0d43ad6fb0a4d1f8c8dd</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda30954d90085f6eaaf5817917fc5fecb3">Circle</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda3cfce651e667ab85486dd42a8185f98a">Box</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8ddae4a297a0f76119a442c2595ac040673e">Edge</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Collider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa0fc34c2c8ccfa83b624188f23a6d693</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Collider *, Collider *)&gt;</type>
      <name>CollisionCallback</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a6d3d0f3cff1081d433e4e0f718281949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Collider</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a1edb1cfe8999321cc9e6fd9ac2983f15</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Collider</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af59392e9791dec7c6091c3311305dea2</anchor>
      <arglist>(Collider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Collider &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a25406edfdac09da9f45b5137b7f8a3c4</anchor>
      <arglist>(Collider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Collider::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a5b594837ad5710890b759162a13f78c4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ac44c4b0ee550601366e73df9775a0d51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>afa1d09fd0e6ce441b3f2d3bea139b090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2f378fd015e16c95969e492355e03d91</anchor>
      <arglist>(float density)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af9e97fa2e18d91f73d1e4e817bf95471</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a20cd09ce098cfdf58faec0fbc5f30489</anchor>
      <arglist>(float friction)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a0d199c1e6cfb0878dead6aeabe66e91b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acf6bf0876de22fa487ed19134e862e5b</anchor>
      <arglist>(float restitution)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a973064c47b209f6059afda97e176bcf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aafef833a75f448eb7132674bb6b529be</anchor>
      <arglist>(float threshold)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af4bbe2a4d95aa674a384e3718708e17f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ae94d60f49800bd913640f6f5f45beab3</anchor>
      <arglist>(bool sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ad50f8712319dc00c42deb412cc679314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollisionFilter</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a32562e8dc0dee0bd6f985979329b048d</anchor>
      <arglist>(const CollisionFilterData &amp;filterData)</arglist>
    </member>
    <member kind="function">
      <type>const CollisionFilterData &amp;</type>
      <name>getCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a97c926ba8d6a0d3310c7813e47c2bc06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acddf186f01d08754fbc03f1a3efcd3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnable</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a488ac3ca6da6039d159f972b4fadef18</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttachedToBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a4576c4f1d0985bed496164fafcce3115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a10ae9d612b3e063372804fc4eef4a351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa9d396d8e0c191b7ea7dd8372dbf4408</anchor>
      <arglist>(const Vector2f &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a69f252089ac37cb7329ae151681614e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactBegin</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>abb61d78452cbceb12f427e61e3bf6f48</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactEnd</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa51a380cc693325caaf5584ebb86e464</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactStay</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acea608515a9740acf6c5e445bafdfbbb</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type></type>
      <name>~Collider</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a77c3c728d376613237e79f37362e3d4e</anchor>
      <arglist>() override=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a893e90e8498458bd9d43fe9041a22f02</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Collider</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>abbbabd9f7467a7cd6c45bf9372452bf0</anchor>
      <arglist>(const Collider &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Collider &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a22b12f23fad1eee91b0358cb46bd7c9d</anchor>
      <arglist>(const Collider &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RigidBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>abb8b03bec6b0a8e0834c8358c93039d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::CollisionFilterData</name>
    <filename>structime_1_1_collision_filter_data.html</filename>
    <member kind="function">
      <type></type>
      <name>CollisionFilterData</name>
      <anchorfile>structime_1_1_collision_filter_data.html</anchorfile>
      <anchor>a4d041bb7ba65a491956f18aceaa99789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>Uint16</type>
      <name>categoryBitMask</name>
      <anchorfile>structime_1_1_collision_filter_data.html</anchorfile>
      <anchor>acb948f786ae4748796d5554febd43a31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Uint16</type>
      <name>collisionBitMask</name>
      <anchorfile>structime_1_1_collision_filter_data.html</anchorfile>
      <anchor>aa3c7e3de673a88c799f9414e3939fc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Int16</type>
      <name>groupIndex</name>
      <anchorfile>structime_1_1_collision_filter_data.html</anchorfile>
      <anchor>ab48e6a53bccdd31ff5dfc5af67c2c780</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Colour</name>
    <filename>classime_1_1_colour.html</filename>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a91506b2b397f3d4a9f59bf051d791ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ac8ebfe86da927633e10d0bf2fcd42f8a</anchor>
      <arglist>(unsigned int r, unsigned int g, unsigned int b, unsigned alpha=255)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Colour</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a2b61ff1db3903c2ebb591edd8a72ba7f</anchor>
      <arglist>(const std::string &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a3f355c8888df442de1bbc92092b8b786</anchor>
      <arglist>(const Colour &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a46d02abccf503fcdd720bdae2ec65aa1</anchor>
      <arglist>(const Colour &amp;rhs) const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>red</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a9bdcdde1d175d249c42b9ca1cffe50d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>green</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a31fc93d86baa0d19b0e1dae8adf4cee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>blue</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a584faa5ac51611b34a525f4c9b43fc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>opacity</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a4ec83ac537a0b3014d7750625a758292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Black</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ad6c1332acf40cb3cee07d808cea14e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>White</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ac75ee5bac5f04165849f23061e0c5c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Red</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a4e6302ed728e1a864523ca96ce72f011</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Green</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a4a1a41fc23f1371be59324bb3a259fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Blue</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a16d31fa5fec5637481a7ce54decc2e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Yellow</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>afa151fe42906d1f06e5a387426ec2adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Orange</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a621c6e829cc9ff97c3d15e08a0e28a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Brown</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>afa0d5a04800db97d982fbcf2472b35cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Maroon</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a62245094f5e4706f4d34188e8a7513ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Indigo</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a1f4943a629d02c5f046865f945c3bcf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Cyan</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ab98e04c91a0ba5a32f4192e42e7b0eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Magenta</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a76c80fe18e31dc123d24a1f4860bf17c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Purple</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a4ac3d029b6f40127496d9ea56caeaa55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Pink</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ab5b3103c9b31da0c736fa3cbdd25f61c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Grey</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>abb69fbb62fb008edc04ed48382b8f791</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Violet</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ac4522bae2493e327bd9464bbd0febe8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Turquoise</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>afe350974b6805dc6328b7fb7b6d56f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Gold</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ab369223c4933795fe8d73ee7b812f6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Silver</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ad83ebd205e598eeac90f157814c97ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Colour</type>
      <name>Transparent</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a28c054a42ffb17f80ea2dbab39db5684</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IME_API Colour</type>
      <name>operator+</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>aa97d3e8c9bf09feebefe9a206141e059</anchor>
      <arglist>(const Colour &amp;left, const Colour &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Colour</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ac59efb6ab069427479192de41bfa314d</anchor>
      <arglist>(const Colour &amp;left, const Colour &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Colour</type>
      <name>operator*</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>aead61130b2f0dbe4cf0b33bdba3d8ba5</anchor>
      <arglist>(const Colour &amp;left, const Colour &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Colour &amp;</type>
      <name>operator+=</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>ad02e8acc9ab99ef0a7a2bd8b43a79781</anchor>
      <arglist>(Colour &amp;left, const Colour &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Colour &amp;</type>
      <name>operator-=</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>aa92facfd40d639cded012d41036555b1</anchor>
      <arglist>(Colour &amp;left, const Colour &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Colour &amp;</type>
      <name>operator*=</name>
      <anchorfile>classime_1_1_colour.html</anchorfile>
      <anchor>a37bb662b2c8b2272d1e4d2e80a5a40d8</anchor>
      <arglist>(Colour &amp;left, const Colour &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::utility::ConsoleLogger</name>
    <filename>classime_1_1utility_1_1_console_logger.html</filename>
    <base>ime::utility::ILogger</base>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classime_1_1utility_1_1_console_logger.html</anchorfile>
      <anchor>a3c1a37586583e094cb61b695b32caff9</anchor>
      <arglist>(MessageType logType, const std::string &amp;msg) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ConvexShape</name>
    <filename>classime_1_1_convex_shape.html</filename>
    <base>ime::Shape</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ConvexShape &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>a5b852c853af1b1018b67e01dddb8f5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a2adff49d5377088a787ab5d5e78e1b2a</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aace9291906a4c3b042650b70d7f3b152e">Rectangle</enumvalue>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aa30954d90085f6eaaf5817917fc5fecb3">Circle</enumvalue>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aa766cae017fab4bcc1d1e83fbb9af87c3">Convex</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>ab5f3aa2edce9d066189523036f1bd33e</anchor>
      <arglist>(std::size_t pointCount=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>ad8d057342073ff8df81b44a36837686b</anchor>
      <arglist>(const ConvexShape &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ConvexShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>aa090c89785cb68790efa1ed0d1ebe3e9</anchor>
      <arglist>(const ConvexShape &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConvexShape</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>a5269e5952c72b8084586b310ea1f881b</anchor>
      <arglist>(ConvexShape &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConvexShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>a744488cc41723dd9fdc04a397ca086a4</anchor>
      <arglist>(ConvexShape &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ConvexShape::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>adfdbf047b915452b262e662f4b1a57e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>abe7e161270af2f3a94c7c2b13f351471</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>a0fc36a4d1c9cef70978e5f442cc24e89</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPointCount</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>aea3600e2f8080e36141c7e82e6bcd6f3</anchor>
      <arglist>(std::size_t count)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getPointCount</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>ad9f91c0354ef146d357e97a5d439c869</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPoint</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>a8a94f87493c0273039e55c9a61d120a8</anchor>
      <arglist>(std::size_t index, const Vector2f &amp;point)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPoint</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>a9c7fb3dab5b822500af0b56be84e3919</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ConvexShape</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>a730a4c3b2c241e59ac2fbf2c7f22b9fc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aa3098cf8ffc8cde7adb16f977f35efe4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getShapeType</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ae0af9160257c5bf49c14581f214bc126</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ab90bc710480aa08120f355da43006f18</anchor>
      <arglist>(RigidBody::Ptr body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a02ab88051df380b3188f5a4c43dacc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aadc548793f5ba7c5aeb2b9d86ce12be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a0ad598930dc030f93da8e72b4ddbece7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a7228784d060da6750f2816f05d65c144</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a33424011e839c0157b90422030ab0b4f</anchor>
      <arglist>(const Texture &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>Texture *</type>
      <name>getTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a86be4c524fb7519ecc13595fa004b5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a49f20a202dc872e2317289c5d5a8493d</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFillColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a73e5a769b8bd86f4af8fc65ccf8532c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aeace88d91e94bdee09ee8e4dad9ba75f</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getOutlineColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a43fea7c097fe6317c74ccaa78d8d1b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineThickness</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af36c470d2e5809c7d5371f4a190b8f6c</anchor>
      <arglist>(float thickness)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOutlineThickness</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a1ca4905e8910ffb4283c3c1ca86b1a32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getLocalBounds</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>afd26385a59b4505a28855981eb5c1210</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getGlobalBounds</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ada6248699b13ff029af0f5ea777b67ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a283bf269d05e37bafcdf85d41317264d</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af3017f59a397b4405bf1424bead653d1</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ad8b1e72beffd398c64be419697993a36</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a3be1c9c89ef144fbeb510549aedfc77e</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aee18048dd56be84142dd1dc0c8aea2d8</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a3f82f21625f68ea7ac46c49fd752d090</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ad3f3ebc572e1b324575ae1af07126444</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a160c8bdea9afb979c7f808ad3f737c4e</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a682678070416426f84d83a2e80fa99b8</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a203ca64eb5d8721db62151d910c0b4a2</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aa8e7dcf591164a703f60d7797d38b086</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a7a480796831e01bd042e2078f0ba8ad3</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af7439d591633b8bb84b12e0d45552e73</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a98b264b897bc940e68df895b3a04557e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a549d3d6cee255015d8800b750ab49cba</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a594eefa0a97b9421cfa9f8b8b659e99a</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>afcd6406bb20fbd4473af9e6135579e23</anchor>
      <arglist>(priv::RenderTarget &amp;renderTarget) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ConvexShape::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_convex_shape.html</anchorfile>
      <anchor>a7d7cb7788358d197ff178e71ee816dd6</anchor>
      <arglist>(std::size_t pointCount=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::CyclicGridMover</name>
    <filename>classime_1_1_cyclic_grid_mover.html</filename>
    <base>ime::GridMover</base>
    <member kind="enumeration">
      <type></type>
      <name>CycleDirection</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a8ca4ee31522d155a684b960d2c1ae305</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_cyclic_grid_mover.html" anchor="a8ca4ee31522d155a684b960d2c1ae305aba360a794737bcc8657a5b6e870d7ba8">Clockwise</enumvalue>
      <enumvalue file="classime_1_1_cyclic_grid_mover.html" anchor="a8ca4ee31522d155a684b960d2c1ae305a3ac558edd1e7ab76b05ea7e3eef91b54">AntiClockwise</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; CyclicGridMover &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a3cf9ecdcc3dd833ac9513062230f300c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a07b612eb1a30ee0d7012a891a805e93a</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aae1ba155a9f2e8c3be94020eef32a0301">Manual</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa64663f4646781c9c0110838b905daa23">Random</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aac41a31890959544c6523af684561abe5">Target</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aad71670d62b238eaf063979407361034e">Cyclic</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aaa55529813aef6ca28b9d22ee0442e02b">KeyboardControlled</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MoveRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a62c372e0dbb8e5a0be9b8fa5fd9724fc</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcab1c94ca2fbc3e78fc30069c8d0f01680">All</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca9ac677ee4eec25d9e59707a661d2c5e1">Diagonal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca3e85a6323568ffe699745b4eef821495">NonDiagonal</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>CyclicGridMover</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a7703feeca21a16ec735b10cbe459e443</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *target=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a44630c980e6ff446951c6a9ef7cfdb30</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startMovement</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a7ed330115ea6979666a0312fd288608d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopMovement</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a241a9e4e233be977fa87bbf8899e35ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCycleDirection</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a5b606109b870071b6c79f6c1c3401033</anchor>
      <arglist>(CycleDirection direction)</arglist>
    </member>
    <member kind="function">
      <type>CycleDirection</type>
      <name>getCycleDirection</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a2a67e8591d11d3551a1840bfe0227c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CyclicGridMover</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a5cc07cbf2c1e8e5108b3638e3bbb3ba6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8e3a0ca52ae74832ef1525671ba1b49c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncWith</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a0627539f4f7e59a9905c4d9d37396089</anchor>
      <arglist>(const GridMover &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestMove</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a82d5a2809795725446f88f0ed90f4c71</anchor>
      <arglist>(const Direction &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, GridObject * &gt;</type>
      <name>isBlockedInDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a266600fc2eef282439b2d507b358c427</anchor>
      <arglist>(const Direction &amp;direction) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a39ab796c7ce3807533afd9d64bce8425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getPrevDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a986f4a16ef608e0873ee2c8a1455c65f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2b8a2eb07cdf61592f63a32e8e88436f</anchor>
      <arglist>(GridObject *target)</arglist>
    </member>
    <member kind="function">
      <type>GridObject *</type>
      <name>getTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa519ad160ab2062363eb65a596f61d4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ada3898f9de6562ae8ff0ab9a6b7c813f</anchor>
      <arglist>(const Vector2f &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6d91709a02eb517e68edb798949bd91d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a3a9c1ee303df652a29e07ac33ecb00b7</anchor>
      <arglist>(float multiplier)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>acf2934181430189656188257bd77ed5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a121bf39232196e459b0c0b619e963c7b</anchor>
      <arglist>(MoveRestriction moveRestriction)</arglist>
    </member>
    <member kind="function">
      <type>MoveRestriction</type>
      <name>getMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a04e9f2ca7f76fd6c6278797ab46e6a65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementFreeze</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2a264750eeefd2cacf760ad9d785d3a7</anchor>
      <arglist>(bool freeze)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMovementFrozen</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7f7c162f7555b076e7a490baca60edcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getCurrentTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aaf9fa52e0e29d28c988b1d645e1e29ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getPrevTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a75dd6cd8343b1741e88ff8de80c5830f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af8722af658036b2f6b7b40fe5bdbf1e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grid2D &amp;</type>
      <name>getGrid</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7872637d83ac8efddac5a4bf956469f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTargetMoving</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af2f703bf9dfc0c91c76716dac3ded84a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teleportTargetToDestination</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a1861b96d89d9bc4539eda2cdacd356b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDirectionChange</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa54c01c573b9b968117a0b5ef0fd8618</anchor>
      <arglist>(const Callback&lt; Direction &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetTile</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ade350b65cfb3791254d942550882b895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTargetTileReset</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a77f61b75e33ec1e8ef9a3da3076938d0</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveBegin</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa8181e77c50a31a9200e7f64120144ec</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveEnd</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a37f1bbb0367901e3f8b79dfb4d764e8e</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onObjectCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ae56a395c13ead1ca472909d9d1f77993</anchor>
      <arglist>(const Callback&lt; GridObject *, GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onBorderCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8a29c1e5ea9348913794d21428197b13</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTileCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6a0ec54bb9214803536761cc7cd9a18a</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CyclicGridMover::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_cyclic_grid_mover.html</anchorfile>
      <anchor>a8afd4ea0ccb29328a9a57a6cdb21331c</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *target=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::DebugDrawerFilter</name>
    <filename>structime_1_1_debug_drawer_filter.html</filename>
    <member kind="function">
      <type></type>
      <name>DebugDrawerFilter</name>
      <anchorfile>structime_1_1_debug_drawer_filter.html</anchorfile>
      <anchor>a06dee3ec58c96c991bf03da033b4937d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>drawAABB</name>
      <anchorfile>structime_1_1_debug_drawer_filter.html</anchorfile>
      <anchor>a898d49fbf1ecff2562c6d109b04bb946</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>drawShapes</name>
      <anchorfile>structime_1_1_debug_drawer_filter.html</anchorfile>
      <anchor>aa62e0948daf1b2246e74bc2591c30c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>drawJoints</name>
      <anchorfile>structime_1_1_debug_drawer_filter.html</anchorfile>
      <anchor>aaa4184a2565929f1639ce0d3a063de23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>drawCentreOfMass</name>
      <anchorfile>structime_1_1_debug_drawer_filter.html</anchorfile>
      <anchor>a8d21f08cd3d89cb9db9e8db8279bd2cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::DFS</name>
    <filename>classime_1_1_d_f_s.html</filename>
    <base>ime::IPathFinderStrategy</base>
    <member kind="function">
      <type></type>
      <name>DFS</name>
      <anchorfile>classime_1_1_d_f_s.html</anchorfile>
      <anchor>ab42d40aeb9ec5db3b07db573950573ff</anchor>
      <arglist>(const Vector2u &amp;gridSize)</arglist>
    </member>
    <member kind="function">
      <type>std::stack&lt; Index &gt;</type>
      <name>findPath</name>
      <anchorfile>classime_1_1_d_f_s.html</anchorfile>
      <anchor>ab560f7dd692a0ce1af599d97ee506492</anchor>
      <arglist>(const Grid2D &amp;grid, const Index &amp;sourceTile, const Index &amp;targetTile) override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getType</name>
      <anchorfile>classime_1_1_d_f_s.html</anchorfile>
      <anchor>a623c9b38b6ef00d3b5c36612921e79b6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::stack&lt; Index &gt;</type>
      <name>backtrack</name>
      <anchorfile>classime_1_1_i_path_finder_strategy.html</anchorfile>
      <anchor>aa8a80786e3010939275af8f26f6ea388</anchor>
      <arglist>(const std::vector&lt; Node &gt; &amp;exploredNodes, const Index &amp;target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::utility::DiskFileLogger</name>
    <filename>classime_1_1utility_1_1_disk_file_logger.html</filename>
    <base>ime::utility::ILogger</base>
    <member kind="function">
      <type></type>
      <name>DiskFileLogger</name>
      <anchorfile>classime_1_1utility_1_1_disk_file_logger.html</anchorfile>
      <anchor>a743217905f2c8db1977eb02df15ee02d</anchor>
      <arglist>(const std::string &amp;path, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPath</name>
      <anchorfile>classime_1_1utility_1_1_disk_file_logger.html</anchorfile>
      <anchor>ad117303e5907c6a68ca0dbd8486f8d31</anchor>
      <arglist>(const std::string &amp;path)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getPath</name>
      <anchorfile>classime_1_1utility_1_1_disk_file_logger.html</anchorfile>
      <anchor>ab5b2fb213a249daa48e87b070dcfb97d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFile</name>
      <anchorfile>classime_1_1utility_1_1_disk_file_logger.html</anchorfile>
      <anchor>ae15b1514da0e2dcfe4c0c1d3e927a365</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getFile</name>
      <anchorfile>classime_1_1utility_1_1_disk_file_logger.html</anchorfile>
      <anchor>a339066f9d9bee7096fb18901518f1b2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getFullPath</name>
      <anchorfile>classime_1_1utility_1_1_disk_file_logger.html</anchorfile>
      <anchor>add219cd1691875255796adb160d76740</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>log</name>
      <anchorfile>classime_1_1utility_1_1_disk_file_logger.html</anchorfile>
      <anchor>ab1c21471c723b4313b3bb178f3a4746a</anchor>
      <arglist>(MessageType messageType, const std::string &amp;msg) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::utility::DiskFileReader</name>
    <filename>classime_1_1utility_1_1_disk_file_reader.html</filename>
    <member kind="function">
      <type>void</type>
      <name>readFileInto</name>
      <anchorfile>classime_1_1utility_1_1_disk_file_reader.html</anchorfile>
      <anchor>a4eaa9a203f92e12aa208229dab901c7f</anchor>
      <arglist>(const std::string &amp;filename, std::stringstream &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeToFile</name>
      <anchorfile>classime_1_1utility_1_1_disk_file_reader.html</anchorfile>
      <anchor>aac811eab6d328939c49eee7557e436a2</anchor>
      <arglist>(const std::stringstream &amp;buffer, const std::string &amp;filename, WriteMode mode=WriteMode::Overwrite)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::DistanceJoint</name>
    <filename>classime_1_1_distance_joint.html</filename>
    <base>ime::Joint</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Joint &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>af8bd4e0c86624e0e301c08ba4dfb542d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a212084fa1f34027e89d3dd289eb8bc8b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>setRestLength</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a42530dc59876f0492261e0afac120a34</anchor>
      <arglist>(float length)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestLength</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a1782d03071643a57dcdd6ebacbd83223</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>setMinimumLength</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>af547581d2bbc77361c915c3e18410645</anchor>
      <arglist>(float minLength)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMinimumLength</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a2f41b491367920b5e8936a4a8abd6427</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>setMaxLength</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a70173fde6f569f63a723759efe2e70a6</anchor>
      <arglist>(float maxLength)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMaximumLength</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a886023decba58ee1430a0e6ffef4d743</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCurrentLength</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a9fbfde611077624dbffa062f8022133d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getBodyALocalAnchorPoint</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a8381930c735d82fbcb35d7bf0bfdf478</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getBodyAWorldAnchorPoint</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a1959c9f868871dca75581b4747691e9c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getBodyBLocalAnchorPoint</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a372e56a23a8af19d636eaa3ab69d046b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getBodyBWorldAnchorPoint</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a9f867b2748975c3c9bf13212b3203862</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>JointType</type>
      <name>getType</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>ad5a7ff6b1f9bbf6745168a616fd28797</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getBodyA</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a63115ee6f0f7580145690a156d9446f3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getBodyB</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a0a73e20e00b1f01c3fb070c9cb8d01dd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getReactionForce</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a0b2e6c38250e7afa9e5c6656c183b9bd</anchor>
      <arglist>(float fpsLimit) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getReactionTorque</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a5ed19d3f1a624bd43a60b1fad1a350e6</anchor>
      <arglist>(float fpsLimit) const override</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a13cae0871b2adadfc3ed9237ef6c0b95</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>canBodiesCollide</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>ad78781feca51aa24e2c6118ec9ff335f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DistanceJoint</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a0d39e8f45ce395969c70176ac8eb6950</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>aeef88f665467ae19ffbbaf553a94cba1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsEngine</name>
      <anchorfile>classime_1_1_distance_joint.html</anchorfile>
      <anchor>a639ae8db08b48373cb96fa3728d3c447</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::DistanceJointDefinition</name>
    <filename>structime_1_1_distance_joint_definition.html</filename>
    <base>ime::JointDefinition</base>
    <member kind="function">
      <type></type>
      <name>DistanceJointDefinition</name>
      <anchorfile>structime_1_1_distance_joint_definition.html</anchorfile>
      <anchor>a845f8d1786fb8082090fc8d0fbfb3b19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>join</name>
      <anchorfile>structime_1_1_distance_joint_definition.html</anchorfile>
      <anchor>afa7f6a2c604961641753c81d1add9664</anchor>
      <arglist>(RigidBody *bodyA, RigidBody *bodyB, Vector2f anchorA, Vector2f anchorB)</arglist>
    </member>
    <member kind="variable">
      <type>Vector2f</type>
      <name>bodyALocalAnchorPoint</name>
      <anchorfile>structime_1_1_distance_joint_definition.html</anchorfile>
      <anchor>ae872a2929a7fb3a838822994047d807e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector2f</type>
      <name>bodyBLocalAnchorPoint</name>
      <anchorfile>structime_1_1_distance_joint_definition.html</anchorfile>
      <anchor>a606728c934ae5d987f0413729662a009</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>length</name>
      <anchorfile>structime_1_1_distance_joint_definition.html</anchorfile>
      <anchor>a5f5bbc39efdccc5b9f26c70dbd280a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>minLength</name>
      <anchorfile>structime_1_1_distance_joint_definition.html</anchorfile>
      <anchor>abca9819c0cdc63af2ea78cc4ac01e9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>maxLength</name>
      <anchorfile>structime_1_1_distance_joint_definition.html</anchorfile>
      <anchor>a0d946e73db0add6a1ec1f47653489f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JointType</type>
      <name>type</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>a0e9553d230ae8c720850429379edeaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RigidBody *</type>
      <name>bodyA</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>a1a4cd5db4200f032ef1c5cdd2dd3011e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RigidBody *</type>
      <name>bodyB</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>a0d637c5f7827b2d38089cf6e92a3b73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>areBodiesCollidable</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>ae916d2e1e7546dd0b4f241a639d320c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PropertyContainer</type>
      <name>userData</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>aa63eb66292e6d6ae383cdf94f7aad699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Drawable</name>
    <filename>classime_1_1_drawable.html</filename>
    <base>ime::Object</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Object &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ad7bb736ac3c2213c99521958fd75c289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_drawable.html</anchorfile>
      <anchor>a1e8d316e2a6496204db4d47b9f590fd5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>draw</name>
      <anchorfile>classime_1_1_drawable.html</anchorfile>
      <anchor>af07e2e8bec203203d6da6c83b711f61d</anchor>
      <arglist>(priv::RenderTarget &amp;renderTarget) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Drawable</name>
      <anchorfile>classime_1_1_drawable.html</anchorfile>
      <anchor>a5ee3a1adb80ad72fe92918a749f0a1ca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a893e90e8498458bd9d43fe9041a22f02</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::DrawableContainer</name>
    <filename>classime_1_1_drawable_container.html</filename>
    <templarg></templarg>
    <base>ime::ObjectContainer</base>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae027bfc00fd139103849934bde296ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const T *)&gt;</type>
      <name>Predicate</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aab7510136cf7c452265d68aeac0f2615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>ObjectPtr</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5ae3d51bd034b26d8e7b857f62a5a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DrawableContainer</name>
      <anchorfile>classime_1_1_drawable_container.html</anchorfile>
      <anchor>a0dc76b523e152f18018a30d6981670ff</anchor>
      <arglist>(RenderLayerContainer &amp;renderLayers)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>add</name>
      <anchorfile>classime_1_1_drawable_container.html</anchorfile>
      <anchor>aa8628d5c1eeeac22e4fbdc23f46f54ad</anchor>
      <arglist>(std::unique_ptr&lt; T &gt; drawable, int renderOrder=0u, const std::string &amp;renderLayer=&quot;default&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addObject</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af7fac8243327b97e4baea47e5528a006</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e46a10f020a21343f16b17a4f968e0c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9881b0537079eb48b07b7a1df0d2baad</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a13d6369c75c11ea680638b57d6922a72</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>add3afc05c6675aac6cc20a218015e542</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>findIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a8845c3d878a185cc4d07768c69ed027b</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ad55ca785fbfd6feb6408312803a5b1a4</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a26673a494a7b5265c6094e81583b37b4</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a258a49c10d0deac2345c78db5ab3ac9c</anchor>
      <arglist>(T *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af3eaf2bdab65f58c225b7aecd4879f84</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5913d605d157e07cfb1b1851d0cf903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa6b9a6116c166ce9a3ac513294888522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; T &gt; &amp;</type>
      <name>createGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a21e94370d66299d7e57dfdc9a2b1187c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; T &gt; &amp;</type>
      <name>getGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae5a6f15c8967a2c9914a3cfd6d35002c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9b9cd5119bf65be01dc8083aad2c4d75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5df7f17e840f96fcc6313392af7365d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllGroups</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4543480f98f131bf7421850bb32dbfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e93114f2ccfa2ce16256e27837324c0</anchor>
      <arglist>(const Callback&lt; T * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5c5405235df37dc8aaf313e52fd164b3</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; T * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachNotInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ab4160521ba9f9b945fbc82b45f4a29b9</anchor>
      <arglist>(const Callback&lt; T * &gt; &amp;callback) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::EdgeCollider</name>
    <filename>classime_1_1_edge_collider.html</filename>
    <base>ime::Collider</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; EdgeCollider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a2b99e3109370f86cd663bb63afabf6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2415031582cf0d43ad6fb0a4d1f8c8dd</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda30954d90085f6eaaf5817917fc5fecb3">Circle</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda3cfce651e667ab85486dd42a8185f98a">Box</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8ddae4a297a0f76119a442c2595ac040673e">Edge</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Collider *, Collider *)&gt;</type>
      <name>CollisionCallback</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a6d3d0f3cff1081d433e4e0f718281949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeCollider</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a52de7c3428535d3a312f9ab8afa47961</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeCollider</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a892cb3a7c621e37c78e0b0994c30653f</anchor>
      <arglist>(EdgeCollider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeCollider &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a337b610b02a38968c6696f358ed21ac1</anchor>
      <arglist>(EdgeCollider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EdgeCollider::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a46a3f053a80f81d7a8c7905931fd5030</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Collider::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>ae348428739aaf76f8a7ffa18b1f9f7f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a38290517729b6fa105ded47c9a8946bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOneSided</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a6c387d04d54aba8e32629fca1f8b6580</anchor>
      <arglist>(const Vector2f &amp;v0, const Vector2f &amp;v1, const Vector2f &amp;v2, const Vector2f &amp;v3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTwoSided</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>ac5a29c1a1371e2de1dc44c51eed7830b</anchor>
      <arglist>(const Vector2f &amp;v1, const Vector2f &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Vector2f, Vector2f &gt;</type>
      <name>getEdgeVertices</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a55eab169727adad573a6b1580d2e6b62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getFirstVertex</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a0c0c9ee5665b739eeab497842d0f8a8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSecondVertex</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a4607335fe4504fc60adfad898cb22461</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; Vector2f, Vector2f &gt;</type>
      <name>getGhostVertices</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>abff4899306dcb265d2b4ec274c930795</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOneSided</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>aa11ee4228193663d54ba596fe560fd18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EdgeCollider</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>ac4c4de74bdb4dfddb2e9644578bb7f14</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ac44c4b0ee550601366e73df9775a0d51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>afa1d09fd0e6ce441b3f2d3bea139b090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2f378fd015e16c95969e492355e03d91</anchor>
      <arglist>(float density)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af9e97fa2e18d91f73d1e4e817bf95471</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a20cd09ce098cfdf58faec0fbc5f30489</anchor>
      <arglist>(float friction)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a0d199c1e6cfb0878dead6aeabe66e91b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acf6bf0876de22fa487ed19134e862e5b</anchor>
      <arglist>(float restitution)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a973064c47b209f6059afda97e176bcf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aafef833a75f448eb7132674bb6b529be</anchor>
      <arglist>(float threshold)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af4bbe2a4d95aa674a384e3718708e17f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ae94d60f49800bd913640f6f5f45beab3</anchor>
      <arglist>(bool sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ad50f8712319dc00c42deb412cc679314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollisionFilter</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a32562e8dc0dee0bd6f985979329b048d</anchor>
      <arglist>(const CollisionFilterData &amp;filterData)</arglist>
    </member>
    <member kind="function">
      <type>const CollisionFilterData &amp;</type>
      <name>getCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a97c926ba8d6a0d3310c7813e47c2bc06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acddf186f01d08754fbc03f1a3efcd3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnable</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a488ac3ca6da6039d159f972b4fadef18</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttachedToBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a4576c4f1d0985bed496164fafcce3115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a10ae9d612b3e063372804fc4eef4a351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa9d396d8e0c191b7ea7dd8372dbf4408</anchor>
      <arglist>(const Vector2f &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a69f252089ac37cb7329ae151681614e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactBegin</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>abb61d78452cbceb12f427e61e3bf6f48</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactEnd</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa51a380cc693325caaf5584ebb86e464</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactStay</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acea608515a9740acf6c5e445bafdfbbb</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EdgeCollider::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_edge_collider.html</anchorfile>
      <anchor>a60c373504917045217be69199553a4fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::EditBox</name>
    <filename>classime_1_1ui_1_1_edit_box.html</filename>
    <base>ime::ui::ClickableWidget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; EditBox &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>ac9a04f36bf11d8a0c47cbfb30d8ac550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const EditBox &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a35a0aaf56c02a5527292229cd7195852</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EditBox</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a29610f27e30415859bb1f4e7218a32c3</anchor>
      <arglist>(const EditBox &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EditBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a91a8e01f25521d6a0d5dd498b20e672d</anchor>
      <arglist>(const EditBox &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EditBox</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a0b4f6b36f5af93aeb637573c75d47376</anchor>
      <arglist>(EditBox &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EditBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a4c4e40360bdc65f615b554a712bb3ee0</anchor>
      <arglist>(EditBox &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EditBox::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a4592ed85eec3c41de52a57f20eaef783</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EditBoxRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>ae3cea292110834e8799efdd7acf92eb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>ac0e54535e8eec78c0376e958763fe941</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a6bbcb748c0736e60bc4761fe23dcf4d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultText</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a3ffc14a32bfee9a2daa3aa0eb033581a</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getDefaultText</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a23479ed7f6c5f0e2cb593e99a2043d94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumCharacters</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>afb0da622af2a8f849ebcfa7d077eeae1</anchor>
      <arglist>(unsigned int maxChars)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaximumCharacters</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a91a72c3483c7a2b424d47deb463c1a41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>limitTextWidth</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a3354acd81b6724d7524de40606e4b411</anchor>
      <arglist>(bool limitWidth=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextWidthLimited</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a9d3c8f8bb37ffb4083ef930bf0b438df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setReadOnly</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a25564b29849a957d8873fddbb02985fc</anchor>
      <arglist>(bool readOnly=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReadOnly</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a7c3f166489245280b786c63839573944</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaretPosition</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>ac400df29e6b307ea8016a5e87d3fabbb</anchor>
      <arglist>(std::size_t charactersBeforeCaret)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCaretPosition</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>aceed3c6df8eeafb712e6b53704faca22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSuffix</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>aae97c989f8b8c3f6aa51c7a0eb069482</anchor>
      <arglist>(const std::string &amp;suffix)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSuffix</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a2c3a5a219cf64cf810067518deef4346</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a2921e28d8d24ab45616d071f4ecfd51d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a8946e5171b840a7c1320167378001ca3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EditBox</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a1f15eb081b7025ff5cde3f450b1cae08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>af9e2710fa80d4302bfcf3bbe598a7f9d</anchor>
      <arglist>(bool isEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aef17b82d68a97101bed11d120b0cd3fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a3873c38840d4d313d03aeb6894511e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a9d4deb57bcd9d3cfb390d4d7e941ab62</anchor>
      <arglist>(bool isFocused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a22a95490969b9836a4f9421346527188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EditBox::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_edit_box.html</anchorfile>
      <anchor>a6a3e043fdb6ccf2af765db440e87c4ef</anchor>
      <arglist>(const std::string &amp;defaultText=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::EditBoxRenderer</name>
    <filename>classime_1_1ui_1_1_edit_box_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; IWidgetRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>a57539c67aec409d457c571a46fc105bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a27a8672a4d11bfab27f285d5c7b0f6f1</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>aa1158ae888e52980793cf8e9f5cc4747</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a42b043e2775948ed6ffc9848557ad441</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getDefaultTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a6d9a4b9d6e8497dd2a56c03887178b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a845e5ae6157c110a50a3aac2aba6a6f2</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>acc6e003d21301420f2390c8f7c1cdb4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPadding</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>adf0381f528c67d979045c624e785f344</anchor>
      <arglist>(const Padding &amp;padding)</arglist>
    </member>
    <member kind="function">
      <type>Padding</type>
      <name>getPadding</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a474f1e3d0345440e11e74f5791ef434e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaretWidth</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>af66a1023bf2888c8d1bdd6b0cc026eee</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getCaretWidth</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>ac16de20afad778a57afd9912372aa67c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a84dff7c554ab7074f08f964375333c8e</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a60a93800660fc9c7a41b95e8826efe4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>abc4a6765c11460ccaea268d4e10d2d85</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>adf0d807a84afb6d5d86135d58f36278a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a15aec115e7c764cca1ad6a1c532647d3</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFocusedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a2b59887450a41b90ab3f7a99b3b1575b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a376c43242cb16aaf9d6fac5ab2c99214</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a19eba994aac70c5c04883de6b889b4c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedTextBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a0c7d0bedfdbbfe30fd3cde20502bf78d</anchor>
      <arglist>(Colour backgroundColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedTextBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a012822599a25d487df798120c1cc05e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>ad1cb0327883a539193177763c691ad75</anchor>
      <arglist>(Colour defaultTextColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDefaultTextColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>afeb8587e7a882d84372d0de8ec67453b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a7dec4a17126baa13425650473e0f8d14</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>ad68a0e75ee3d993270e62d4cabd6c534</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a89723af9a4186f1113f1fa5a594b7087</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColourHover</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>ad51e08b4df3e8e37405b278ca11dd7cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a2e490125eff3613cc704110ade2a3cf0</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a7b264b35298f49018d64fe5bc6f75e04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>ac20ee8682c7e4262f3492098d8d3c594</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFocusedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>ac2f7b03a278bf8198c3c3ef7721cbe61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaretColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>abc2e8743a6ec8de579bec503914cb62a</anchor>
      <arglist>(Colour caretColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCaretColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a448352a15273c40dd88151c6238a02f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaretHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a6479a834ab70bc0b36f562a725d2e533</anchor>
      <arglist>(Colour caretColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCaretHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a7d6474b2885b38ddcf57236a656e9143</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCaretColourFocused</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>aab9e6d224df4a34814e4c8bb1ed2285c</anchor>
      <arglist>(Colour caretColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFocusedCaretColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a75b61ad1262db0c775c1f4b54f8970e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a833b49b9d7a27ecca2c3fd76b5c8c130</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a53c9768a65169fe2651d564ab69ae045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>aec94ff6da60860fa01182a4cdbd9165e</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a746c6e12e3b8154870ed71e0031d0192</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a4e7ddd1de8fad57b929e08b8983e4853</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a21327a0c307ee6f941e6cf7b9e5b69a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a094838a22705f3668293af310fd6d8de</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>ae2c1987085d06506e14d2df64bf0dabd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a48d1e959819e6fe969fc41927b19f30f</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a25a4a5a111137dd422161d76aeac1e69</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledTexture</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a45d687921a950782ff7279d3d9c6cbb7</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedTexture</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a09b6359016545bbcd14d8af7baafb175</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a3f14cf97902b52e7cc9f1dce6dc20bc6</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a9c4761658ba161152d666b11bce12906</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>ada423827ff0303549a3a4d4586400bc1</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a8a7072bf82d25d375e4afdde9687adc8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a7e550e31ff8fb2be039f1dc66d9772d7</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>afcfd1f45af9e2478c71e45b9416c7165</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a551256e63e453ad55d20ac69043bb0a7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a5242eba0a2c5e21684a2dc0cf95c400c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EditBoxRenderer</name>
      <anchorfile>classime_1_1ui_1_1_edit_box_renderer.html</anchorfile>
      <anchor>a7c88abb16a4f50173eda47f52009d353</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Engine</name>
    <filename>classime_1_1_engine.html</filename>
    <member kind="function">
      <type></type>
      <name>Engine</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a9ed137e8c35a079f0d1b25034bfe788f</anchor>
      <arglist>(const std::string &amp;gameTitle, const std::string &amp;settingsFilename=&quot;default&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Engine</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>ae06737b650082e081ec267567c52f674</anchor>
      <arglist>(const std::string &amp;gameName, const PrefContainer &amp;settings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Engine</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a670457bb95d12b280bb2cfe92846e4ad</anchor>
      <arglist>(const Engine &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Engine &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>aea3a7206bfb49b9bdc7242aa141a37c9</anchor>
      <arglist>(const Engine &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Engine</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a6bdadc0e7bfeec8b62ea5e88e2ed5914</anchor>
      <arglist>(Engine &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Engine &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a92ea63ce44852080e401803c4b128918</anchor>
      <arglist>(Engine &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a0d1f10964b0fda8bf6f93e7be189a43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a481bf41b4418cb8801be24960507bc5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a13ac94c803a3512b1f9894f4abe45c57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>quit</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a401d4620d942d40d1891994297d4a85f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPause</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>aa99cf4a1ea4668fb9a868205dbb947da</anchor>
      <arglist>(bool pause)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a84f02b4994494129c9d16cc7e6782317</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPhysicsUpdateFrameRate</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>aeb04d254339c4d68be420d30c923ee68</anchor>
      <arglist>(unsigned int frameRate)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getPhysicsUpdateFrameRate</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a95ca3f43924557cf1b3022919baf30e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PrefContainer &amp;</type>
      <name>getConfigs</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a4c167934bd68538beab3d8fc7bb392c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getCache</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>ac9822240630fd6edf23fadd19677cdbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PrefContainer &amp;</type>
      <name>getSavableCache</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a7cbe509bb52444a606f0be32e60e2053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getGameName</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a05537c07e196477aac4ee16a5a4bc804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pushScene</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a5d80ce3073d4756df7efab393dfb5513</anchor>
      <arglist>(Scene::Ptr scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pushCachedScene</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a50c322869f893a6126b25fe595ac7186</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>popScene</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>ada333da19b0c026bcf7498d6b80727b2</anchor>
      <arglist>(int numScenes=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cacheScene</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a0fe97de92ff3fccbc19796b3935f1a7b</anchor>
      <arglist>(const std::string &amp;name, Scene::Ptr scene)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>uncacheScene</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a70e993f0a126c5a0f97811f3aca0fc4a</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSceneCached</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>ab694dff725839a6e6d4e4e5a8784dc2f</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllScenesExceptActive</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a42ca4041ada33154d136af8042a44eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllScenes</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a5fb58f6b5955d0da58ccf21d4f6ccb49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getSceneCount</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>aedb42e4c66c17ab87e10229e51794334</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scene *</type>
      <name>getActiveScene</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>adcc098f9ed6cd609430f158ebcbf9b0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scene *</type>
      <name>getBackgroundScene</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a906d5b7315c66a8d9ffc78efeea35554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scene *</type>
      <name>getCachedScene</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a7a908c58cc4fb45e62d468e8b0a47b34</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getElapsedTime</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a2f3a124cbc2add790a0b6f5098a18574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Window &amp;</type>
      <name>getWindow</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a91860e4dffa11bee9c76b3347dfedf14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ui::GuiContainer &amp;</type>
      <name>getGui</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>aa23e7b1b888eeb0b717c7e1d70b5c8a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>audio::AudioManager &amp;</type>
      <name>getAudioManager</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a8dbd0aa8fb38dd06a768f301d4093e50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>input::InputManager &amp;</type>
      <name>getInputManager</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a4559592dd79fdf1a36b0ebbbaa753be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimerManager &amp;</type>
      <name>getTimer</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>aaf6369f8ab2917f6d540f06e468d69cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a1fc69e5e0bd55d1d6315abb383a62c21</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a5717146d190e9cdaf0e08c7437f8b347</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>aa5ea105c03e5d5b1d03805f592edc417</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onInit</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a7f15ea0f4ed666838e19306e5790b6d3</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onSceneActivate</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>ab4f98ecdbe86a609f30a60e254c97213</anchor>
      <arglist>(const Callback&lt; Scene * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onFrameStart</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>aba8d122cf6a00f4b855e56cd1a4c2881</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onFrameEnd</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a0237dc0ab8e8fec567c413544bf4c69a</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onStart</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a22375bb7783372c3c1bdc3884fa1bad8</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onShutDown</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>adb94e0739b28718670d3383a22c14767</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onShutdownComplete</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a7b511bd128cf804acb719948377c998d</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Engine</name>
      <anchorfile>classime_1_1_engine.html</anchorfile>
      <anchor>a9d9ef198818539c7cc6b68b0785d7f36</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Event</name>
    <filename>classime_1_1_event.html</filename>
    <class kind="struct">ime::Event::JoystickButtonEvent</class>
    <class kind="struct">ime::Event::JoystickConnectEvent</class>
    <class kind="struct">ime::Event::JoystickMoveEvent</class>
    <class kind="struct">ime::Event::KeyEvent</class>
    <class kind="struct">ime::Event::MouseButtonEvent</class>
    <class kind="struct">ime::Event::MouseMoveEvent</class>
    <class kind="struct">ime::Event::MouseWheelScrollEvent</class>
    <class kind="struct">ime::Event::SizeEvent</class>
    <class kind="struct">ime::Event::TextEvent</class>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aa321e5c6b2aa950b9031f2ea92aac627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Closed</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396ac892b82f4fffba5d469f3e1c8616ebdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Resized</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396af65d0a6c3f69ef0255d167f9e3562a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LostFocus</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a494faa7bc978d16df33bd08122596366</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GainedFocus</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a5ca91975000325b765f49d927548cf7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TextEntered</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396ae7d5b09f94fbb4569a6478d30d1bb5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyPressed</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396af9cb530ff3602d627431d7e7dd71e298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyReleased</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396acfa329d7f3ccc6050b27f34c969aba9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseWheelScrolled</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a3e83eb3595b5bdd60901f741455213e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseButtonPressed</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aeabe7c5ca7f9ca252d4376d97ba07c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseButtonReleased</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396abafe05275421a5304fb7bef766102dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseMoved</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aca62d3dbb594082e56cd5dba24de9de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseEntered</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a391d18ecc893678a4ecea13f78440c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseLeft</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a5fcb0834b6f5905f5745e94bb9561ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickButtonPressed</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a687720637f26f2024c625f0f7e3e31b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickButtonReleased</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a28a905e22ee971503804e883b5b4b6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickMoved</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aa99975d385636deb719490841080ea5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickConnected</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396af9986f4b90142cf2a6957cfd38f7b128</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickDisconnected</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aa2a322b3acfc2696b9ebc0e8aa262c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unknown</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aa321e5c6b2aa950b9031f2ea92aac627</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Closed</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396ac892b82f4fffba5d469f3e1c8616ebdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Resized</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396af65d0a6c3f69ef0255d167f9e3562a6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LostFocus</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a494faa7bc978d16df33bd08122596366</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GainedFocus</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a5ca91975000325b765f49d927548cf7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TextEntered</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396ae7d5b09f94fbb4569a6478d30d1bb5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyPressed</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396af9cb530ff3602d627431d7e7dd71e298</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>KeyReleased</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396acfa329d7f3ccc6050b27f34c969aba9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseWheelScrolled</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a3e83eb3595b5bdd60901f741455213e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseButtonPressed</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aeabe7c5ca7f9ca252d4376d97ba07c29</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseButtonReleased</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396abafe05275421a5304fb7bef766102dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseMoved</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aca62d3dbb594082e56cd5dba24de9de1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseEntered</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a391d18ecc893678a4ecea13f78440c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MouseLeft</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a5fcb0834b6f5905f5745e94bb9561ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickButtonPressed</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a687720637f26f2024c625f0f7e3e31b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickButtonReleased</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396a28a905e22ee971503804e883b5b4b6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickMoved</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aa99975d385636deb719490841080ea5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickConnected</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396af9986f4b90142cf2a6957cfd38f7b128</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>JoystickDisconnected</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a2303fbc03e38055220c6e47ab43d4396aa2a322b3acfc2696b9ebc0e8aa262c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Type</type>
      <name>type</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>ab2cd8bcbe7c31942644d770fc1188a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SizeEvent</type>
      <name>size</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a43c31dc3c986d63688235401e801676a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>KeyEvent</type>
      <name>key</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a55745920967f5e96ad36f15fb6137797</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>TextEvent</type>
      <name>text</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a707773b437dda27c7c78bb9f352351c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MouseMoveEvent</type>
      <name>mouseMove</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>acb222805ab927d3c3586fb1873ba8ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MouseButtonEvent</type>
      <name>mouseButton</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a19d46bb8e84bfd32e3aadf102a0cb7d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MouseWheelScrollEvent</type>
      <name>mouseWheelScroll</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a8b1cf3ba0fcb93ae4e47f2a29b55dbfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JoystickMoveEvent</type>
      <name>joystickMove</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>ab8e1e62c6f3909babfb5fc56e69d3dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JoystickButtonEvent</type>
      <name>joystickButton</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a8fa1e6d23da952df8b0bb1a27bc7d868</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>JoystickConnectEvent</type>
      <name>joystickConnect</name>
      <anchorfile>classime_1_1_event.html</anchorfile>
      <anchor>a735bc0c907231fd6313ce378301c4d3a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::EventDispatcher</name>
    <filename>classime_1_1_event_dispatcher.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; EventDispatcher &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_event_dispatcher.html</anchorfile>
      <anchor>abb755918aa4c026a2c5257935a5c5e7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventDispatcher</name>
      <anchorfile>classime_1_1_event_dispatcher.html</anchorfile>
      <anchor>a749e0eb183949c459b75d8796c2c3d7e</anchor>
      <arglist>(const EventDispatcher &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>EventDispatcher &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_event_dispatcher.html</anchorfile>
      <anchor>aaf5dc5e2c0ca2d837839d239881c7219</anchor>
      <arglist>(const EventDispatcher &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onEvent</name>
      <anchorfile>classime_1_1_event_dispatcher.html</anchorfile>
      <anchor>a58f38de02a4b19579aea1822a799e583</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dispatchEvent</name>
      <anchorfile>classime_1_1_event_dispatcher.html</anchorfile>
      <anchor>acd5c300573d29de2e146abdcae740cee</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_event_dispatcher.html</anchorfile>
      <anchor>a3447ef2815ec2eead8724da975667603</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static EventDispatcher::Ptr</type>
      <name>instance</name>
      <anchorfile>classime_1_1_event_dispatcher.html</anchorfile>
      <anchor>af956e3ecf39b45c9a1e1edf322c77f17</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::EventEmitter</name>
    <filename>classime_1_1_event_emitter.html</filename>
    <member kind="function">
      <type></type>
      <name>EventEmitter</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a5ad204c2ec5fab863b3d9f0c9bae0d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventEmitter</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a546f3955709a81c04d52bb386711c53a</anchor>
      <arglist>(const EventEmitter &amp;)</arglist>
    </member>
    <member kind="function">
      <type>EventEmitter &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>ac371311069f71b624916eab6274c87f6</anchor>
      <arglist>(const EventEmitter &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EventEmitter</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a5a0d86ec816934e39f714567a00b77f0</anchor>
      <arglist>(EventEmitter &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>EventEmitter &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>ada29f3a7cc7f2dd87f085876ad81b204</anchor>
      <arglist>(EventEmitter &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addEventListener</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a152af33277a5edacd80e792be5a02e7c</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a7ec4130f739f5478ea02efc63e1dd0ec</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>addOnceEventListener</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a2d66222cadda568a19032441e6454161</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>ac3f16040bf7ebf37188264f3381d966b</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>ab7bece2a1abf9f610b0e08f5c15780a3</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeAllEventListeners</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a68477e9e843da16a0c6cb44a6197f26c</anchor>
      <arglist>(const std::string &amp;event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>aee8a1fab3b372e970ddcefd5ed8aba9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a5444b44e5f66636dc46896153e5e950a</anchor>
      <arglist>(const std::string &amp;event, Args...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>suspendEventListener</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a0210ce2efa23715b3610b5a60091d0f5</anchor>
      <arglist>(const std::string &amp;event, int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>suspendEventListener</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a84768101e90225096d8da2ea8d897300</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>ab7e32cbe6664ed5cec26ec86b9b39e05</anchor>
      <arglist>(const std::string &amp;event, int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>aa0278bbc7cc0033254d574b51aed22a2</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEvent</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>ae37a60d0577396fdfa7312787e9b7f65</anchor>
      <arglist>(const std::string &amp;event) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getEventListenerCount</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>ad5c2d7f9aa54ccbd5df198974fc80902</anchor>
      <arglist>(const std::string &amp;event) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getEventsCount</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a655631bca71ea0d7aaa0443d7b99c9e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasEventListener</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>ab28980b0e8b2078d236a7a2da1c483a7</anchor>
      <arglist>(const std::string &amp;event, int id) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>getEvents</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a0c489c946ec943dfb4920de10e28eb5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>a8aa78ed7b526819de1e5412e4e5add6e</anchor>
      <arglist>(bool active)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classime_1_1_event_emitter.html</anchorfile>
      <anchor>ad4d31979d3bf6e58a5e1bf05e9607ce5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ExcludeList</name>
    <filename>classime_1_1_exclude_list.html</filename>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classime_1_1_exclude_list.html</anchorfile>
      <anchor>a5c6f679699781db599ee80c6c2f3b869</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_exclude_list.html</anchorfile>
      <anchor>a483570fff3a04ae5042a184265ebd026</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1_exclude_list.html</anchorfile>
      <anchor>ab91fe07f97e73079fcfc50f02d3aadac</anchor>
      <arglist>(const std::string &amp;group)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_exclude_list.html</anchorfile>
      <anchor>a05a67875f994083fe9e11df33571e2b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classime_1_1_exclude_list.html</anchorfile>
      <anchor>a858503f005d4fe64d125718014dda2d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::FileNotFoundException</name>
    <filename>classime_1_1_file_not_found_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>FileNotFoundException</name>
      <anchorfile>classime_1_1_file_not_found_exception.html</anchorfile>
      <anchor>a4d9ad7a0d3acbdceed808d6dcb729fce</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::GameObject</name>
    <filename>classime_1_1_game_object.html</filename>
    <base>ime::Object</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GameObject &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>abfccf617dce57470af4875ec4332723f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RigidBody &gt;</type>
      <name>BodyPtr</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a7c18c3de877ed0734201911833acbecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Callback&lt; GameObject *, GameObject * &gt;</type>
      <name>CollisionCallback</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>af5a93d95bd2c982c2f6ee62c25648c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameObject</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a6de7d5e68b3d33639982417bb27089de</anchor>
      <arglist>(Scene &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameObject</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a2c88a7b4b483c1138db49a9b8fc8fbe5</anchor>
      <arglist>(const GameObject &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GameObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a8cef95beae97265f61cd928051cf9544</anchor>
      <arglist>(const GameObject &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameObject</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ab39ce8014d7336012c2032dc65377038</anchor>
      <arglist>(GameObject &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GameObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a4ffdac537dfc97ff31d08d307bbb02e2</anchor>
      <arglist>(GameObject &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ad1e3695522142858bf4aa0453e5a2d8e</anchor>
      <arglist>(GameObject &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GameObject::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ace3fd430271f4ec7b365a7ac022ce231</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a6bd441c796df187861bdbd2d576285a0</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a3eb4a9c369b9e30fbe93e42ce0e7955b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a9b5f0fe3a6940e0d7a7b488ae626935f</anchor>
      <arglist>(bool isActive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ad163715466ffc39376ca2207925e3860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a746904dc2299ac856b5e1c6a35b3f482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ab47a0137d6e402f47c5068fd25433d39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a17df13e397367b0d75198913ffc8107e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachRigidBody</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>aa7da081e8edd30bd737b0b539739644c</anchor>
      <arglist>(BodyPtr body)</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getRigidBody</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a5f0cf9941d8d48d9408d527696259376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRigidBody</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a758ec10b8c898c7aae3d1af99e65ad44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRigidBody</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a14bc87d6d9652072ff43a35a059fd90e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onRigidBodyCollisionStart</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a7d1531d6903105369c8501eab64fa60b</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onRigidBodyCollisionEnd</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a05d21a978753bde8c6a64d0d5408baf8</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onRigidBodyCollisionStay</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>adb81d07bb103888893688ca462e74b7c</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a5e5bd53692b6bae17bdc00b6cce09982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scene &amp;</type>
      <name>getScene</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a9884510ba67052ef6e8755851a466594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSpriteOrigin</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a9ce02de639c2bdfd5a2c47ab57dace1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sprite &amp;</type>
      <name>getSprite</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ae40a6dcb01ab2dc4fd1c8ef12a5a735c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a3a5adc713578dbe8e44dc3af9524818f</anchor>
      <arglist>(Time deltaTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GameObject</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>aea9bba873dc03abae55e41e80e835c27</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GameObject::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ae55c2e7ba8d149217851b7ed8ebfee45</anchor>
      <arglist>(Scene &amp;scene)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::GameObjectContainer</name>
    <filename>classime_1_1_game_object_container.html</filename>
    <base>ObjectContainer&lt; GameObject &gt;</base>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae027bfc00fd139103849934bde296ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const GameObject *)&gt;</type>
      <name>Predicate</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aab7510136cf7c452265d68aeac0f2615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GameObject &gt;</type>
      <name>ObjectPtr</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5ae3d51bd034b26d8e7b857f62a5a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GameObjectContainer</name>
      <anchorfile>classime_1_1_game_object_container.html</anchorfile>
      <anchor>aed2df2191a3541a9c5b1d8e307dea001</anchor>
      <arglist>(RenderLayerContainer &amp;renderLayers)</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>add</name>
      <anchorfile>classime_1_1_game_object_container.html</anchorfile>
      <anchor>a41f3eb4c22df949f51f9055fe739887d</anchor>
      <arglist>(GameObject::Ptr gameObject, int renderOrder=0u, const std::string &amp;renderLayer=&quot;default&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>add</name>
      <anchorfile>classime_1_1_game_object_container.html</anchorfile>
      <anchor>aee5b0fe3a1c5a83db462f085472f7979</anchor>
      <arglist>(GameObject::Ptr gameObject, int renderOrder=0u, const std::string &amp;renderLayer=&quot;default&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>add</name>
      <anchorfile>classime_1_1_game_object_container.html</anchorfile>
      <anchor>a8fcd6ad74e4519dae0764235f1144f10</anchor>
      <arglist>(const std::string &amp;group, GameObject::Ptr gameObject, int renderOrder=0u, const std::string &amp;renderLayer=&quot;default&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>addObject</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af7fac8243327b97e4baea47e5528a006</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e46a10f020a21343f16b17a4f968e0c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9881b0537079eb48b07b7a1df0d2baad</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a13d6369c75c11ea680638b57d6922a72</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>add3afc05c6675aac6cc20a218015e542</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>findIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a8845c3d878a185cc4d07768c69ed027b</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ad55ca785fbfd6feb6408312803a5b1a4</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a26673a494a7b5265c6094e81583b37b4</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a258a49c10d0deac2345c78db5ab3ac9c</anchor>
      <arglist>(GameObject *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af3eaf2bdab65f58c225b7aecd4879f84</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5913d605d157e07cfb1b1851d0cf903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa6b9a6116c166ce9a3ac513294888522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; GameObject &gt; &amp;</type>
      <name>createGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a21e94370d66299d7e57dfdc9a2b1187c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; GameObject &gt; &amp;</type>
      <name>getGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae5a6f15c8967a2c9914a3cfd6d35002c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9b9cd5119bf65be01dc8083aad2c4d75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5df7f17e840f96fcc6313392af7365d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllGroups</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4543480f98f131bf7421850bb32dbfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e93114f2ccfa2ce16256e27837324c0</anchor>
      <arglist>(const Callback&lt; GameObject * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5c5405235df37dc8aaf313e52fd164b3</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; GameObject * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachNotInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ab4160521ba9f9b945fbc82b45f4a29b9</anchor>
      <arglist>(const Callback&lt; GameObject * &gt; &amp;callback) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Grid2D</name>
    <filename>classime_1_1_grid2_d.html</filename>
    <member kind="function">
      <type>Scene &amp;</type>
      <name>getScene</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>ab36141a8b77400b222f942b329ab584a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getRowCount</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a8f281370f4907e44c002ffca6f5a692f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getColumnCount</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a1854c6027b64f81a40fb45131026efcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grid2DRenderer &amp;</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a9aa55db14027f868fd0aaa6c3cef858d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a2916af8a57ee563369c289c018b08ef3</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a218b4b8d6100446f0ef62d813b28c0bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIndexValid</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a6a6380504c0bfbf697f1c57ba5f8022f</anchor>
      <arglist>(const Index &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>aa82135096df18a45e71d41322567d9bf</anchor>
      <arglist>(const Vector2u &amp;size, char id=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromFile</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>af0b1cc84ba1391aa5031496ecf6f3ce7</anchor>
      <arglist>(const std::string &amp;filename, const char &amp;separator=&apos;\0&apos;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromVector</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a6446dc7d2a84377b5fa6ba372c73c283</anchor>
      <arglist>(Map map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollidableByIndex</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>ad8d103c6b8dc63b8f80e6e67b65dc342</anchor>
      <arglist>(const Index &amp;index, bool isCollidable, bool attachCollider=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollidableByIndex</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a8a900b654abfc78784b232741a5b6596</anchor>
      <arglist>(const std::initializer_list&lt; Index &gt; &amp;locations, bool isCollidable, bool attachCollider=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollidableByIndex</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a10201390fd472b96d7258f4f8060894b</anchor>
      <arglist>(Index startPos, Index endPos, bool isCollidable, bool attachCollider=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollidableById</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>aa18e8f300999cac34cedac308474e6fd</anchor>
      <arglist>(char id, bool isCollidable, bool attachCollider=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollidableByExclusion</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a63a9de86e40b286eeeeaade3b4178525</anchor>
      <arglist>(char id, bool isCollidable, bool attachCollider=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCollidable</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a5258b89c05cb954726d102cd85803f1a</anchor>
      <arglist>(const Index &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a0efdc943712343f1d8ebe987fc42f01f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getSizeInTiles</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>ab67c27b5621fb2b737565f61e3b778b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getTileSize</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>af91eee7b76c94b04e2be0b2a1918d152</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getSpaceBetweenTiles</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a65987bc4a706c52e23265dda8f265211</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Tile &amp;</type>
      <name>getTile</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a8ca13bd293fae5016bb7d233c995cb26</anchor>
      <arglist>(const Index &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>const Tile &amp;</type>
      <name>getTile</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a63490de04042ef69e27d4b21d7bbd41f</anchor>
      <arglist>(const Vector2f &amp;position) const</arglist>
    </member>
    <member kind="function">
      <type>const Tile &amp;</type>
      <name>getTileAbove</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a2aa77e7c9b74d1df93f7932a14cc8042</anchor>
      <arglist>(const Tile &amp;tile) const</arglist>
    </member>
    <member kind="function">
      <type>const Tile &amp;</type>
      <name>getTileBelow</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>aac3e293dcab3dd643fb717c781d65554</anchor>
      <arglist>(const Tile &amp;tile) const</arglist>
    </member>
    <member kind="function">
      <type>const Tile &amp;</type>
      <name>getTileLeftOf</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a9bfd53275dea458834638eb23f9e4b74</anchor>
      <arglist>(const Tile &amp;tile) const</arglist>
    </member>
    <member kind="function">
      <type>const Tile &amp;</type>
      <name>getTileRightOf</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>aeb1a552b1d3d9a83c2a986bc58f5f250</anchor>
      <arglist>(const Tile &amp;tile) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachTileWithId</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>ab8148d74ee447472ebf977e35be3f89d</anchor>
      <arglist>(char id, const Callback&lt; const Tile &amp; &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachTileExcept</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a9205d431f73390ce02c22060befe6ed2</anchor>
      <arglist>(char id, const Callback&lt; const Tile &amp; &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachTile</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>ae6a512fb5d8f2746d05a5aa5bca6926d</anchor>
      <arglist>(const Callback&lt; const Tile &amp; &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachTileInRange</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a43957c9e41f7160b32285d599193dfd9</anchor>
      <arglist>(Index startPos, Index endPos, const Callback&lt; const Tile &amp; &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addChild</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a0658361cfb6d666cced061b42ee67dc5</anchor>
      <arglist>(GridObject *child, const Index &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>GridObject *</type>
      <name>getChildWithId</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a3af03874fc96b96b9aa24a964659778b</anchor>
      <arglist>(std::size_t id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChild</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a4a4dcf5ab7b121a9fccfa2951f5f2936</anchor>
      <arglist>(const GridObject *child) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeChildWithId</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>acd14aa3c04be5feab7ba750ecf71d255</anchor>
      <arglist>(std::size_t id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeChild</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>ae0df3b25712c9e663f620fe975c75b7f</anchor>
      <arglist>(GridObject *child)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeChildIf</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>af115c2c018452caa533a3eee64baca97</anchor>
      <arglist>(const std::function&lt; bool(GridObject *)&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllChildren</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a04ee47c6baf468d128af3afdb5b7b182</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeTile</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>aa5ffec8c73573d5082dd46e6912c3596</anchor>
      <arglist>(GridObject *child, const Index &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>changeTile</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a05b896a001d0de16c124e3cd8a6b19ee</anchor>
      <arglist>(GridObject *child, const Tile &amp;tile)</arglist>
    </member>
    <member kind="function">
      <type>const Tile &amp;</type>
      <name>getTileOccupiedByChild</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>ae4764dbd4827fc24f66a9aa68b0fd574</anchor>
      <arglist>(const GridObject *child) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTileOccupied</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a3c7dcfb562731fb4b4f616d91a42e0d6</anchor>
      <arglist>(const Tile &amp;tile) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTileOccupied</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>ad3338932f9062a4a2f3fb539a951047a</anchor>
      <arglist>(const Index &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachChild</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a5e26a3c543922c5cf11e6a5caf37138e</anchor>
      <arglist>(const Callback&lt; GridObject * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachChildInTile</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a9a2e73713fc08047cb2f89ea38bc24ca</anchor>
      <arglist>(const Tile &amp;tile, const Callback&lt; GridObject * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Grid2D</name>
      <anchorfile>classime_1_1_grid2_d.html</anchorfile>
      <anchor>a12909dc78187a5779cd80f9e46b642b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Grid2DRenderer</name>
    <filename>classime_1_1_grid2_d_renderer.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(const Property &amp;)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>ac3c6739fb3f90a43981d5935e9b1e2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Grid2DRenderer</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>aaf9ebee6f834ed56dc2734dc9ede83b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundTexture</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>a2bba24a638f4012fba3b7c522952017e</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTileColour</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>aef9d94ad08f636af5a1b10bdc518efd4</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTileColour</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>a937366d77a8093f32e082ed6aaa525f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollidableTileColour</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>a5fd51883d3dd363442d7a4087b99ea5a</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCollidableTileColour</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>ad3b2d6772e852d61b26375433c75d69c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGridLineColour</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>ae0b0be74d3fea40a9c12ca39aac4a421</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getGridLineColour</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>a486a88444c6986aaad66edc84d5455f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>a72d2bc8f567c9f2f5db4f619e66dd28f</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>a3b80c8e230e05f401c2a3b78ca94af04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1_grid2_d_renderer.html</anchorfile>
      <anchor>a91e79e99a182932c64a98361eb6654ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::GridMover</name>
    <filename>classime_1_1_grid_mover.html</filename>
    <base>ime::Object</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a07b612eb1a30ee0d7012a891a805e93a</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aae1ba155a9f2e8c3be94020eef32a0301">Manual</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa64663f4646781c9c0110838b905daa23">Random</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aac41a31890959544c6523af684561abe5">Target</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aad71670d62b238eaf063979407361034e">Cyclic</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aaa55529813aef6ca28b9d22ee0442e02b">KeyboardControlled</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MoveRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a62c372e0dbb8e5a0be9b8fa5fd9724fc</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcab1c94ca2fbc3e78fc30069c8d0f01680">All</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca9ac677ee4eec25d9e59707a661d2c5e1">Diagonal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca3e85a6323568ffe699745b4eef821495">NonDiagonal</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GridMover &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af4db28c9ea63d1bd81a95823d020c178</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridMover</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a29dfdfadca133eff3a251dbdc27096dd</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *gameObject=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridMover</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a81c1d018077b6032d3473f5faab95549</anchor>
      <arglist>(const GridMover &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>GridMover &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a981cd5ffbdec5adb244730b0da55131d</anchor>
      <arglist>(const GridMover)=delete</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8e3a0ca52ae74832ef1525671ba1b49c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a3b1482324fd09f1d7b544372e6ef108d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncWith</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a0627539f4f7e59a9905c4d9d37396089</anchor>
      <arglist>(const GridMover &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestMove</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a82d5a2809795725446f88f0ed90f4c71</anchor>
      <arglist>(const Direction &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, GridObject * &gt;</type>
      <name>isBlockedInDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a266600fc2eef282439b2d507b358c427</anchor>
      <arglist>(const Direction &amp;direction) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a39ab796c7ce3807533afd9d64bce8425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getPrevDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a986f4a16ef608e0873ee2c8a1455c65f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2b8a2eb07cdf61592f63a32e8e88436f</anchor>
      <arglist>(GridObject *target)</arglist>
    </member>
    <member kind="function">
      <type>GridObject *</type>
      <name>getTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa519ad160ab2062363eb65a596f61d4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ada3898f9de6562ae8ff0ab9a6b7c813f</anchor>
      <arglist>(const Vector2f &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6d91709a02eb517e68edb798949bd91d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a3a9c1ee303df652a29e07ac33ecb00b7</anchor>
      <arglist>(float multiplier)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>acf2934181430189656188257bd77ed5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a121bf39232196e459b0c0b619e963c7b</anchor>
      <arglist>(MoveRestriction moveRestriction)</arglist>
    </member>
    <member kind="function">
      <type>MoveRestriction</type>
      <name>getMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a04e9f2ca7f76fd6c6278797ab46e6a65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementFreeze</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2a264750eeefd2cacf760ad9d785d3a7</anchor>
      <arglist>(bool freeze)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMovementFrozen</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7f7c162f7555b076e7a490baca60edcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getCurrentTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aaf9fa52e0e29d28c988b1d645e1e29ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getPrevTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a75dd6cd8343b1741e88ff8de80c5830f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af8722af658036b2f6b7b40fe5bdbf1e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grid2D &amp;</type>
      <name>getGrid</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7872637d83ac8efddac5a4bf956469f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTargetMoving</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af2f703bf9dfc0c91c76716dac3ded84a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teleportTargetToDestination</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a1861b96d89d9bc4539eda2cdacd356b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDirectionChange</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa54c01c573b9b968117a0b5ef0fd8618</anchor>
      <arglist>(const Callback&lt; Direction &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetTile</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ade350b65cfb3791254d942550882b895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTargetTileReset</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a77f61b75e33ec1e8ef9a3da3076938d0</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveBegin</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa8181e77c50a31a9200e7f64120144ec</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveEnd</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a37f1bbb0367901e3f8b79dfb4d764e8e</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onObjectCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ae56a395c13ead1ca472909d9d1f77993</anchor>
      <arglist>(const Callback&lt; GridObject *, GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onBorderCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8a29c1e5ea9348913794d21428197b13</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTileCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6a0ec54bb9214803536761cc7cd9a18a</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GridMover</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2fc3597be8e28cba4d51a642b5ac493c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GridMover::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6aca9e507bd0022498f3faa7d4d72dbb</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *gameObject=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>GridMover</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a785b3ecd5965e09ce976a126514b8e6c</anchor>
      <arglist>(Type type, Grid2D &amp;grid, GridObject *target)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::GridMoverContainer</name>
    <filename>classime_1_1_grid_mover_container.html</filename>
    <base>ObjectContainer&lt; GridMover &gt;</base>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae027bfc00fd139103849934bde296ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const GridMover *)&gt;</type>
      <name>Predicate</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aab7510136cf7c452265d68aeac0f2615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GridMover &gt;</type>
      <name>ObjectPtr</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5ae3d51bd034b26d8e7b857f62a5a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GridMover *</type>
      <name>addObject</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af7fac8243327b97e4baea47e5528a006</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GridMover *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e46a10f020a21343f16b17a4f968e0c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9881b0537079eb48b07b7a1df0d2baad</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GridMover *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a13d6369c75c11ea680638b57d6922a72</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>add3afc05c6675aac6cc20a218015e542</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>GridMover *</type>
      <name>findIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a8845c3d878a185cc4d07768c69ed027b</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ad55ca785fbfd6feb6408312803a5b1a4</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a26673a494a7b5265c6094e81583b37b4</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a258a49c10d0deac2345c78db5ab3ac9c</anchor>
      <arglist>(GridMover *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af3eaf2bdab65f58c225b7aecd4879f84</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5913d605d157e07cfb1b1851d0cf903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa6b9a6116c166ce9a3ac513294888522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; GridMover &gt; &amp;</type>
      <name>createGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a21e94370d66299d7e57dfdc9a2b1187c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; GridMover &gt; &amp;</type>
      <name>getGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae5a6f15c8967a2c9914a3cfd6d35002c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9b9cd5119bf65be01dc8083aad2c4d75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5df7f17e840f96fcc6313392af7365d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllGroups</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4543480f98f131bf7421850bb32dbfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e93114f2ccfa2ce16256e27837324c0</anchor>
      <arglist>(const Callback&lt; GridMover * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5c5405235df37dc8aaf313e52fd164b3</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; GridMover * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachNotInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ab4160521ba9f9b945fbc82b45f4a29b9</anchor>
      <arglist>(const Callback&lt; GridMover * &gt; &amp;callback) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::GridObject</name>
    <filename>classime_1_1_grid_object.html</filename>
    <base>ime::GameObject</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GridObject &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a7d40cd45861900055e88aef2608a6425</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RigidBody &gt;</type>
      <name>BodyPtr</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a7c18c3de877ed0734201911833acbecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Callback&lt; GameObject *, GameObject * &gt;</type>
      <name>CollisionCallback</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>af5a93d95bd2c982c2f6ee62c25648c63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridObject</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>abc65fd6009f49e227bf7798a1dcab03e</anchor>
      <arglist>(Scene &amp;scene)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridObject</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a5d3fdd2b11e9ddb57cd41a4593e6caf8</anchor>
      <arglist>(const GridObject &amp;)</arglist>
    </member>
    <member kind="function">
      <type>GridObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a78ce5ab8896886ba2fb6d442382b515d</anchor>
      <arglist>(const GridObject &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridObject</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a4f187a5cae79dba67cc31359a00fd155</anchor>
      <arglist>(GridObject &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>GridObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>afa017deb54512d215f8432f40c449eee</anchor>
      <arglist>(GridObject &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>GridObject::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a351cce14a451171c683e06529d7e65cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>aedb3e398b48d2b033c4a6817e424f058</anchor>
      <arglist>(GridObject &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a1633f08b28c582d1ac2fa1c09c907913</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDirection</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a709fcb55fa8d1d102292cc48a1807a1f</anchor>
      <arglist>(const Vector2i &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2i &amp;</type>
      <name>getDirection</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a7030d81c596027b14668683ec7d165e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setObstacle</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>aca9560d767b3ecbd1c46667886bd8c1b</anchor>
      <arglist>(bool isObstacle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isObstacle</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a38df2cceb494256c8866e97cffd7fd39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollisionId</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>af478cd57de418bcb475eac4dfd8cfc17</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCollisionId</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a56d09b6f6853bdd518c74619937a6dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollisionGroup</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a51e2e8c176fe243347e293dc8648cd00</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getCollisionGroup</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a533a2da2fd53baae6b93e03535749c32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a038696d49fc32b6f34e9a5a7d27bbe5c</anchor>
      <arglist>(const Vector2f &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>ae9aa4f4f3370675d9beb28e5a5f3e09d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMoving</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a624e14632d9a5cd814e2c3ef6e09a7c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getGridIndex</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>aaeb1498fbae37ec5adcac70278a3771d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grid2D *</type>
      <name>getGrid</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a70dfd835a44d987c4c89938a25128c75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExcludeList &amp;</type>
      <name>getCollisionExcludeList</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>ac9766f12576bde68fb838e3e25ae80df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ExcludeList &amp;</type>
      <name>getObstacleCollisionFilter</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a822f6ce9368a0459bb38174b6f9f4803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GridMover *</type>
      <name>getGridMover</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a8b18b20aad209a85484ecaacffdee9a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onGridEnter</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a10fafdfe89d64bb8838922ec501c6f05</anchor>
      <arglist>(const Callback&lt; ime::GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onGridExit</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a5ab3020e86dbf47205c392a4f7f43471</anchor>
      <arglist>(const Callback&lt; GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onGridMoveBegin</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a1386e616d79f1a9ef4789eb5a83a5839</anchor>
      <arglist>(const Callback&lt; GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onGridMoveEnd</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>aa01c2b02e33a6666a7899a36d73b3708</anchor>
      <arglist>(const Callback&lt; GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onGridObjectCollision</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a843ca223a767f6d31d83fd26089db16f</anchor>
      <arglist>(const Callback&lt; GridObject *, GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onGridBorderCollision</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a21a5a14941c6d002008e247505da048e</anchor>
      <arglist>(const Callback&lt; GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onGridTileCollision</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>a8942c2cc917a193914a9d0927160f9c9</anchor>
      <arglist>(const Callback&lt; GridObject *, Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GridObject</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>ad88985ddc792390b7479e7944113e29c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ad1e3695522142858bf4aa0453e5a2d8e</anchor>
      <arglist>(GameObject &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a6bd441c796df187861bdbd2d576285a0</anchor>
      <arglist>(int state)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a3eb4a9c369b9e30fbe93e42ce0e7955b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setActive</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a9b5f0fe3a6940e0d7a7b488ae626935f</anchor>
      <arglist>(bool isActive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isActive</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ad163715466ffc39376ca2207925e3860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a746904dc2299ac856b5e1c6a35b3f482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a17df13e397367b0d75198913ffc8107e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachRigidBody</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>aa7da081e8edd30bd737b0b539739644c</anchor>
      <arglist>(BodyPtr body)</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getRigidBody</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a5f0cf9941d8d48d9408d527696259376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRigidBody</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a758ec10b8c898c7aae3d1af99e65ad44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRigidBody</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a14bc87d6d9652072ff43a35a059fd90e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onRigidBodyCollisionStart</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a7d1531d6903105369c8501eab64fa60b</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onRigidBodyCollisionEnd</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a05d21a978753bde8c6a64d0d5408baf8</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onRigidBodyCollisionStay</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>adb81d07bb103888893688ca462e74b7c</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a5e5bd53692b6bae17bdc00b6cce09982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scene &amp;</type>
      <name>getScene</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a9884510ba67052ef6e8755851a466594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSpriteOrigin</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a9ce02de639c2bdfd5a2c47ab57dace1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Sprite &amp;</type>
      <name>getSprite</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>ae40a6dcb01ab2dc4fd1c8ef12a5a735c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>update</name>
      <anchorfile>classime_1_1_game_object.html</anchorfile>
      <anchor>a3a5adc713578dbe8e44dc3af9524818f</anchor>
      <arglist>(Time deltaTime)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GridObject::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_grid_object.html</anchorfile>
      <anchor>ac287ea5f11dab7234680e04e673aea2d</anchor>
      <arglist>(Scene &amp;scene)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::GuiContainer</name>
    <filename>classime_1_1ui_1_1_gui_container.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; GuiContainer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a658a69229e4565d27daf55fae3db2d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GuiContainer</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a8e814e3e702e33f8a2567a31cf13aa12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GuiContainer</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a6dbb68eb586d32562a10bb715d4e13fc</anchor>
      <arglist>(priv::RenderTarget &amp;window)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GuiContainer</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a2ed0d29843c5804dbced4676a7cf458b</anchor>
      <arglist>(const GuiContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>GuiContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a10ed574c671fe6b82f15f12fa4a82f91</anchor>
      <arglist>(const GuiContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GuiContainer</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a40a314ef2e1203e594ca4703a947f99a</anchor>
      <arglist>(GuiContainer &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>GuiContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>afd954ab72e816cf9f210eff463fd2b58</anchor>
      <arglist>(GuiContainer &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsoluteViewport</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>ad0b1f84f96b532eae432f055cf6f9ed2</anchor>
      <arglist>(const FloatRect &amp;viewport)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeViewport</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>ab25df02c849e91f286601c7f5be692da</anchor>
      <arglist>(const FloatRect &amp;viewport)</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getViewport</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>ab37547126fce184876a4421550887dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAbsoluteView</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a0a29f8b4d420795fd1d9562ffc477e3b</anchor>
      <arglist>(const FloatRect &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeView</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>aabe5bd4d2416cc091c7867f0c7f95f54</anchor>
      <arglist>(const FloatRect &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getView</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>aee69322ae6f96625724fb57a911d4296</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a7e12a426326870dbb0af4d9041ff5554</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>afab9214e8fa4adae4bb81d4c402bc67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTargetSet</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a946e7c495c85c07b7ce60f167e8a5912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabKeyUsageEnabled</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a6f11783c5503d13e83ab8892ff7b5a59</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTabKeyUsageEnabled</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a58623e31e1a51e485167d35b1c23cf3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>ab36c9bb4ee2d625ab3144ddd62144f4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>add0e3776e192ce6ee3ba7d9bfb810298</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a108e19b3e8ed90246be235d6021d62bd</anchor>
      <arglist>(float opacity)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>aecda6b4f5e3f09379628486bcc5aebca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a167f37cc325681d2c22b94a78be2162f</anchor>
      <arglist>(CursorType cursorType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a97b087df477148dfbe29748b17e684d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a2cb3318ae512484d160ee77c156b1c85</anchor>
      <arglist>(CursorType cursorType)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a6b8ec80b954fc7ffd9a17d4a913f31a0</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>aea67828c534e75a6261a78de9ee64da0</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a2fc3302df60277d8485547f7d3549327</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a2cc3d48981d5f1ad5c7adf670fb9ee23</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidget</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a5504ebcacdbc2c27ecfb57f53fa9988c</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a5b7068add2d6e5d21c9920e7c0c48a01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedWidget</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>acb94a922d8474ad33d409bd647fcc166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedLeaf</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a84fac3b4af2318b173bb09002c272c14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetAtPosition</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a4d52f729880b23c672d04cb5068b72ad</anchor>
      <arglist>(Vector2f pos) const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetBelowMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a9c21a70bec02bd4816a3c60b3c97dacb</anchor>
      <arglist>(Vector2f mousePos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusNextWidget</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>ad49c20b681cffeb295b9eedc10211676</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusPreviousWidget</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a36d053b121e5af86b5450c015c9392e8</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unfocusAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a99a1e6e06174c4455fcf0d3c8346b789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a655dd43d66c9a31b72d890db547ddbec</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a94c2c7d91eceb6123f66adeb3fb78ee0</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a0e4b8f39c41897ac844f875cc50391f6</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a875a0ac390f4002e3031aa72d7fe9f5e</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>ae3e082db4ee23c87e68f74760f04552c</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>acce7b19795b8330d6950a1a0e035f882</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>a5f89c296b95a32943744d40e7d73a198</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>ab329d5501cdcceaed46ec824e1018372</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GuiContainer</name>
      <anchorfile>classime_1_1ui_1_1_gui_container.html</anchorfile>
      <anchor>adc9cc7bb530b8f3c3467ed2e8f63cd30</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::hash&lt; ime::Index &gt;</name>
    <filename>structstd_1_1hash_3_01ime_1_1_index_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>ime::ui::HorizontalLayout</name>
    <filename>classime_1_1ui_1_1_horizontal_layout.html</filename>
    <base>ime::ui::IBoxLayout</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; HorizontalLayout &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a9e86af31893e13df70775ea357e42cd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const HorizontalLayout &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a28f24525d1cd1229d5b8b206d6ebd1e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HorizontalLayout</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>abd0bcb0ae2e8b148b352326b377b9a66</anchor>
      <arglist>(const HorizontalLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type>HorizontalLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a5118cbf6efa7e5c87af4ac84824950e6</anchor>
      <arglist>(const HorizontalLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HorizontalLayout</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>acb2e535c15c38a7b220e9056f61d20e5</anchor>
      <arglist>(HorizontalLayout &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>HorizontalLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a3ee68c6ebf5d922eab8f43a2e600ac90</anchor>
      <arglist>(HorizontalLayout &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>HorizontalLayout::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>afaeb8bac6d9e7a8302dfad010e406d4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BoxLayoutRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a172f757f05fb3304b2d2128180637831</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a8bf6cadc9a5ba42476153e6d11238b5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a5996ca498cfaeb8f631ab035e4fb8baf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWidget</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>ac3bb5c99c82ba600e147dd4c17100026</anchor>
      <arglist>(std::size_t index, Widget *widget, const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidgetAt</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a1446fcc31dd518e2ba902e282aadcfb9</anchor>
      <arglist>(std::size_t index) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSpace</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a014f9c0ba23e0e569f71f2f1d84c9620</anchor>
      <arglist>(float ratio) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSpace</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>ac7025335740dc44259bf90d72aa9800b</anchor>
      <arglist>(std::size_t index, float ratio) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRatio</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a0789d5bae1b82e93027f2e2ed8ebb0be</anchor>
      <arglist>(Widget *widget, float ratio) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRatio</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a3860ff7592d42f22ec21cad06f7ecbe0</anchor>
      <arglist>(std::size_t index, float ratio) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRatio</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>ab692fae8b717b22eddb2793cad6b9558</anchor>
      <arglist>(const Widget *widget) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRatio</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>aff1193d40d66f5d6ca529faa54db205c</anchor>
      <arglist>(std::size_t index) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HorizontalLayout</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>ac15d79d2aeee09e1e9bfb1759db6d188</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a655ee1010db960c007c2be5e32a4ca25</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7b4149560be75c68d9874bb650cd1a20</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aab8793c4004717e8a3df985cfa86e22d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a6dbb5d766d355a14f4b68501bb36e703</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetAtPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ac0ffedec6aaa059237db9900a454a064</anchor>
      <arglist>(Vector2f pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8894e84e51733d3be13054df9a4f60e5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a24e9c179de1f8f39ca6c15dd1ab97b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ae071b10b1dd275b7b21b2dc8e0b045f2</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ab8fa96eadd34575b8a2a84923391895b</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ad398e39dc582f530bfd0492566eaa261</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8fcd040ece49ba681d4a49e33222a0c9</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a0826fe366a440cde9efb62dc520cd414</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>abd9db967affeef6e89ec3635a28e5504</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a5c5447ea7d1ffd6e87f2bbe2a935d146</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a294427255e4ed49aa2cf150e7d3d2a6e</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa0f983e4503190f75648b4c68dd44235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedLeaf</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a3ca1a14ea74975a02def0b1245705546</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusNextWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7e0bf072b5396208fc7ca2a8705490c0</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusPreviousWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa48887ce4b7f524910f21d34d9e061ed</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a530b03d553311b0321417543408a04e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a1046a4c1183e1bdfd0a9f15d551c3fa1</anchor>
      <arglist>(const Callback&lt; Widget * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HorizontalLayout::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_horizontal_layout.html</anchorfile>
      <anchor>a480872a1b3ddf7a36a613120cd67ec79</anchor>
      <arglist>(const std::string &amp;width=&quot;100%&quot;, const std::string &amp;height=&quot;100%&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::IBoxLayout</name>
    <filename>classime_1_1ui_1_1_i_box_layout.html</filename>
    <base>ime::ui::WidgetContainer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; WidgetContainer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a60410b3d5dcbc5d00278a7f798148341</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertWidget</name>
      <anchorfile>classime_1_1ui_1_1_i_box_layout.html</anchorfile>
      <anchor>ae499265d2bb3079285bbfad1cb2174bc</anchor>
      <arglist>(std::size_t index, Widget *widget, const std::string &amp;widgetName)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>removeWidgetAt</name>
      <anchorfile>classime_1_1ui_1_1_i_box_layout.html</anchorfile>
      <anchor>aace940d7103a2684bff90f44174b52c5</anchor>
      <arglist>(std::size_t index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addSpace</name>
      <anchorfile>classime_1_1ui_1_1_i_box_layout.html</anchorfile>
      <anchor>a3b11ef76f9bafe547a5660c8bb17735d</anchor>
      <arglist>(float ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertSpace</name>
      <anchorfile>classime_1_1ui_1_1_i_box_layout.html</anchorfile>
      <anchor>a43d1210f70d39f5fdeab7426aa2e8078</anchor>
      <arglist>(std::size_t index, float ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setRatio</name>
      <anchorfile>classime_1_1ui_1_1_i_box_layout.html</anchorfile>
      <anchor>a7436ad34ac0eeb6405eb26881a263a11</anchor>
      <arglist>(Widget *widget, float ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setRatio</name>
      <anchorfile>classime_1_1ui_1_1_i_box_layout.html</anchorfile>
      <anchor>a33cb8213b3b50be2b9514b7b34807774</anchor>
      <arglist>(std::size_t index, float ratio)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getRatio</name>
      <anchorfile>classime_1_1ui_1_1_i_box_layout.html</anchorfile>
      <anchor>ac6e378daaa6aaca372af1c42dc4beecc</anchor>
      <arglist>(const Widget *widget) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getRatio</name>
      <anchorfile>classime_1_1ui_1_1_i_box_layout.html</anchorfile>
      <anchor>a3e5e9058c3b1dd661fc500d2136ba3f4</anchor>
      <arglist>(std::size_t index) const =0</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a655ee1010db960c007c2be5e32a4ca25</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7b4149560be75c68d9874bb650cd1a20</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aab8793c4004717e8a3df985cfa86e22d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a6dbb5d766d355a14f4b68501bb36e703</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetAtPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ac0ffedec6aaa059237db9900a454a064</anchor>
      <arglist>(Vector2f pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8894e84e51733d3be13054df9a4f60e5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a24e9c179de1f8f39ca6c15dd1ab97b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ae071b10b1dd275b7b21b2dc8e0b045f2</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ab8fa96eadd34575b8a2a84923391895b</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ad398e39dc582f530bfd0492566eaa261</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8fcd040ece49ba681d4a49e33222a0c9</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a0826fe366a440cde9efb62dc520cd414</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>abd9db967affeef6e89ec3635a28e5504</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a5c5447ea7d1ffd6e87f2bbe2a935d146</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a294427255e4ed49aa2cf150e7d3d2a6e</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa0f983e4503190f75648b4c68dd44235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedLeaf</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a3ca1a14ea74975a02def0b1245705546</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusNextWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7e0bf072b5396208fc7ca2a8705490c0</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusPreviousWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa48887ce4b7f524910f21d34d9e061ed</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a530b03d553311b0321417543408a04e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a1046a4c1183e1bdfd0a9f15d551c3fa1</anchor>
      <arglist>(const Callback&lt; Widget * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14f1c77dcb99eaba385845363242c061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a47243168addd736d0dd08eee6b4e7b89</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>acf5e72f074fd7e304e7f6071ce806d2f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::input::Joystick::Identification</name>
    <filename>structime_1_1input_1_1_joystick_1_1_identification.html</filename>
    <member kind="function">
      <type></type>
      <name>Identification</name>
      <anchorfile>structime_1_1input_1_1_joystick_1_1_identification.html</anchorfile>
      <anchor>ac5ac51d51a50e21d7b6765b6baaa43f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structime_1_1input_1_1_joystick_1_1_identification.html</anchorfile>
      <anchor>a748514b93f7eeaf3ca5f218791884210</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>vendorId</name>
      <anchorfile>structime_1_1input_1_1_joystick_1_1_identification.html</anchorfile>
      <anchor>a39ec1b3272ea8d301eb30145863fad9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>productId</name>
      <anchorfile>structime_1_1input_1_1_joystick_1_1_identification.html</anchorfile>
      <anchor>a37213765c27bcb2dba75e8adfe2b4fda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::utility::ILogger</name>
    <filename>classime_1_1utility_1_1_i_logger.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classime_1_1utility_1_1_i_logger.html</anchorfile>
      <anchor>a33d5f6f63602b9e71a6ba80530f6072b</anchor>
      <arglist>(MessageType type, const std::string &amp;msg)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ILogger</name>
      <anchorfile>classime_1_1utility_1_1_i_logger.html</anchorfile>
      <anchor>af50820ea6aae35365968a43af7da6e78</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Index</name>
    <filename>structime_1_1_index.html</filename>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>structime_1_1_index.html</anchorfile>
      <anchor>a6c707a7d7657bfb09a778171bd267f48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>structime_1_1_index.html</anchorfile>
      <anchor>a15e92eb305e9483bbc87225a6306db96</anchor>
      <arglist>(int row, int colm)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>row</name>
      <anchorfile>structime_1_1_index.html</anchorfile>
      <anchor>a6b0711a87e66ad0339a102d28c43512e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>colm</name>
      <anchorfile>structime_1_1_index.html</anchorfile>
      <anchor>a4d8470a943d00032bfac75cc0ef32253</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::input::InputManager</name>
    <filename>classime_1_1input_1_1_input_manager.html</filename>
    <member kind="function">
      <type></type>
      <name>InputManager</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>aed1ad37d615529d2626fce1a28bb03a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInputEnable</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a5f37e3cb840fca8e50ca695aa9871578</anchor>
      <arglist>(InputType inputType, bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInputEnabled</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>afa2cbc448a119d17e336d627edc86909</anchor>
      <arglist>(InputType inputType) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAllInputEnable</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a6e07f0554f1eb67c6d7028ec8d13b182</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllInputEnabled</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>ab774c6efe6b69bae6af59599d96fa8f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAllInputDisabled</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>ac1862e78cc51a617a3d006571b63af7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bindKey</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a50ab5080b36d5e4da97cd64ea5237afb</anchor>
      <arglist>(Keyboard::Key key, KeyBindType type, const KeybindAction &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bindKeys</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a56bd6ae8f06ddf44617eae329cb3e770</anchor>
      <arglist>(Keyboard::Key keyA, Keyboard::Key keyB, KeyBindType keyBindType, const KeybindAction &amp;action)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unbindKey</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>ad78d1a2e56948a9db14ec8300ed24de5</anchor>
      <arglist>(KeyBindType keyBindType, int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onKeyUp</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a99d56d290af3c89fe450bc49f21ecf08</anchor>
      <arglist>(Callback&lt; Keyboard::Key &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onKeyDown</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>ab2515f57ebbf37725452d8f1423011de</anchor>
      <arglist>(Callback&lt; Keyboard::Key &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onKeyHeld</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a6735824ad46ffeef08828912e0fbff8a</anchor>
      <arglist>(Callback&lt; Keyboard::Key &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a03ba97955581f3b1c80ceee82af9cce0</anchor>
      <arglist>(KeyboardEvent event, int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMouseUp</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>accf11d5585bdf902f3e290204f9d6ee2</anchor>
      <arglist>(Callback&lt; Mouse::Button, int, int &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMouseUp</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>ac3268e6c577ed334d39c829bf350efca</anchor>
      <arglist>(Callback&lt; Mouse::Button &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMouseDown</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a5da855c032feb3312a53945760383139</anchor>
      <arglist>(Callback&lt; Mouse::Button, int, int &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMouseDown</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a24f0f8cce58ad3409da0d47563479c27</anchor>
      <arglist>(Callback&lt; Mouse::Button &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMouseMove</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a158e566543b8f3f5aac457881d5dc0ab</anchor>
      <arglist>(Callback&lt; int, int &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMouseWheelScroll</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a61c9689dc199e7fba2a0097a5047f08c</anchor>
      <arglist>(Callback&lt; Mouse::Wheel, float, int, int &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a417e6b99c0a54b331ac005d42f0e059b</anchor>
      <arglist>(MouseEvent event, int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onJoyConnect</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a4ada688ce2b7377679b80360732d2189</anchor>
      <arglist>(const Callback&lt; unsigned int &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onJoyDisconnect</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a4e0ba1313e11847ba6e8539a7b25ed10</anchor>
      <arglist>(const Callback&lt; unsigned int &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onJoyButtonPress</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a43e824815a63e3be3147e696db4889c3</anchor>
      <arglist>(const Callback&lt; unsigned int, unsigned int &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onJoyButtonRelease</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a45200dcc190bf061624580025ad33aed</anchor>
      <arglist>(const Callback&lt; unsigned int, unsigned int &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onJoyAxisMove</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a0ad89ff58ff7986407f041b5ab0738a6</anchor>
      <arglist>(const Callback&lt; unsigned int, Joystick::Axis, float &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>Joystick &amp;</type>
      <name>getJoystick</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a43137ae5779dbf299eee2b7b6b3478d0</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a5784948b2d35eed5a8ce0f4833962b54</anchor>
      <arglist>(JoystickEvent event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isKeyPressed</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a975f7002913a770810787700f93b240e</anchor>
      <arglist>(Keyboard::Key key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isMouseDown</name>
      <anchorfile>classime_1_1input_1_1_input_manager.html</anchorfile>
      <anchor>a2cf4e35755406219685eef8da4675fbe</anchor>
      <arglist>(Mouse::Button button)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::InvalidArgumentException</name>
    <filename>classime_1_1_invalid_argument_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>InvalidArgumentException</name>
      <anchorfile>classime_1_1_invalid_argument_exception.html</anchorfile>
      <anchor>aeb537fba4f39563760ea74a231fb34b3</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::InvalidParseException</name>
    <filename>classime_1_1_invalid_parse_exception.html</filename>
    <member kind="function">
      <type></type>
      <name>InvalidParseException</name>
      <anchorfile>classime_1_1_invalid_parse_exception.html</anchorfile>
      <anchor>a470a905c607fd80aef61cec6a4f523ca</anchor>
      <arglist>(const std::string &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::IPathFinderStrategy</name>
    <filename>classime_1_1_i_path_finder_strategy.html</filename>
    <class kind="struct">ime::IPathFinderStrategy::Node</class>
    <member kind="function" virtualness="pure">
      <type>virtual std::stack&lt; Index &gt;</type>
      <name>findPath</name>
      <anchorfile>classime_1_1_i_path_finder_strategy.html</anchorfile>
      <anchor>a3d9b36b8c81636429891962a18da1682</anchor>
      <arglist>(const Grid2D &amp;grid, const Index &amp;sourceNode, const Index &amp;source)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getType</name>
      <anchorfile>classime_1_1_i_path_finder_strategy.html</anchorfile>
      <anchor>a9694215c6c7280da81eb880238bd809d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IPathFinderStrategy</name>
      <anchorfile>classime_1_1_i_path_finder_strategy.html</anchorfile>
      <anchor>acf16d336d9d2f5e665220a5be3ab7c43</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::stack&lt; Index &gt;</type>
      <name>backtrack</name>
      <anchorfile>classime_1_1_i_path_finder_strategy.html</anchorfile>
      <anchor>aa8a80786e3010939275af8f26f6ea388</anchor>
      <arglist>(const std::vector&lt; Node &gt; &amp;exploredNodes, const Index &amp;target)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ITransformable</name>
    <filename>classime_1_1_i_transformable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>aa7cc06c856f0a243a90fb272a6383db7</anchor>
      <arglist>(float x, float y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>ab2a830f0c88261ac658cd80bd01aff28</anchor>
      <arglist>(const Vector2f &amp;position)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a05bf4206bc5b77424a7a2862c81afebc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a62286cb56765e61020d6e539faf9a85e</anchor>
      <arglist>(float angle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a5b40c737a37d7f4f99cfda39cc6be9d7</anchor>
      <arglist>(float angle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>aeb51b5f307e6ca46726b100a647251e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a755c4d67602020c98bda5616c5ab59b2</anchor>
      <arglist>(float factorX, float factorY)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a2549db1ced8b80e7aea4f98ba6248857</anchor>
      <arglist>(const Vector2f &amp;scale)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a749b22479fe3707c50efa3baed9e2421</anchor>
      <arglist>(float factorX, float factorY)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>aa1f723a408e176c4477c032d966fcc68</anchor>
      <arglist>(const Vector2f &amp;offset)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a5d0e40692fb72ef7b283b5fc9e8264fb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>af62556f61532904fe613ac5a07e3f774</anchor>
      <arglist>(float x, float y)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a0fad426a291aa69c3a8856b28e47114b</anchor>
      <arglist>(const Vector2f &amp;origin)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a6fca45fa2158340a0e90964e1e029792</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a445c59bd256193250ec45cb4c0aaffe2</anchor>
      <arglist>(float offsetX, float offsetY)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>aedfa93d074dbb45c98617b764c519e4f</anchor>
      <arglist>(const Vector2f &amp;offset)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ITransformable</name>
      <anchorfile>classime_1_1_i_transformable.html</anchorfile>
      <anchor>a18e53bcd7f58591d50ba2d6ea291c8cc</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::IWidgetRenderer</name>
    <filename>classime_1_1ui_1_1_i_widget_renderer.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; IWidgetRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>a57539c67aec409d457c571a46fc105bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>a38059b7b1a691dfd0bdda168fa627b01</anchor>
      <arglist>(float opacity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>a2fe20596663c9cdecd86999c7d3633fb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>aa9d5383e24bc8a98523b7511a0bd6081</anchor>
      <arglist>(float opacity)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>a88330b3de96573cfa9e1810d86859fc2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>aa7d3a8758c5c044d65fee6695d180856</anchor>
      <arglist>(const std::string &amp;filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>a0ce5cf56d1410f5f028a8ce170198b36</anchor>
      <arglist>(bool ignoreTransparentParts)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>ad56699d22d5f58cbf09fd70dc736fcaf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>ad222c2dc1cdba917be5dd929d7591f68</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IWidgetRenderer</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>aaea2d8ecfa0f6f697d997fed73b19368</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Joint</name>
    <filename>classime_1_1_joint.html</filename>
    <base>ime::Object</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Joint &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>a8862b56d2d24a66111c24ccc93997689</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>aeef88f665467ae19ffbbaf553a94cba1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual JointType</type>
      <name>getType</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>a99985a7711a879697d15a172503e39da</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RigidBody *</type>
      <name>getBodyA</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>a1bf086bf5eee828a605b7e8a0d622f74</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual RigidBody *</type>
      <name>getBodyB</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>aee58bb92049f9f665bc9b19829f36555</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector2f</type>
      <name>getBodyAWorldAnchorPoint</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>afc553a4bd8aa9753f3ab914a3068c071</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector2f</type>
      <name>getBodyBWorldAnchorPoint</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>a45b7694b315b36a1c1756e7ef06c83bb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Vector2f</type>
      <name>getReactionForce</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>a2b1cde2835b90a0fec9a6f025cbafe07</anchor>
      <arglist>(float fpsLimit) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual float</type>
      <name>getReactionTorque</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>ab0875969a4b97cf75df564dabbfaef97</anchor>
      <arglist>(float fpsLimit) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>a02c55680c07a5cdfe78de738d14a9455</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>canBodiesCollide</name>
      <anchorfile>classime_1_1_joint.html</anchorfile>
      <anchor>ac433c39793c98f253f4c6a85085ce44e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a893e90e8498458bd9d43fe9041a22f02</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::JointDefinition</name>
    <filename>structime_1_1_joint_definition.html</filename>
    <member kind="function">
      <type></type>
      <name>JointDefinition</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>aed0d11b6aa51e573f38849dd9dfb056e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JointDefinition</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>a5666197697e79342e9d1d011ab59fe82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>JointType</type>
      <name>type</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>a0e9553d230ae8c720850429379edeaa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RigidBody *</type>
      <name>bodyA</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>a1a4cd5db4200f032ef1c5cdd2dd3011e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RigidBody *</type>
      <name>bodyB</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>a0d637c5f7827b2d38089cf6e92a3b73c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>areBodiesCollidable</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>ae916d2e1e7546dd0b4f241a639d320c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PropertyContainer</type>
      <name>userData</name>
      <anchorfile>structime_1_1_joint_definition.html</anchorfile>
      <anchor>aa63eb66292e6d6ae383cdf94f7aad699</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::input::Joystick</name>
    <filename>classime_1_1input_1_1_joystick.html</filename>
    <class kind="struct">ime::input::Joystick::Identification</class>
    <member kind="enumvalue">
      <name>Count</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a0c9fbc0834b78b25e0ba9a38e0820f19aca10bc6bb21e9188e448705385810a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ButtonCount</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a0c9fbc0834b78b25e0ba9a38e0820f19a2f54442e094f970baa422b73b22eb774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AxisCount</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a0c9fbc0834b78b25e0ba9a38e0820f19a80eb739a5ae371ea03e0d67ebe1e68e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Axis</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>ae2335189797f5d2b46e35ad06259adeb</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1input_1_1_joystick.html" anchor="ae2335189797f5d2b46e35ad06259adeba02129bb861061d1a052c592e2dc6b383">X</enumvalue>
      <enumvalue file="classime_1_1input_1_1_joystick.html" anchor="ae2335189797f5d2b46e35ad06259adeba57cec4137b614c87cb4e24a3d003a3e0">Y</enumvalue>
      <enumvalue file="classime_1_1input_1_1_joystick.html" anchor="ae2335189797f5d2b46e35ad06259adeba21c2e59531c8710156d34a3c30ac81d5">Z</enumvalue>
      <enumvalue file="classime_1_1input_1_1_joystick.html" anchor="ae2335189797f5d2b46e35ad06259adebae1e1d3d40573127e9ee0480caf1283d6">R</enumvalue>
      <enumvalue file="classime_1_1input_1_1_joystick.html" anchor="ae2335189797f5d2b46e35ad06259adeba4c614360da93c0a041b22e537de151eb">U</enumvalue>
      <enumvalue file="classime_1_1input_1_1_joystick.html" anchor="ae2335189797f5d2b46e35ad06259adeba5206560a306a2e085a437fd258eb57ce">V</enumvalue>
      <enumvalue file="classime_1_1input_1_1_joystick.html" anchor="ae2335189797f5d2b46e35ad06259adeba783ee6cd28c54605c9ef0453ff213692">PovX</enumvalue>
      <enumvalue file="classime_1_1input_1_1_joystick.html" anchor="ae2335189797f5d2b46e35ad06259adebad5145e1dd4aa9600d94cad6ec92e94e5">PovY</enumvalue>
    </member>
    <member kind="enumvalue">
      <name>Count</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a0c9fbc0834b78b25e0ba9a38e0820f19aca10bc6bb21e9188e448705385810a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ButtonCount</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a0c9fbc0834b78b25e0ba9a38e0820f19a2f54442e094f970baa422b73b22eb774</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AxisCount</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a0c9fbc0834b78b25e0ba9a38e0820f19a80eb739a5ae371ea03e0d67ebe1e68e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>afed81cf35df1616a2361a718fd9c6f57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnable</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>ae606577bc2a8fb6f8b2b20454fbf5489</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a1c3a2d122f716e2be6793279e52204dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIndex</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a3bd03d85451632c57347bd5e9d99a8d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getButtonCount</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a58c391b74974c99200eb69d1efb1ce61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasAxis</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a64b779eaef4e78e2ea62607cd6db2f61</anchor>
      <arglist>(Axis axis) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isButtonPressed</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>aa409d7c48d6257c56b7564ce56ce5617</anchor>
      <arglist>(unsigned int button) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAxisPosition</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>ab25aa76922eb41da1835344b279cebdb</anchor>
      <arglist>(Axis axis) const</arglist>
    </member>
    <member kind="function">
      <type>Identification</type>
      <name>getIdentification</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a2e09e83111817ea3b95276c0652bb17a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onConnect</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>acb01fd8bb3f13260a5089cbf26695ab3</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDisconnect</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a5bcf1c8152a5f3cfb558916c428c476a</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onButtonPress</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a635b89983e06f2bd699d73d6b8d61304</anchor>
      <arglist>(const Callback&lt; unsigned int &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onButtonRelease</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a08ace764a7ee709ba75493526e192e3c</anchor>
      <arglist>(const Callback&lt; unsigned int &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onButtonHeld</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>ac6dbe4042f9d9a77d6946c65d1f3aceb</anchor>
      <arglist>(const Callback&lt; unsigned int &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onAxisMove</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a7d73e5fe48ffd5d787e8c62a684bf0e6</anchor>
      <arglist>(const Callback&lt; Axis, float &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1input_1_1_joystick.html</anchorfile>
      <anchor>a7602da8f896123990e69b5e18103ee07</anchor>
      <arglist>(JoystickEvent event, int id)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Event::JoystickButtonEvent</name>
    <filename>structime_1_1_event_1_1_joystick_button_event.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>joystickId</name>
      <anchorfile>structime_1_1_event_1_1_joystick_button_event.html</anchorfile>
      <anchor>a05d992e41dcbf0c61a481815f3beeb8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>button</name>
      <anchorfile>structime_1_1_event_1_1_joystick_button_event.html</anchorfile>
      <anchor>af9b53018df3766f92e6f25c99b791db8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Event::JoystickConnectEvent</name>
    <filename>structime_1_1_event_1_1_joystick_connect_event.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>joystickId</name>
      <anchorfile>structime_1_1_event_1_1_joystick_connect_event.html</anchorfile>
      <anchor>a801c744dd6d4b64ec66bb7bdff505310</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Event::JoystickMoveEvent</name>
    <filename>structime_1_1_event_1_1_joystick_move_event.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>joystickId</name>
      <anchorfile>structime_1_1_event_1_1_joystick_move_event.html</anchorfile>
      <anchor>a3a350d8a6c9c6fee1a1e540e7c68aef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>input::Joystick::Axis</type>
      <name>axis</name>
      <anchorfile>structime_1_1_event_1_1_joystick_move_event.html</anchorfile>
      <anchor>ae5514cecb1d13ef073efaa1b54cdb702</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>position</name>
      <anchorfile>structime_1_1_event_1_1_joystick_move_event.html</anchorfile>
      <anchor>a73da5bf5115b7553a3bdf101d265bb15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::input::Keyboard</name>
    <filename>classime_1_1input_1_1_keyboard.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Key</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>a90d5e8a9a735816fb2b6f985e3e306f0</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a7fc56270e7a70fa81a5935b72eacbe29">A</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a9d5ed678fe57bcca610140957afab571">B</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a0d61f8370cad1d412f80b84d143e1257">C</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0af623e75af30e62bbd73d6df5b50bb7b5">D</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a3a3ea00cfc35332cedf6e5e9a32e94da">E</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a800618943025315f869e4e1f09471012">F</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0adfcf28d0734569a6a693bc8194de62bf">G</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ac1d9f50f86825a1a2302ec2449c17196">H</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0add7536794b63bf90eccfd37f9b147d7f">I</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0aff44570aca8241914870afbc310cdb85">J</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0aa5f3c6a11b03839d46af9fb43c97c188">K</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ad20caec3b48a1eef164cb4ca81ba2587">L</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a69691c7bdcc3ce6d5d8a1361f22d04ac">M</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a8d9c307cb7f3c4a32822a51922d1ceaa">N</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0af186217753c37b9b9f958d906208506e">O</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a44c29edb103a2872f519ad0c9a0fdaaa">P</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0af09564c9ca56850d4cd6b3319e541aee">Q</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ae1e1d3d40573127e9ee0480caf1283d6">R</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a5dbc98dcc983a70728bd082d1a47546e">S</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ab9ece18c950afbfa6b0fdbfa4ff731d3">T</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a4c614360da93c0a041b22e537de151eb">U</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a5206560a306a2e085a437fd258eb57ce">V</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a61e9c06ea9a85a5088a499df6458d276">W</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a02129bb861061d1a052c592e2dc6b383">X</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a57cec4137b614c87cb4e24a3d003a3e0">Y</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a21c2e59531c8710156d34a3c30ac81d5">Z</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a845787798a45b48e825e9b99a338537a">Num0</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0abacb69a042a9fdc268a672919052d1f2">Num1</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a72bd76d6e2b68a539c8d1a77b564ed72">Num2</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0aa3a965b443a13522aa59fbdea31d00ce">Num3</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ae0af89b5f83c670e4cc584c73c4732ca">Num4</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a7e89a79bbb017bfcaff80ff820a15d8a">Num5</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a0581cd1de881a0f697f3b46741fb326b">Num6</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a4911ceac5c68b5a3f1499d68b27b0938">Num7</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a894e7d9b7dcced78e8007ba2d38b8dd2">Num8</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ad7b1dbe22119bc7acf6e4a1afcc06e46">Num9</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a013ec032d3460d4be4431c6ab1f8f224">Escape</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a9e6bbb54b2d06e4a49ebcea834724afd">LControl</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a667d08af6165c1cb6e72970036a9f7d7">LShift</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0aab527e774a30bf52a69de316727ce4cd">LAlt</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0afc2ae39512975c67ebe724fecc528d9d">LSystem</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ab06196a3bdf600db4088d5ac34132d58">RControl</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a8e707c0a523c7ec2179a6b6821d6eba8">RShift</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a067967ae88a4f9ad8cf58e1bb88c32d8">RAlt</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a268cfbdcfc1a2d7ab31962c79b151a7d">RSystem</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ab61541208db7fa7dba42c85224405911">Menu</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a17b56a4dc0feb499daf64d6c2bd11fdd">LBracket</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ac27efa0472cd29bf688de150ce920752">RBracket</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a9806fa37a3ecd39bf637c203aa011ed0">Semicolon</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a58be47db9455679e6a44df2eff9c9fa6">Comma</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a1901606ea069a83dc7beea17881ef95a">Period</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ac48e929b2b1eabba2ba036884433345e">Quote</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a358cfe58715d680d9ab09f82e4010cbc">Slash</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0af6c6379402dce27659f7cffee6bc1f00">Backslash</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a77a804418d76dc407383a618b60853ab">Tilde</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0af5f286e73bda105e538310b3190f75c5">Equal</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a726add2b4d11304a74bc0360f8338984">Hyphen</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ad511f8439ecde36647437fbba67a4394">Space</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0af1851d5600eae616ee802a31ac74701b">Enter</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0acd7d13ceea728b08555f7c818cfb13ef">Backspace</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a5c6ba25104401c9ee0650230fc6ba413">Tab</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a9b869c510c75c5827ac82e49d4340927">PageUp</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0aee3677bcca83ece9384b01e43952bf33">PageDown</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a87557f11575c0ad78e4e28abedc13b6e">End</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a8cf04a9734132302f96da8e113e80ce5">Home</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0aa458be0f08b7e4ff3c0f633c100176c0">Insert</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0af2a6c498fb90ee345d997f888fce3b18">Delete</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0aec211f7c20af43e742bf2570c3cb84f9">Add</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a1d9baf077ee87921f57a8fe42d510b65">Subtract</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ae257376d913f3b53cbb4a9b19d770648">Multiply</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a0b914e196182d02615487e9793ecff3d">Divide</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a945d5e233cf7d6240f6b783b36a374ff">Left</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a92b09c7c48c520c3c55e497875da437c">Right</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a258f49887ef8d14ac268c92b02503aaa">Up</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a08a38277b0309070706f6652eeae9a53">Down</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a1b1118fbe9aecd479f93d37449578365">Numpad0</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ac8e841f6b917061dd15aedb19a80cb77">Numpad1</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0af7303042267ef3576930c1f4cd79348a">Numpad2</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a5e23a433a108a85788894b705ec11cdd">Numpad3</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a50b622a0442de23f15effc7fc46f3892">Numpad4</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a6252c5b171a2982612e31042b953f558">Numpad5</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a4d9afa3da3cc40661d50a925dd3010ad">Numpad6</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a4314bbf1a297c4b03a5246a71c9c93b6">Numpad7</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a8bf3a062ba0e0fa6ef21508d15e7820e">Numpad8</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a15f7ca721fe2b648a34d498084f70919">Numpad9</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ae1dffc8709f31a4987c8a88334107e89">F1</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0afe5c3684dce76cdd9f7f42430868aa74">F2</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a4b6bf4b531770872d4328ce69bef5627">F3</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ae7e0e72401a9f2718ed0f39f2861d702">F4</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a37f438df6a6d5ba4c17ef8ca58562f00">F5</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a1faf42f2823f184eb2c9f0dffe5d73f2">F6</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a47489eb597b7db34caa24b1fc78fc839">F7</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a4787509ad9f9d747a81a30e9dde3d4a7">F8</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a892a245e287c163080b23db737d3c4c9">F9</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ab213ce22ca6ad4eda8db82966b9b6e5a">F10</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a643b0662422d1d0dffa3fca2e2bf28a8">F11</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ae902674982fc99aa343cdd94da7476c3">F12</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a95dfde4807d4d6a9eec499203b3c24a0">F13</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a2468649b6215c4cdd2aef5095b3f5932">F14</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0ae53b55851b9ff4979f2c3ff434a4a138">F15</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a105b296a83f9c105355403f3332af50f">Pause</enumvalue>
      <enumvalue file="classime_1_1input_1_1_keyboard.html" anchor="a90d5e8a9a735816fb2b6f985e3e306f0a6edea92c9085d3d9c713f9dc76e2a61f">KeyCount</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Keyboard</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>ab1b8d436235e37ec37b2545e5f914424</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnable</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>a5296d6445e975b7cf6e3fa5225f89ac1</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>a75cbdf91e7ee049317e88fc385a138e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onKeyUp</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>a220e19bf2ef50a69a79caea252efafd8</anchor>
      <arglist>(Callback&lt; Key &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onKeyDown</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>ae42d4e60789a889cb6741e965d98146b</anchor>
      <arglist>(Callback&lt; Key &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onKeyHeld</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>aefcea7c3a4591dd3d35a93bd2ed24bee</anchor>
      <arglist>(Callback&lt; Key &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>a92a5fffb346e3e705005eb64f3d4af64</anchor>
      <arglist>(KeyboardEvent event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>keyToString</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>aecaf05c4a9279e03d2723166328e3091</anchor>
      <arglist>(Key key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Key</type>
      <name>stringToKey</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>a90adb888823d6e59745baa57a1a162e2</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isKeyPressed</name>
      <anchorfile>classime_1_1input_1_1_keyboard.html</anchorfile>
      <anchor>a21d338caca899846212b3c710fdb4120</anchor>
      <arglist>(Key key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::KeyboardGridMover</name>
    <filename>classime_1_1_keyboard_grid_mover.html</filename>
    <base>ime::GridMover</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; KeyboardGridMover &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>ab6c5fdf2bc4140081280428212bf33db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(Keyboard::Key)&gt;</type>
      <name>InputCallback</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>a76bba81f0b97a32794f768a131c7246e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a07b612eb1a30ee0d7012a891a805e93a</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aae1ba155a9f2e8c3be94020eef32a0301">Manual</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa64663f4646781c9c0110838b905daa23">Random</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aac41a31890959544c6523af684561abe5">Target</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aad71670d62b238eaf063979407361034e">Cyclic</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aaa55529813aef6ca28b9d22ee0442e02b">KeyboardControlled</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MoveRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a62c372e0dbb8e5a0be9b8fa5fd9724fc</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcab1c94ca2fbc3e78fc30069c8d0f01680">All</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca9ac677ee4eec25d9e59707a661d2c5e1">Diagonal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca3e85a6323568ffe699745b4eef821495">NonDiagonal</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>KeyboardGridMover</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>ab45c5470cd0a58a9cff4e653e2c18876</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *target=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>a49b5520a01fcb72e1c1f63525121b488</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementTrigger</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>a64dd88722c3106a405dcd2a73a511f90</anchor>
      <arglist>(MovementTrigger trigger)</arglist>
    </member>
    <member kind="function">
      <type>MovementTrigger</type>
      <name>getMovementTrigger</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>ad06901432c0689d976b6ee81b81944be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeys</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>a2d5dc09d5d2a078ffb9de4c526e67b0f</anchor>
      <arglist>(const TriggerKeys &amp;triggerKeys)</arglist>
    </member>
    <member kind="function">
      <type>TriggerKeys &amp;</type>
      <name>getTriggerKeys</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>a102385f20b91ec698f0a611723883963</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onInput</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>a5fd08e4487b4f73b4f37a81a70be2830</anchor>
      <arglist>(const InputCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KeyboardGridMover</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>a7eb8c402431fe00fd6da9dedb9aa487e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8e3a0ca52ae74832ef1525671ba1b49c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncWith</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a0627539f4f7e59a9905c4d9d37396089</anchor>
      <arglist>(const GridMover &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestMove</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a82d5a2809795725446f88f0ed90f4c71</anchor>
      <arglist>(const Direction &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, GridObject * &gt;</type>
      <name>isBlockedInDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a266600fc2eef282439b2d507b358c427</anchor>
      <arglist>(const Direction &amp;direction) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a39ab796c7ce3807533afd9d64bce8425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getPrevDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a986f4a16ef608e0873ee2c8a1455c65f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2b8a2eb07cdf61592f63a32e8e88436f</anchor>
      <arglist>(GridObject *target)</arglist>
    </member>
    <member kind="function">
      <type>GridObject *</type>
      <name>getTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa519ad160ab2062363eb65a596f61d4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ada3898f9de6562ae8ff0ab9a6b7c813f</anchor>
      <arglist>(const Vector2f &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6d91709a02eb517e68edb798949bd91d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a3a9c1ee303df652a29e07ac33ecb00b7</anchor>
      <arglist>(float multiplier)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>acf2934181430189656188257bd77ed5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a121bf39232196e459b0c0b619e963c7b</anchor>
      <arglist>(MoveRestriction moveRestriction)</arglist>
    </member>
    <member kind="function">
      <type>MoveRestriction</type>
      <name>getMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a04e9f2ca7f76fd6c6278797ab46e6a65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementFreeze</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2a264750eeefd2cacf760ad9d785d3a7</anchor>
      <arglist>(bool freeze)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMovementFrozen</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7f7c162f7555b076e7a490baca60edcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getCurrentTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aaf9fa52e0e29d28c988b1d645e1e29ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getPrevTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a75dd6cd8343b1741e88ff8de80c5830f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af8722af658036b2f6b7b40fe5bdbf1e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grid2D &amp;</type>
      <name>getGrid</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7872637d83ac8efddac5a4bf956469f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTargetMoving</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af2f703bf9dfc0c91c76716dac3ded84a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teleportTargetToDestination</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a1861b96d89d9bc4539eda2cdacd356b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDirectionChange</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa54c01c573b9b968117a0b5ef0fd8618</anchor>
      <arglist>(const Callback&lt; Direction &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetTile</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ade350b65cfb3791254d942550882b895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTargetTileReset</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a77f61b75e33ec1e8ef9a3da3076938d0</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveBegin</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa8181e77c50a31a9200e7f64120144ec</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveEnd</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a37f1bbb0367901e3f8b79dfb4d764e8e</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onObjectCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ae56a395c13ead1ca472909d9d1f77993</anchor>
      <arglist>(const Callback&lt; GridObject *, GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onBorderCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8a29c1e5ea9348913794d21428197b13</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTileCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6a0ec54bb9214803536761cc7cd9a18a</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static KeyboardGridMover::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_keyboard_grid_mover.html</anchorfile>
      <anchor>a00c3eabdb0b35c373aa816450d947e9f</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *target=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Event::KeyEvent</name>
    <filename>structime_1_1_event_1_1_key_event.html</filename>
    <member kind="variable">
      <type>input::Keyboard::Key</type>
      <name>code</name>
      <anchorfile>structime_1_1_event_1_1_key_event.html</anchorfile>
      <anchor>a03af97bb34963c2d93f3aafb38984991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>alt</name>
      <anchorfile>structime_1_1_event_1_1_key_event.html</anchorfile>
      <anchor>a2541386801d0fd0e7615dea3b880ad12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>control</name>
      <anchorfile>structime_1_1_event_1_1_key_event.html</anchorfile>
      <anchor>aed44dcc560e34936518c7ab6b2e806a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>shift</name>
      <anchorfile>structime_1_1_event_1_1_key_event.html</anchorfile>
      <anchor>a9956955df88d2c37a3bf677bd6e78a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>system</name>
      <anchorfile>structime_1_1_event_1_1_key_event.html</anchorfile>
      <anchor>a2d4502691897ea8df97efb6649055292</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::Label</name>
    <filename>classime_1_1ui_1_1_label.html</filename>
    <base>ime::ui::Widget</base>
    <member kind="enumeration">
      <type></type>
      <name>HorizontalAlignment</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a3f9712d608904666a67e14cd4dcb03ba</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1ui_1_1_label.html" anchor="a3f9712d608904666a67e14cd4dcb03baa945d5e233cf7d6240f6b783b36a374ff">Left</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_label.html" anchor="a3f9712d608904666a67e14cd4dcb03baa4f1f6016fc9f3f2353c0cc7c67b292bd">Center</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_label.html" anchor="a3f9712d608904666a67e14cd4dcb03baa92b09c7c48c520c3c55e497875da437c">Right</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>VerticalAlignment</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a1db4623bcd1b8920709e3f254988eb42</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1ui_1_1_label.html" anchor="a1db4623bcd1b8920709e3f254988eb42aa4ffdcf0dc1f31b9acaf295d75b51d00">Top</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_label.html" anchor="a1db4623bcd1b8920709e3f254988eb42a4f1f6016fc9f3f2353c0cc7c67b292bd">Center</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_label.html" anchor="a1db4623bcd1b8920709e3f254988eb42a2ad9d63b69c4a10a5cc9cad923133bc4">Bottom</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Label &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a84681d48597f58fc39f25cbb1b8be269</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Label &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a91f194390f4c51c23bbd3a8ccf7fdb2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Label</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a48e9b501e7c722db5c142bed278b5ca2</anchor>
      <arglist>(const Label &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Label &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>ad6896a0225c16bcc0d64548a90fe787a</anchor>
      <arglist>(const Label &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Label</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>abae991a43b0391352bc6c08762a71fda</anchor>
      <arglist>(Label &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Label &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a8900d79ccb3992bc11ee7acc4bfd0c0a</anchor>
      <arglist>(Label &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Label::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a8b258be7acc760f71dea798fad7d917b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LabelRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>ab2a47e36ac7b136b15ba2d8b7348b586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>af6f332f438ff3362e79f65d642ad9ae4</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a41fd662492f6b4f607970d1b5894feee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHorizontalAlignment</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a00fe050a70ff987ffbf79f5c999fe176</anchor>
      <arglist>(HorizontalAlignment alignment)</arglist>
    </member>
    <member kind="function">
      <type>HorizontalAlignment</type>
      <name>getHorizontalAlignment</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>aeedcde8ea8de997ed5fe7b46f95529bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerticalAlignment</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>ad1b2ae10ba755873659862756fb499a8</anchor>
      <arglist>(VerticalAlignment alignment)</arglist>
    </member>
    <member kind="function">
      <type>VerticalAlignment</type>
      <name>getVerticalAlignment</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>adc85a4781e8fcf09f96ec684dc74a871</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoSize</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a37396fb12896ad31bdd5a259323fd380</anchor>
      <arglist>(bool autoSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAutoSize</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>aceb7610de73de26c1429e164635986cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumTextWidth</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a2bb47cd8d3532e344f8fe4a27461548d</anchor>
      <arglist>(float maximumWidth)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMaximumTextWidth</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a07a8a0b7e0fcb75befc7f2fec9e864b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a7e76739a1ae646032775ec65e4367dff</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>aef81cd4488268625a52f9b3195804ce0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Label</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a74ec50664a8a1aadc5ad228054e5c5a5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Label::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_label.html</anchorfile>
      <anchor>a73faeff9475dcaf33e586b7da77a904f</anchor>
      <arglist>(const std::string &amp;text=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::LabelRenderer</name>
    <filename>classime_1_1ui_1_1_label_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; IWidgetRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_i_widget_renderer.html</anchorfile>
      <anchor>a57539c67aec409d457c571a46fc105bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a2a2c6490274611836fe1c64f1aa27f86</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a95f336e98cc22fd5e7f7399c29646fe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPadding</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>aa0e996c22618f7ae5d2d658ce480cb6f</anchor>
      <arglist>(const Padding &amp;padding)</arglist>
    </member>
    <member kind="function">
      <type>Padding</type>
      <name>getPadding</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>abc5edd3dabe409554af9b52b892b547d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColour</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a600607f5b99a0768597b165509c4c8f3</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColour</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>ab663b35e225f63e10e5440dc706f0f29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a35bf82007f0f8f8fe6f475bf8c5b9650</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a205f72cb1cd3820e829c9b4f0c194f6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a311e7878a14639d2e16b3d6712573017</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a2fa97bc2358a6ea39aef497cf9e0e063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a4b98ddbb54d3e1e69c80c43b0e84b05c</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>ace2fd37eea20930f3a354b92e6206496</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextOutlineColour</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>aad700a81acc7cf1576f6682a974bc9a1</anchor>
      <arglist>(Colour outlineColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextOutlineColour</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>af7ad8c5a7424d91a68796c063f90c553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextOutlineThickness</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>af11621a010323589a40dd32a1af634a9</anchor>
      <arglist>(float outlineThickness)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTextOutlineThickness</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a770d6f43583d364deb555993a6a53cc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundTexture</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a5ea8c4f597976240652a947a5858c7b8</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollbarWidth</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a2d67d0fd6460d843ae20a8c69e9939f2</anchor>
      <arglist>(float scrollbarWidth)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScrollbarWidth</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>ab7128a7468267d13495799161c4bd504</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>acd7e36b863bc49a8b7f2d981214f570e</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>af8050bb86c7102a6ef1b2b29fd84a006</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>ae09ca4f5e5118c163e9ffab7b064b2fa</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>aad95b60582b858c80586f7fe46cbeaeb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>ad630372b12caa0cfcab90bf2851acba2</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a71d248d25d6709689cb2dab7cbde2239</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a7e3ecf6152ad58569e531403c7e03cfc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>ad0dba5a10a7d00fa66df034a4bf89b9a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LabelRenderer</name>
      <anchorfile>classime_1_1ui_1_1_label_renderer.html</anchorfile>
      <anchor>a5fde4f2086be587e4135f833a4d307f5</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::MenuBar</name>
    <filename>classime_1_1ui_1_1_menu_bar.html</filename>
    <base>ime::ui::Widget</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MenuBar &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>ac449fa8cc9d37fcc47b765ecbcde0935</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const MenuBar &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a00ac10a8a225530cef970ccf46cfcb3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MenuBar</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a3969c5df6442166476bd85badaeb64d2</anchor>
      <arglist>(const MenuBar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MenuBar &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>ab7c9d66f6faa9aa5c87ae453bce27a20</anchor>
      <arglist>(const MenuBar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MenuBar</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a3897a40382aff312f2dd2ef4b48ba1b4</anchor>
      <arglist>(MenuBar &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MenuBar &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>aac4247f8a7659653e78fbf935be253c4</anchor>
      <arglist>(MenuBar &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MenuBar::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a9750969f82769213bb9154dc0ca4c03e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a58262a2f114feb7f490601d9e0b59941</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>MenuBarRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a99407dc2d4a4b4753934edfa8148a30d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMenu</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a699250a53994e71f7615135fc4380896</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMenus</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a552eca6f92ff429bb3f729defba1df26</anchor>
      <arglist>(const std::initializer_list&lt; std::string &gt; &amp;menus)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addMenuItem</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a8ab534eb5f9e1364b380dd8c2af6d4fe</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addMenuItem</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>aa6b5372ef180d1cb8e57a9fae95c0267</anchor>
      <arglist>(const std::string &amp;menu, const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addMenuItem</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a408679ad0c64d6af08e5b3b33a4e5d91</anchor>
      <arglist>(const std::initializer_list&lt; std::string &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllMenus</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>afbb8b477472c1f7268c2e44477984164</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeMenu</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a87f23ee68ebfd9390b6f5e7e553d83dd</anchor>
      <arglist>(const std::string &amp;menu)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeMenuItem</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a6e866961c83235d600b86e1dc4b8d30b</anchor>
      <arglist>(const std::string &amp;menu, const std::string &amp;menuItem)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeMenuItem</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a1922af102b6db47d95a7ceb66b4a1e54</anchor>
      <arglist>(const std::initializer_list&lt; std::string &gt; &amp;hierarchy, bool removeParentsWhenEmpty=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeMenuItems</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a7f4302f1452140286d6feb62b7382ab5</anchor>
      <arglist>(const std::string &amp;menu)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeSubMenuItems</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a05808ab9057dd8df0bb5727773431518</anchor>
      <arglist>(const std::initializer_list&lt; std::string &gt; &amp;hierarchy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMenuEnable</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>ae62603a2497548b7ee764a5fdc61388f</anchor>
      <arglist>(const std::string &amp;menu, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMenuEnabled</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>afc256760aaec6d30d4b2ab6d1386e5c7</anchor>
      <arglist>(const std::string &amp;menu) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMenuItemEnable</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a59995fecdeb2bf33dffd501e10e1c79c</anchor>
      <arglist>(const std::string &amp;menu, const std::string &amp;menuItem, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMenuItemEnable</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>ab1bd80a7d7a49e9ddce88c1ebdbb3554</anchor>
      <arglist>(const std::initializer_list&lt; std::string &gt; &amp;hierarchy, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMenuItemEnabled</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a237b9055cba3fdde32b66726558a44e3</anchor>
      <arglist>(const std::string &amp;menu, const std::string &amp;menuItem) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMenuItemEnabled</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>aba4d83cf4fb1451f5757527cfbb8828b</anchor>
      <arglist>(const std::initializer_list&lt; std::string &gt; &amp;hierarchy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumSubMenuWidth</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>aaa0d3d110a1aecf197d89fdfa5aef8c5</anchor>
      <arglist>(float minimumWidth)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMinimumSubMenuWidth</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a1a19cd6e4efecfd7e14e49d102404ce5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invertMenuDirection</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a3feb9fb142e601296447e1725f42cf5b</anchor>
      <arglist>(bool invert)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMenuDirectionInverted</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>af20cbf8b23d677717da523bcd32b2db1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>closeMenu</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>ac6bbe7fac6faf2d6b451712a5e12da0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a95a7380e1d96e0a3a3c324f5dcf65bfd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuBar</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a9eaec5ced923361993bd7d65603da4ca</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MenuBar::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar.html</anchorfile>
      <anchor>a0dec1c720827d9842a8ea21fa3052886</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::MenuBarRenderer</name>
    <filename>classime_1_1ui_1_1_menu_bar_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; MenuBarRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a8c587ad4d6aa2198f0ebbd3fd452bd8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a202ab262d67e258f91af4c8ac5a5cb8e</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a0e2d79d54555b5e59bd1c051535bb714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>aa2075bbd7cfc45154c99dacccd877c91</anchor>
      <arglist>(Colour backgroundColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a8e2f8c609840a50afc8a1067901d30f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>abdbdd8a63999ed28f75768c83a8bb984</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a396e72e7881b85c32e9a0ed6ff1b4524</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a95fcd1588b21ccfbd66c9e711dc7f057</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>aa18f4343c52d519203ffe6df1aeb070e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a32ac8c736b44a3d37c681e0e15425e57</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a985f0bbeb33d841591f324fcc87da13c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundTexture</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a7c1cff0c6fca33ffc7c7017befc08f3f</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setItemBackgroundTexture</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a5cffce7322c1fbcf0a2c10a60db100d2</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedItemBackgroundTexture</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>add932def54551c1acea727503b2b4549</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceToSide</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a4c2c186c20c2e9f0620101cb9acbb12b</anchor>
      <arglist>(float distanceToSide)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDistanceToSide</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>ae1506af1092846f8148acc45288d8dde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a43c5c6ffaaa39423fa362792d4463686</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a5a006bdb1ae463609030bd5d12b76bdb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a263ca1d392c04cebbb787cb0cbaa89b4</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>aacf111b1f6d82297d799dcac2c4d678b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a66dc736c2fdb7c19eabb3152b5a19a1b</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>ad73c4b6fd0d89966e3649cd0b41329e7</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a225d0e26a77db3f06a4888e3d4ebe116</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a096f4bfef2b7ba9b71c20d0d688a00d1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MenuBarRenderer</name>
      <anchorfile>classime_1_1ui_1_1_menu_bar_renderer.html</anchorfile>
      <anchor>a099b7c5eef1b5b91672d8ff075862e94</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::MessageBox</name>
    <filename>classime_1_1ui_1_1_message_box.html</filename>
    <base>ime::ui::WidgetContainer</base>
    <member kind="enumeration">
      <type></type>
      <name>TitleAlignment</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a60bc90304b52d4562cccaa2ea1e07671</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1ui_1_1_message_box.html" anchor="a60bc90304b52d4562cccaa2ea1e07671a945d5e233cf7d6240f6b783b36a374ff">Left</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_message_box.html" anchor="a60bc90304b52d4562cccaa2ea1e07671a4f1f6016fc9f3f2353c0cc7c67b292bd">Center</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_message_box.html" anchor="a60bc90304b52d4562cccaa2ea1e07671a92b09c7c48c520c3c55e497875da437c">Right</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; MessageBox &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>aa7d0d84912c02108fbdbef7eb3b0b50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const MessageBox &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a96cacca2ce9f132bfe85a08559400c8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageBox</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a03b040ebe251fe8c04ef0ff54a2313ea</anchor>
      <arglist>(const MessageBox &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MessageBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a34d49b66bcc2a0d9939fde295bc1b882</anchor>
      <arglist>(const MessageBox &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageBox</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a0ea2462cd41a5e9908722aeeb75b221d</anchor>
      <arglist>(MessageBox &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MessageBox &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a79bfe0cc7218815bba687ccc4d305810</anchor>
      <arglist>(MessageBox &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>MessageBox::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a9b324ba0c562079106a640198ea8590a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a9fa4f81a5a0023dcc15aa502199395ec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>MessageBoxRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a2c96c8e3c1a2b43c060365e256d20393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>ae1cbad938b7a05f363ab938737185ad8</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>adf187536a42e74bf4a5e10ebef3f4db9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addButton</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>afe8f3b60aa1a41d28f13b50c00c9d3ca</anchor>
      <arglist>(const std::string &amp;buttonCaption)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClientSize</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a5ccbc35060bb0d93784a24830c79275a</anchor>
      <arglist>(Vector2f size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getClientSize</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a192e10f93f71e10358589c2d21b5c74d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumSize</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a6f5700404ce58ad1978a5d34be0ccd38</anchor>
      <arglist>(Vector2f size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getMaximumSize</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a55e79a67491a03349c605af6c6c06a28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumSize</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>aa1f8a7c50ba4b3f291061e2138ad886a</anchor>
      <arglist>(Vector2f size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getMinimumSize</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a50cc80ffe11c49f6a38aee856cffd3a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitle</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a964bbd132017693a2c5e1d5693d8472a</anchor>
      <arglist>(const std::string &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTitle</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a2b455f6119f318f760c08faa0ad5f031</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleTextSize</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>ae5fb3c69bdffdb60a21626bc310bb60f</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTitleTextSize</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a651e6229b3d65b53d7f09d765744590d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleAlignment</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>ac6b6dd7f3192dcf47b9b8fb90090cda5</anchor>
      <arglist>(TitleAlignment alignment)</arglist>
    </member>
    <member kind="function">
      <type>TitleAlignment</type>
      <name>getTitleAlignment</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a21cd56950a1051e891cb66a4a3e5f8d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleButtons</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a6a6b528dea9d5d290f5c7000a44cabf2</anchor>
      <arglist>(unsigned int buttons)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a1654b1d164413ce30ff9f6f597f80e5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>ac87c6244f83c171a7f37d50b4bca54a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setResizable</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a9098101053c11a05e3337d727fdc8ae6</anchor>
      <arglist>(bool resizable=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isResizable</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>ac8d61575916e571570a530e24e79a99f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDraggable</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a7fbc2ecd1ab731091493efdf60e5e0f6</anchor>
      <arglist>(bool draggable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDraggable</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>ace6cebb616db9d86e80ac45290e78f73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKeepInParent</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a8c680ce228f51d77963ada889279dfc5</anchor>
      <arglist>(bool enabled=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isKeptInParent</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>aa8dd3c2a6c8662cb07d0613408c646f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>abdf6c07a4590c0efd0a707ad960d3a39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessageBox</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>adba943325688f85f95a41dfbcbe2bdf1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a655ee1010db960c007c2be5e32a4ca25</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7b4149560be75c68d9874bb650cd1a20</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aab8793c4004717e8a3df985cfa86e22d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a6dbb5d766d355a14f4b68501bb36e703</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetAtPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ac0ffedec6aaa059237db9900a454a064</anchor>
      <arglist>(Vector2f pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8894e84e51733d3be13054df9a4f60e5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a24e9c179de1f8f39ca6c15dd1ab97b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ae071b10b1dd275b7b21b2dc8e0b045f2</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ab8fa96eadd34575b8a2a84923391895b</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ad398e39dc582f530bfd0492566eaa261</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8fcd040ece49ba681d4a49e33222a0c9</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a0826fe366a440cde9efb62dc520cd414</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>abd9db967affeef6e89ec3635a28e5504</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a5c5447ea7d1ffd6e87f2bbe2a935d146</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a294427255e4ed49aa2cf150e7d3d2a6e</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa0f983e4503190f75648b4c68dd44235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedLeaf</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a3ca1a14ea74975a02def0b1245705546</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusNextWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7e0bf072b5396208fc7ca2a8705490c0</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusPreviousWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa48887ce4b7f524910f21d34d9e061ed</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a530b03d553311b0321417543408a04e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a1046a4c1183e1bdfd0a9f15d551c3fa1</anchor>
      <arglist>(const Callback&lt; Widget * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MessageBox::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_message_box.html</anchorfile>
      <anchor>a58c813c184baa659aae85fcb5a841585</anchor>
      <arglist>(const std::string &amp;title=&quot;&quot;, const std::string &amp;text=&quot;&quot;, const std::initializer_list&lt; std::string &gt; &amp;buttons={})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::MessageBoxRenderer</name>
    <filename>classime_1_1ui_1_1_message_box_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; MessageBoxRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>aa4c182418ac779920563e55594f04a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a3c7b4deae93c5d1ec847d931addb178a</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>afedfe991820269aabb77db79e91e1896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a392e1bbc4929c3e31b1e8687c6a7e270</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a263109fc0d0e436cc9f09f961ea85798</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarHeight</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>aa79e99f31ae0106d523092aa749b3d56</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTitleBarHeight</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>ac95bf541ed31340c424468e206b09e7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleBarColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a4d930592b0d9d46ee515a482672819f6</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTitleBarColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>ab40879db01e6f964ef3ce4bc785336ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitleColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a4ff9d3c5d256ac6d3db9af113c1dc57a</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTitleColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a349e5888d09aba4def9dab868d873b49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>ae4396f980dc34f6073220321926df3ca</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a7f5701f48d55448b6642f301b67d6816</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a079a82ed8e50878be97ff13f38350eee</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a2c009771d2f613418a6b82ee9c48c0b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>aef0f0346a03f44d2a3548dae69695131</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColourFocused</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a9872f2c32cb8d9ebb4559d8fd837ecb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderBelowTitleBar</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a1a46c5c67aa4a6d82bc8ac00241344c4</anchor>
      <arglist>(float border)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getBorderBelowTitleBar</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>aeef78709f3aeb334bc8a41df99e45ccc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceToSide</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a25e3a32b790c923d6fde15e362ac45aa</anchor>
      <arglist>(float distanceToSide)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDistanceToSide</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a2556d6ec2d02708bfafa834bb1764651</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPaddingBetweenButtons</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>ae6ab33cc65720e9972c6a5064ce6c921</anchor>
      <arglist>(float padding)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPaddingBetweenButtons</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>aace091588c624bf68e1fa1fc4963d8b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumResizableBorderWidth</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>aeb4df546f33e42aa76e67022a661b269</anchor>
      <arglist>(float minimumBorderWidth)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMinimumResizableBorderWidth</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a8d9b74149dc2e7df0f6859ebe5725384</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setShowTextOnTitleButtons</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>ab3307f9e13d3783abf1374b9f2b02925</anchor>
      <arglist>(bool showText)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextShownOnTitleButtons</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a56fb5c020e1b1e46c3dcdba313fe735d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureTitleBar</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a7879a30ee19450b4b0e147d6b48abdb1</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureBackground</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a60050a9b5c00a03ceec6bd363e856c98</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a4770fa5dc335fa4526a83a8b10a3218d</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a6f5c96e01ded8dce5d82356679408940</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a1931e474f64438b98b535d3f4aa055c2</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a1d5c128cdb56a08f0de8ddaae1658b4a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a98dd593d473eb54aa8dfdb0ac462e584</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a6f136a1bb3c9a560a4b346639da1fdd4</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>ab1c406d684cea25fb1350eb4f930e9ec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>a39fe51e950d93f525562f140c1aeafd0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MessageBoxRenderer</name>
      <anchorfile>classime_1_1ui_1_1_message_box_renderer.html</anchorfile>
      <anchor>ab63ff598851c3b19a84732b1dda69a58</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::input::Mouse</name>
    <filename>classime_1_1input_1_1_mouse.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Button</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>af7b0555038fa8c7c5a1a5a6a1e8fdbb4</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1input_1_1_mouse.html" anchor="af7b0555038fa8c7c5a1a5a6a1e8fdbb4a945d5e233cf7d6240f6b783b36a374ff">Left</enumvalue>
      <enumvalue file="classime_1_1input_1_1_mouse.html" anchor="af7b0555038fa8c7c5a1a5a6a1e8fdbb4a92b09c7c48c520c3c55e497875da437c">Right</enumvalue>
      <enumvalue file="classime_1_1input_1_1_mouse.html" anchor="af7b0555038fa8c7c5a1a5a6a1e8fdbb4ab1ca34f82e83c52b010f86955f264e05">Middle</enumvalue>
      <enumvalue file="classime_1_1input_1_1_mouse.html" anchor="af7b0555038fa8c7c5a1a5a6a1e8fdbb4aac8e5aa1a680bd64e6fb9313db5b4428">XButton1</enumvalue>
      <enumvalue file="classime_1_1input_1_1_mouse.html" anchor="af7b0555038fa8c7c5a1a5a6a1e8fdbb4a7af9d9a16f813c045a3dbe8068a13f4d">XButton2</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Wheel</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>a39b8b3b0985ca6a3829fa6285fd3a421</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1input_1_1_mouse.html" anchor="a39b8b3b0985ca6a3829fa6285fd3a421a695858d32a63424adbc8d0029d8a9a57">VerticalWheel</enumvalue>
      <enumvalue file="classime_1_1input_1_1_mouse.html" anchor="a39b8b3b0985ca6a3829fa6285fd3a421a4a394b42bdae148b7e361a23cb1d2f91">HorizontalWheel</enumvalue>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnable</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>a7b589e718298ce99994a25754db0faf1</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>a6b01974e0fd2d06da29b24f82ee6f07c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onButtonUp</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>acdfc970a635e8d3400c779e5e15da816</anchor>
      <arglist>(Callback&lt; Button, int, int &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onButtonUp</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>a39e85046e83780f949d7727643243eb1</anchor>
      <arglist>(Callback&lt; Button &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onButtonDown</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>a9a0e8142da4427ab4c4e8565d993f468</anchor>
      <arglist>(Callback&lt; Button, int, int &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onButtonDown</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>aca58efc79cdcd597eeaeb969675d0af3</anchor>
      <arglist>(Callback&lt; Button &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMouseMove</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>aab988bd89d0960e45116811276a94278</anchor>
      <arglist>(Callback&lt; int, int &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onWheelScroll</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>a2e2f897517f6a2235822bb24bb677cd0</anchor>
      <arglist>(Callback&lt; Wheel, float, int, int &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>a44da93041e136df39e60a31da011b4e7</anchor>
      <arglist>(MouseEvent event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>buttonToString</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>a379382ed810237eda6c937b65ac1e6cc</anchor>
      <arglist>(Button button)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Button</type>
      <name>stringToButton</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>a822560315f0ad5b3250f95c219163dec</anchor>
      <arglist>(const std::string &amp;button)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isButtonPressed</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>afe69d6c09249bf0d26ba9fe0bd7bb24a</anchor>
      <arglist>(Button button)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>af864e134a2c28d6b7b8250ee5545231c</anchor>
      <arglist>(const Vector2i &amp;position)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector2i</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1input_1_1_mouse.html</anchorfile>
      <anchor>afd1c53b240f7462b9a24843daa4823ae</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Event::MouseButtonEvent</name>
    <filename>structime_1_1_event_1_1_mouse_button_event.html</filename>
    <member kind="variable">
      <type>input::Mouse::Button</type>
      <name>button</name>
      <anchorfile>structime_1_1_event_1_1_mouse_button_event.html</anchorfile>
      <anchor>a703f799d6b99ed56955c540d8762d624</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>structime_1_1_event_1_1_mouse_button_event.html</anchorfile>
      <anchor>afffcbc7b29a75697de98e12f0cec8844</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>structime_1_1_event_1_1_mouse_button_event.html</anchorfile>
      <anchor>ad2346d1238db1ca8efd2772f277c7297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Event::MouseMoveEvent</name>
    <filename>structime_1_1_event_1_1_mouse_move_event.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>structime_1_1_event_1_1_mouse_move_event.html</anchorfile>
      <anchor>ad7b4a097b70aa14f7cf550dff5a64660</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>structime_1_1_event_1_1_mouse_move_event.html</anchorfile>
      <anchor>aa26383dda082546155492fcafcdeda66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Event::MouseWheelScrollEvent</name>
    <filename>structime_1_1_event_1_1_mouse_wheel_scroll_event.html</filename>
    <member kind="variable">
      <type>input::Mouse::Wheel</type>
      <name>wheel</name>
      <anchorfile>structime_1_1_event_1_1_mouse_wheel_scroll_event.html</anchorfile>
      <anchor>aebb51acafd33e88f5bac5b0bce931f0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>delta</name>
      <anchorfile>structime_1_1_event_1_1_mouse_wheel_scroll_event.html</anchorfile>
      <anchor>a3f0301f7b6cdc8481b3080ad8877bc84</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>structime_1_1_event_1_1_mouse_wheel_scroll_event.html</anchorfile>
      <anchor>a08bd6933b965a75248897c1d65294e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>structime_1_1_event_1_1_mouse_wheel_scroll_event.html</anchorfile>
      <anchor>a22cdea943f4b739f0ff2cd29e82b2235</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::audio::Music</name>
    <filename>classime_1_1audio_1_1_music.html</filename>
    <base>ime::audio::Audio</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Object &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ad7bb736ac3c2213c99521958fd75c289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Music</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a8f3ace67d950eac1abadf4509ca11668</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Music</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>ab5cfc098df8c9a956d92202c3aeee1bc</anchor>
      <arglist>(const Music &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Music &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a19b1ca5dfc59a59b703777138a7d2dae</anchor>
      <arglist>(const Music &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Music</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>ab08d4c0a6422a632c65941571d914287</anchor>
      <arglist>(Music &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Music &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a932365c9c0aece142709c15ecd13de89</anchor>
      <arglist>(Music &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a05c4a30e5460e892e106c4942b046553</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>ae901c7825c9ba82533b07aaec10d895b</anchor>
      <arglist>(const std::string &amp;source) override</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSource</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a88df847afc014c859522b3684ba99dd9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a48664fbedd3d4e7cf9bb6661a3a4eed6</anchor>
      <arglist>(float volume) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolume</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>ac47675f6d5b45a67836eb46dee2b4cdc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPitch</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>aa4f6336cd831b196e4a693488e31f93c</anchor>
      <arglist>(float pitch) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPitch</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>af713cd07c54a6fc3e3be4f66d5f881db</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoop</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>aa471bb34ba5384f2b7dbf430b7a2913d</anchor>
      <arglist>(bool isLooped) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooped</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>addac5804ef498f6835c749fb20172094</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seek</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>ace303fb229593dae49a72c5c0e3fe719</anchor>
      <arglist>(const Time &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getPlayingPosition</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a9956b894aafcf281522713511cdf9968</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a197f0c04d327f10e45adea8f84b6f40d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a3d567ebbccf7b8d33421f323d36cc83f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a22047d3266eb13c1bdfcf44047e2cd78</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getDuration</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>aaf5ceb5336c3c78ec2035f3a6d5f54e9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>getStatus</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>acf49a914684d13d6627fb134b1aa1fbb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Music</name>
      <anchorfile>classime_1_1audio_1_1_music.html</anchorfile>
      <anchor>a155cd6f00251598b8d69d666a7359fe0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>aceed0b98ff7d86e61f52c53e0ba778ca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustVolume</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a7ea0e35e6f8849c1732eab2a3355855a</anchor>
      <arglist>(float offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMute</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a641456dc11a33b6bea9bcfddaeb6e806</anchor>
      <arglist>(bool mute)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuted</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>aa106dfe9809c7381947c93b70db2ee94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a882d301183c31f0a79c1171bbe2974e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::IPathFinderStrategy::Node</name>
    <filename>structime_1_1_i_path_finder_strategy_1_1_node.html</filename>
    <member kind="variable">
      <type>Index</type>
      <name>parent</name>
      <anchorfile>structime_1_1_i_path_finder_strategy_1_1_node.html</anchorfile>
      <anchor>a40c9f08cd255126a0a20d2110ee90065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Index</type>
      <name>index</name>
      <anchorfile>structime_1_1_i_path_finder_strategy_1_1_node.html</anchorfile>
      <anchor>a91d88e1fedaa1c8b844c76747d187a22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Object</name>
    <filename>classime_1_1_object.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Object &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ad7bb736ac3c2213c99521958fd75c289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13ddc31e6774aa9874462bd27e02c434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>adf304494f64b76c800d24434a605c498</anchor>
      <arglist>(const Object &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Object &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a8b085f404216611c35fbed7acb04745b</anchor>
      <arglist>(const Object &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Object</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>abcaa0f57d270008496f9be7a85920f47</anchor>
      <arglist>(Object &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Object &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aeb049d8a34ac55e4bcc931f5419c6a17</anchor>
      <arglist>(Object &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a893e90e8498458bd9d43fe9041a22f02</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a8c3d545176c422a07532de6e2eb35f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Object</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aa7a4f63c9a0d2af966924e70adfc2f5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ObjectContainer</name>
    <filename>classime_1_1_object_container.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae027bfc00fd139103849934bde296ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const T *)&gt;</type>
      <name>Predicate</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aab7510136cf7c452265d68aeac0f2615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>ObjectPtr</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5ae3d51bd034b26d8e7b857f62a5a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4ad64370df758bc73e3285042bd4490f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a720e5876be1938eb64d81b85b0d7bfff</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa612e868bccd0a0557311c5014ae6bde</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a083bcd53b7787fe3839c89844db137a9</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a779ab019d89ce737d4f55e0d2a86205c</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addObject</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af7fac8243327b97e4baea47e5528a006</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e46a10f020a21343f16b17a4f968e0c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9881b0537079eb48b07b7a1df0d2baad</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a13d6369c75c11ea680638b57d6922a72</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>add3afc05c6675aac6cc20a218015e542</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>findIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a8845c3d878a185cc4d07768c69ed027b</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ad55ca785fbfd6feb6408312803a5b1a4</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a26673a494a7b5265c6094e81583b37b4</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a258a49c10d0deac2345c78db5ab3ac9c</anchor>
      <arglist>(T *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af3eaf2bdab65f58c225b7aecd4879f84</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5913d605d157e07cfb1b1851d0cf903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa6b9a6116c166ce9a3ac513294888522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; T &gt; &amp;</type>
      <name>createGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a21e94370d66299d7e57dfdc9a2b1187c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; T &gt; &amp;</type>
      <name>getGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae5a6f15c8967a2c9914a3cfd6d35002c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9b9cd5119bf65be01dc8083aad2c4d75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5df7f17e840f96fcc6313392af7365d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllGroups</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4543480f98f131bf7421850bb32dbfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e93114f2ccfa2ce16256e27837324c0</anchor>
      <arglist>(const Callback&lt; T * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5c5405235df37dc8aaf313e52fd164b3</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; T * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachNotInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ab4160521ba9f9b945fbc82b45f4a29b9</anchor>
      <arglist>(const Callback&lt; T * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a3935b0a439fdabd7381476b440a0b3c0</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectContainer&lt; Camera &gt;</name>
    <filename>classime_1_1_object_container.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae027bfc00fd139103849934bde296ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const Camera *)&gt;</type>
      <name>Predicate</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aab7510136cf7c452265d68aeac0f2615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Camera &gt;</type>
      <name>ObjectPtr</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5ae3d51bd034b26d8e7b857f62a5a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4ad64370df758bc73e3285042bd4490f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a720e5876be1938eb64d81b85b0d7bfff</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a083bcd53b7787fe3839c89844db137a9</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa612e868bccd0a0557311c5014ae6bde</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a779ab019d89ce737d4f55e0d2a86205c</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>addObject</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af7fac8243327b97e4baea47e5528a006</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e46a10f020a21343f16b17a4f968e0c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9881b0537079eb48b07b7a1df0d2baad</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a13d6369c75c11ea680638b57d6922a72</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>add3afc05c6675aac6cc20a218015e542</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>Camera *</type>
      <name>findIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a8845c3d878a185cc4d07768c69ed027b</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ad55ca785fbfd6feb6408312803a5b1a4</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a26673a494a7b5265c6094e81583b37b4</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a258a49c10d0deac2345c78db5ab3ac9c</anchor>
      <arglist>(Camera *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af3eaf2bdab65f58c225b7aecd4879f84</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5913d605d157e07cfb1b1851d0cf903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa6b9a6116c166ce9a3ac513294888522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; Camera &gt; &amp;</type>
      <name>createGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a21e94370d66299d7e57dfdc9a2b1187c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; Camera &gt; &amp;</type>
      <name>getGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae5a6f15c8967a2c9914a3cfd6d35002c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9b9cd5119bf65be01dc8083aad2c4d75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5df7f17e840f96fcc6313392af7365d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllGroups</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4543480f98f131bf7421850bb32dbfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e93114f2ccfa2ce16256e27837324c0</anchor>
      <arglist>(const Callback&lt; Camera * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5c5405235df37dc8aaf313e52fd164b3</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; Camera * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachNotInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ab4160521ba9f9b945fbc82b45f4a29b9</anchor>
      <arglist>(const Callback&lt; Camera * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a3935b0a439fdabd7381476b440a0b3c0</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectContainer&lt; GameObject &gt;</name>
    <filename>classime_1_1_object_container.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae027bfc00fd139103849934bde296ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const GameObject *)&gt;</type>
      <name>Predicate</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aab7510136cf7c452265d68aeac0f2615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GameObject &gt;</type>
      <name>ObjectPtr</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5ae3d51bd034b26d8e7b857f62a5a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4ad64370df758bc73e3285042bd4490f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a720e5876be1938eb64d81b85b0d7bfff</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a083bcd53b7787fe3839c89844db137a9</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa612e868bccd0a0557311c5014ae6bde</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a779ab019d89ce737d4f55e0d2a86205c</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>addObject</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af7fac8243327b97e4baea47e5528a006</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e46a10f020a21343f16b17a4f968e0c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9881b0537079eb48b07b7a1df0d2baad</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a13d6369c75c11ea680638b57d6922a72</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>add3afc05c6675aac6cc20a218015e542</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>findIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a8845c3d878a185cc4d07768c69ed027b</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ad55ca785fbfd6feb6408312803a5b1a4</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a26673a494a7b5265c6094e81583b37b4</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a258a49c10d0deac2345c78db5ab3ac9c</anchor>
      <arglist>(GameObject *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af3eaf2bdab65f58c225b7aecd4879f84</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5913d605d157e07cfb1b1851d0cf903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa6b9a6116c166ce9a3ac513294888522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; GameObject &gt; &amp;</type>
      <name>createGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a21e94370d66299d7e57dfdc9a2b1187c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; GameObject &gt; &amp;</type>
      <name>getGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae5a6f15c8967a2c9914a3cfd6d35002c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9b9cd5119bf65be01dc8083aad2c4d75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5df7f17e840f96fcc6313392af7365d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllGroups</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4543480f98f131bf7421850bb32dbfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e93114f2ccfa2ce16256e27837324c0</anchor>
      <arglist>(const Callback&lt; GameObject * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5c5405235df37dc8aaf313e52fd164b3</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; GameObject * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachNotInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ab4160521ba9f9b945fbc82b45f4a29b9</anchor>
      <arglist>(const Callback&lt; GameObject * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a3935b0a439fdabd7381476b440a0b3c0</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectContainer&lt; GridMover &gt;</name>
    <filename>classime_1_1_object_container.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae027bfc00fd139103849934bde296ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const GridMover *)&gt;</type>
      <name>Predicate</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aab7510136cf7c452265d68aeac0f2615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; GridMover &gt;</type>
      <name>ObjectPtr</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5ae3d51bd034b26d8e7b857f62a5a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4ad64370df758bc73e3285042bd4490f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a720e5876be1938eb64d81b85b0d7bfff</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a083bcd53b7787fe3839c89844db137a9</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa612e868bccd0a0557311c5014ae6bde</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a779ab019d89ce737d4f55e0d2a86205c</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>GridMover *</type>
      <name>addObject</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af7fac8243327b97e4baea47e5528a006</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GridMover *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e46a10f020a21343f16b17a4f968e0c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9881b0537079eb48b07b7a1df0d2baad</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>GridMover *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a13d6369c75c11ea680638b57d6922a72</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>add3afc05c6675aac6cc20a218015e542</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>GridMover *</type>
      <name>findIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a8845c3d878a185cc4d07768c69ed027b</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ad55ca785fbfd6feb6408312803a5b1a4</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a26673a494a7b5265c6094e81583b37b4</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a258a49c10d0deac2345c78db5ab3ac9c</anchor>
      <arglist>(GridMover *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af3eaf2bdab65f58c225b7aecd4879f84</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5913d605d157e07cfb1b1851d0cf903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa6b9a6116c166ce9a3ac513294888522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; GridMover &gt; &amp;</type>
      <name>createGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a21e94370d66299d7e57dfdc9a2b1187c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; GridMover &gt; &amp;</type>
      <name>getGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae5a6f15c8967a2c9914a3cfd6d35002c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9b9cd5119bf65be01dc8083aad2c4d75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5df7f17e840f96fcc6313392af7365d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllGroups</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4543480f98f131bf7421850bb32dbfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e93114f2ccfa2ce16256e27837324c0</anchor>
      <arglist>(const Callback&lt; GridMover * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5c5405235df37dc8aaf313e52fd164b3</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; GridMover * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachNotInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ab4160521ba9f9b945fbc82b45f4a29b9</anchor>
      <arglist>(const Callback&lt; GridMover * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a3935b0a439fdabd7381476b440a0b3c0</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ObjectContainer&lt; ime::audio::Audio &gt;</name>
    <filename>classime_1_1_object_container.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae027bfc00fd139103849934bde296ede</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const ime::audio::Audio *)&gt;</type>
      <name>Predicate</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aab7510136cf7c452265d68aeac0f2615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ime::audio::Audio &gt;</type>
      <name>ObjectPtr</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5ae3d51bd034b26d8e7b857f62a5a55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4ad64370df758bc73e3285042bd4490f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a720e5876be1938eb64d81b85b0d7bfff</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a083bcd53b7787fe3839c89844db137a9</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa612e868bccd0a0557311c5014ae6bde</anchor>
      <arglist>(const ObjectContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a779ab019d89ce737d4f55e0d2a86205c</anchor>
      <arglist>(ObjectContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>ime::audio::Audio *</type>
      <name>addObject</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af7fac8243327b97e4baea47e5528a006</anchor>
      <arglist>(ObjectPtr object, const std::string &amp;group=&quot;none&quot;)</arglist>
    </member>
    <member kind="function">
      <type>ime::audio::Audio *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e46a10f020a21343f16b17a4f968e0c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9881b0537079eb48b07b7a1df0d2baad</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>ime::audio::Audio *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a13d6369c75c11ea680638b57d6922a72</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>U *</type>
      <name>findById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>add3afc05c6675aac6cc20a218015e542</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>ime::audio::Audio *</type>
      <name>findIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a8845c3d878a185cc4d07768c69ed027b</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeByTag</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ad55ca785fbfd6feb6408312803a5b1a4</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeById</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a26673a494a7b5265c6094e81583b37b4</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a258a49c10d0deac2345c78db5ab3ac9c</anchor>
      <arglist>(ime::audio::Audio *object)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeIf</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>af3eaf2bdab65f58c225b7aecd4879f84</anchor>
      <arglist>(const Predicate &amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa5913d605d157e07cfb1b1851d0cf903</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>aa6b9a6116c166ce9a3ac513294888522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; ime::audio::Audio &gt; &amp;</type>
      <name>createGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a21e94370d66299d7e57dfdc9a2b1187c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>ObjectContainer&lt; ime::audio::Audio &gt; &amp;</type>
      <name>getGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ae5a6f15c8967a2c9914a3cfd6d35002c</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a9b9cd5119bf65be01dc8083aad2c4d75</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5df7f17e840f96fcc6313392af7365d5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllGroups</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a4543480f98f131bf7421850bb32dbfdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a2e93114f2ccfa2ce16256e27837324c0</anchor>
      <arglist>(const Callback&lt; ime::audio::Audio * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a5c5405235df37dc8aaf313e52fd164b3</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; ime::audio::Audio * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachNotInGroup</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>ab4160521ba9f9b945fbc82b45f4a29b9</anchor>
      <arglist>(const Callback&lt; ime::audio::Audio * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ObjectContainer</name>
      <anchorfile>classime_1_1_object_container.html</anchorfile>
      <anchor>a3935b0a439fdabd7381476b440a0b3c0</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Padding</name>
    <filename>structime_1_1_padding.html</filename>
    <member kind="variable">
      <type>float</type>
      <name>left</name>
      <anchorfile>structime_1_1_padding.html</anchorfile>
      <anchor>af1c02263a516ef378d3262a9a45dd26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>top</name>
      <anchorfile>structime_1_1_padding.html</anchorfile>
      <anchor>aaf5785c8ee5c6873f5fdf471a35ad9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>right</name>
      <anchorfile>structime_1_1_padding.html</anchorfile>
      <anchor>acbe10fb3d9ae8148a1e2da000b416c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>bottom</name>
      <anchorfile>structime_1_1_padding.html</anchorfile>
      <anchor>a7e068318c99355f93628f9280e76e48d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::Panel</name>
    <filename>classime_1_1ui_1_1_panel.html</filename>
    <base>ime::ui::WidgetContainer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Panel &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>a9e4dec90ff145287625314b67abe5788</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Panel &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>a1ee8a41596fd042a1c6ce6506bb7e9c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Panel</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>ad7da991430c8066725682d1befc554f1</anchor>
      <arglist>(const Panel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Panel &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>aa260addc60ae918076f8c50996ef10aa</anchor>
      <arglist>(const Panel &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Panel</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>a81b65e01618156c8ab17ef9751619135</anchor>
      <arglist>(Panel &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Panel &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>a6e0585acd04ea960ffa5b31e8ace00da</anchor>
      <arglist>(Panel &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Panel::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>a573da41015013e180442b6b93d4ee53d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PanelRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>af74b5f9c89cf084f426fba5d02345636</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>a9b9d8937676f172580a43be2f26bbbf7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>a0ec018ad5208ce6dbab28da646ec0401</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Panel</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>ae6ef45cb0e9061a2bf080c284c8f82c4</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a655ee1010db960c007c2be5e32a4ca25</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7b4149560be75c68d9874bb650cd1a20</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aab8793c4004717e8a3df985cfa86e22d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a6dbb5d766d355a14f4b68501bb36e703</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetAtPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ac0ffedec6aaa059237db9900a454a064</anchor>
      <arglist>(Vector2f pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8894e84e51733d3be13054df9a4f60e5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a24e9c179de1f8f39ca6c15dd1ab97b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ae071b10b1dd275b7b21b2dc8e0b045f2</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ab8fa96eadd34575b8a2a84923391895b</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ad398e39dc582f530bfd0492566eaa261</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8fcd040ece49ba681d4a49e33222a0c9</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a0826fe366a440cde9efb62dc520cd414</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>abd9db967affeef6e89ec3635a28e5504</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a5c5447ea7d1ffd6e87f2bbe2a935d146</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a294427255e4ed49aa2cf150e7d3d2a6e</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa0f983e4503190f75648b4c68dd44235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedLeaf</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a3ca1a14ea74975a02def0b1245705546</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusNextWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7e0bf072b5396208fc7ca2a8705490c0</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusPreviousWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa48887ce4b7f524910f21d34d9e061ed</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a530b03d553311b0321417543408a04e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a1046a4c1183e1bdfd0a9f15d551c3fa1</anchor>
      <arglist>(const Callback&lt; Widget * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Panel::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_panel.html</anchorfile>
      <anchor>a0cd81b56e9edd8e2dab6f9cdacb11bc4</anchor>
      <arglist>(const std::string &amp;width=&quot;100%&quot;, const std::string &amp;height=&quot;100%&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::PanelRenderer</name>
    <filename>classime_1_1ui_1_1_panel_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; PanelRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>aa345c939aeeb814d7323bb489b53f504</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>af72b7f1b15bd620faf5d28f52982b087</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>af5ab4c8d7f76a17f322625c5ed31b4f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a115fdf1eb7d52ccdd27e1161eccb42f9</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a3289a454f553dc24ca49a9efb09fe64e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>af74542c9b818541921a8ea6bca42f384</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a19602c2ebdf256a3d8c474a12daedad9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRoundedBorderRadius</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>ab37e117d661524a4971c80a15d77f2ea</anchor>
      <arglist>(float radius)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRoundedBorderRadius</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a64dc321663efd288ab52c1ff1b37f63e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundTexture</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a163dc8c7f243986c754985495c21ba01</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a9d1c6ac0bedac805b969a5477fc10fc9</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a0d484d4f046f68d78f08dc3465722a28</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>ae79e209b9fcaa5464c84e1da10775340</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>ae91639e2618d0d1c1a4ed93ec4dab150</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a24b30b6db1c5b15fcd87852868c002ee</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>aa08ad14e3c9a6198073e588315936322</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a8733fe1d39189a1484cf48476c8280cf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>ae0b366872e20be254d745c63a5e9c3a1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PanelRenderer</name>
      <anchorfile>classime_1_1ui_1_1_panel_renderer.html</anchorfile>
      <anchor>a616d76f4500fbe541b9d5068747d9ad0</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::PhysicsEngine</name>
    <filename>classime_1_1_physics_engine.html</filename>
    <member kind="typedef">
      <type>std::unique_ptr&lt; PhysicsEngine &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a8818bc08856c358b33d6b5d7db29f1db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PhysicsEngine</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a2de84004247ac7a3e298cb50ac317a17</anchor>
      <arglist>(const PhysicsEngine &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>PhysicsEngine &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a969f5ee17af8cb11b6aa565a77e7d8da</anchor>
      <arglist>(const PhysicsEngine &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGravity</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a82d81685abd6f31709de02247680cec5</anchor>
      <arglist>(const Vector2f &amp;gravity)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getGravity</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a52054e8307a5fc68416ff4c88e8896cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIterations</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a5557b31c524373c3c7c2acb9ee1eaf78</anchor>
      <arglist>(const PhysIterations &amp;iterations)</arglist>
    </member>
    <member kind="function">
      <type>const PhysIterations &amp;</type>
      <name>getIterations</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>ad94ad409f31ab30ead5e04877fe46a19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimescale</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a19cf91a3c5ea24e76c50c1f762f92f8a</anchor>
      <arglist>(float timescale)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTimescale</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a68e7f7e8f07767eaed01d0b71227e386</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContinuousPhysicsEnable</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>aa781fe3d1cdcd7ba9e6a9fe32b1ca509</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContinuousPhysicsEnabled</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a8e4057aef9b918af2c977ded034560da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFixedStep</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a133e2818b7ce10334cae42b159b6697d</anchor>
      <arglist>(bool fixed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFixedStep</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a4b3687a22ee9dc441e1e2174947a98de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RigidBody::Ptr</type>
      <name>createBody</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>af1dbe01469ac63151d9c4eebeb9ef96d</anchor>
      <arglist>(RigidBody::Type type=RigidBody::Type::Static)</arglist>
    </member>
    <member kind="function">
      <type>Joint::Ptr</type>
      <name>createJoint</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a3203fb9126845e7ff4a6438cec1fa0ce</anchor>
      <arglist>(const JointDefinition &amp;definition)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoClearForcesEnable</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>ac7b1aa97d06cb79c553c111508e4fd68</anchor>
      <arglist>(bool autoClear)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAutoClearForcesEnabled</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>ab3f4cc44389fccb85361c5ae661d47cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearForces</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a24ead29e2b24c02163a0e22734af49d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSleepEnable</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>adecc70736fd68bc6ba995d96e05bc4bd</anchor>
      <arglist>(bool sleep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSleepEnabled</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>ac101f55ec5ed0c317bd69dc94189fe90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubSteppingEnable</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a5623b818d8acc0b6808f28758125e1c7</anchor>
      <arglist>(bool subStep)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSubSteppingEnabled</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>aec73ae77d78c343b2a0a4c7626efcacf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getBodyCount</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a7070fff24bafd50b896e262f411569b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getJointCount</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a916ace2eb145b787924b670383a1b134</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLocked</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a234bf81108b88c541acade3249837264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rayCast</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a30d8bc57dec22f0c7d5573d4f67a8c10</anchor>
      <arglist>(const RayCastCallback &amp;callback, Vector2f startPoint, Vector2f endPoint)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>queryAABB</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a1730d813e532aa111ccccdc609d4a326</anchor>
      <arglist>(const AABBCallback &amp;callback, const AABB &amp;aabb)</arglist>
    </member>
    <member kind="function">
      <type>Scene &amp;</type>
      <name>getScene</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>af71d2ad1318698ab3275f0bd0be42fae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugDrawEnable</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a2cf20f212bee409a8a2725a2ff1303d3</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDebugDrawEnabled</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a83786d47292dfad776308adaa202ff10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DebugDrawerFilter &amp;</type>
      <name>getDebugDrawerFilter</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a9d207bcab178c9d8fd074477e010fa79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PhysicsEngine</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a72975c5a8a6e1c1fc8ffd50dd8dbde08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PhysicsEngine::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_physics_engine.html</anchorfile>
      <anchor>a63ebae5aab8638934b14ae0af779d06c</anchor>
      <arglist>(Scene &amp;scene, const Vector2f &amp;gravity)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::PhysIterations</name>
    <filename>structime_1_1_phys_iterations.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>position</name>
      <anchorfile>structime_1_1_phys_iterations.html</anchorfile>
      <anchor>a041ecabaa52bede3949886bbab74aff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>velocity</name>
      <anchorfile>structime_1_1_phys_iterations.html</anchorfile>
      <anchor>ab6be982f3ccbb40e65b99ae6ef071e86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::Picture</name>
    <filename>classime_1_1ui_1_1_picture.html</filename>
    <base>ime::ui::ClickableWidget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Picture &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a4c3d0ae065d38a0c838371aa41d87208</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Picture &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a3a54f8334456f26e0519d6cea3be463d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Picture</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a36842681ac96c7b382977afc2784f778</anchor>
      <arglist>(const Picture &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Picture &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>aab591a3c8204af7728a600fd4157ea40</anchor>
      <arglist>(const Picture &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Picture</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a8ea790821969e617f75413c776c9c25e</anchor>
      <arglist>(Picture &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Picture &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a9c732d76c0f927e8d1f5aee1e44fd45e</anchor>
      <arglist>(Picture &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Picture::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a821b937d2aa16f67e5cd4aecb37f329b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PictureRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>aba9c35d4eb49999eadbc5a3ff8791e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreMouseEvents</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a51ab376ceef65e7b7596da72af906fbc</anchor>
      <arglist>(bool ignore=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouseEventsIgnored</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>ac9431fd46edd46755bb1c0d5e75d0824</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a808f90806e28464ac7367b6335d4612d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>ae1b2f5ece8e1a3d40e71a824c5a0890a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Picture</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>abbc4d44b1fb5d95f9f0d3d65b25e1ed7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>af9e2710fa80d4302bfcf3bbe598a7f9d</anchor>
      <arglist>(bool isEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aef17b82d68a97101bed11d120b0cd3fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a3873c38840d4d313d03aeb6894511e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a9d4deb57bcd9d3cfb390d4d7e941ab62</anchor>
      <arglist>(bool isFocused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a22a95490969b9836a4f9421346527188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Picture::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a518b14a2d03869d252ceac88884da92f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Picture::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a744659b78e637e2bf05a3f4cc13f9df3</anchor>
      <arglist>(const std::string &amp;filename, bool transparentTexture=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Picture::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_picture.html</anchorfile>
      <anchor>a08716e1338c0c6ab3d58a0a6164ae78a</anchor>
      <arglist>(const std::string &amp;filename, UIntRect frame, bool transparentTexture=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::PictureRenderer</name>
    <filename>classime_1_1ui_1_1_picture_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; PictureRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>ae9785d5d09815ea0390f277c62849986</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>aac4441bdf3c070cc55d854af7932f284</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>a1f1f96d31d515b8c12290ca99cc2386e</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>a384c43a3175b57fce38d15aa166deef4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>aaf8c8e8b68e54c7451f22d47120d9bdb</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>aae50aae6976ffe14b5512d27016ae2d2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>a7a22f6914c6ca429f00bf89da596beb7</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>adb726365aba0e00345dd8becb3b748ee</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>a31863fe5b49df2efc10d637fa5e532e5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>a7c8975db1ac3f8d5195a0daf7dff19e4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PictureRenderer</name>
      <anchorfile>classime_1_1ui_1_1_picture_renderer.html</anchorfile>
      <anchor>abf1e97e5c2847c23f62e1d2f74c74a40</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::PolygonCollider</name>
    <filename>classime_1_1_polygon_collider.html</filename>
    <base>ime::Collider</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; PolygonCollider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>a9621eddb88dea8ec7769866c72cadff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2415031582cf0d43ad6fb0a4d1f8c8dd</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda30954d90085f6eaaf5817917fc5fecb3">Circle</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda3cfce651e667ab85486dd42a8185f98a">Box</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8dda4c0a11247d92f73fb84baa51e37a3263">Polygon</enumvalue>
      <enumvalue file="classime_1_1_collider.html" anchor="a2415031582cf0d43ad6fb0a4d1f8c8ddae4a297a0f76119a442c2595ac040673e">Edge</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Collider *, Collider *)&gt;</type>
      <name>CollisionCallback</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a6d3d0f3cff1081d433e4e0f718281949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonCollider</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>a35a053b0d73d90111af1ba18231b707e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolygonCollider</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>a3848dcc8c3d2836e2090ead186626b69</anchor>
      <arglist>(PolygonCollider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonCollider &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>a3e68883e7c920338d922959db1ec20c7</anchor>
      <arglist>(PolygonCollider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>PolygonCollider::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>aed5f11d423e3da402e5b3d8656989f29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Collider::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>a2a1ce477142a9b4962f467521679a2f5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>adc36fa5e24b25febd664a4ce85b2ce5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>aa71fa75978e11c40c6ac3fa54e06fa74</anchor>
      <arglist>(const std::vector&lt; Vector2f &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PolygonCollider</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>a3864cfb470b9c4c1e0cfe74d4efeb9a4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ac44c4b0ee550601366e73df9775a0d51</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>afa1d09fd0e6ce441b3f2d3bea139b090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a2f378fd015e16c95969e492355e03d91</anchor>
      <arglist>(float density)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDensity</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af9e97fa2e18d91f73d1e4e817bf95471</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a20cd09ce098cfdf58faec0fbc5f30489</anchor>
      <arglist>(float friction)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getFriction</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a0d199c1e6cfb0878dead6aeabe66e91b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acf6bf0876de22fa487ed19134e862e5b</anchor>
      <arglist>(float restitution)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitution</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a973064c47b209f6059afda97e176bcf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aafef833a75f448eb7132674bb6b529be</anchor>
      <arglist>(float threshold)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRestitutionThreshold</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>af4bbe2a4d95aa674a384e3718708e17f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ae94d60f49800bd913640f6f5f45beab3</anchor>
      <arglist>(bool sensor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSensor</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>ad50f8712319dc00c42deb412cc679314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollisionFilter</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a32562e8dc0dee0bd6f985979329b048d</anchor>
      <arglist>(const CollisionFilterData &amp;filterData)</arglist>
    </member>
    <member kind="function">
      <type>const CollisionFilterData &amp;</type>
      <name>getCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a97c926ba8d6a0d3310c7813e47c2bc06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetCollisionFilterData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acddf186f01d08754fbc03f1a3efcd3ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnable</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a488ac3ca6da6039d159f972b4fadef18</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAttachedToBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a4576c4f1d0985bed496164fafcce3115</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getBody</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a10ae9d612b3e063372804fc4eef4a351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsPoint</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa9d396d8e0c191b7ea7dd8372dbf4408</anchor>
      <arglist>(const Vector2f &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>a69f252089ac37cb7329ae151681614e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactBegin</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>abb61d78452cbceb12f427e61e3bf6f48</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactEnd</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>aa51a380cc693325caaf5584ebb86e464</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onContactStay</name>
      <anchorfile>classime_1_1_collider.html</anchorfile>
      <anchor>acea608515a9740acf6c5e445bafdfbbb</anchor>
      <arglist>(const CollisionCallback &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static PolygonCollider::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_polygon_collider.html</anchorfile>
      <anchor>a27a4eaf04c9dd20cd39604966e9d2467</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::PrefContainer</name>
    <filename>classime_1_1_pref_container.html</filename>
    <member kind="function">
      <type>void</type>
      <name>load</name>
      <anchorfile>classime_1_1_pref_container.html</anchorfile>
      <anchor>a299f0cfd2632beb0c1bda7e846430d28</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addPref</name>
      <anchorfile>classime_1_1_pref_container.html</anchorfile>
      <anchor>ad7cbf2174c5b7f2e5d43f3cdce49e8bc</anchor>
      <arglist>(const Preference &amp;pref)</arglist>
    </member>
    <member kind="function">
      <type>Preference &amp;</type>
      <name>getPref</name>
      <anchorfile>classime_1_1_pref_container.html</anchorfile>
      <anchor>abd8679adae9eb884af2b1b52a7792490</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPref</name>
      <anchorfile>classime_1_1_pref_container.html</anchorfile>
      <anchor>a2324dd6359ac926cdd5baaa692d5d483</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePref</name>
      <anchorfile>classime_1_1_pref_container.html</anchorfile>
      <anchor>aef871e8c9c576dd30480b4317af11128</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classime_1_1_pref_container.html</anchorfile>
      <anchor>a0b75006c1df6b5dd36e380a5264b1c1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_pref_container.html</anchorfile>
      <anchor>aa99cfde1f51b99594d1cdc88029aa8cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer</type>
      <name>asPropertyContainer</name>
      <anchorfile>classime_1_1_pref_container.html</anchorfile>
      <anchor>ac1b7c99e4b8e2202750e8bcda44a5eaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>save</name>
      <anchorfile>classime_1_1_pref_container.html</anchorfile>
      <anchor>a8aef7a77c148ea61fd07c2d67e6bc740</anchor>
      <arglist>(const std::string &amp;filename=&quot;sameAsLoadFile&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Preference</name>
    <filename>classime_1_1_preference.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>a06e6274ba7713ce516b532f7c07c50bf</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_preference.html" anchor="a06e6274ba7713ce516b532f7c07c50bfac26f15e86e3de4c398a8273272aba034">Bool</enumvalue>
      <enumvalue file="classime_1_1_preference.html" anchor="a06e6274ba7713ce516b532f7c07c50bfa27118326006d3829667a400ad23d5d98">String</enumvalue>
      <enumvalue file="classime_1_1_preference.html" anchor="a06e6274ba7713ce516b532f7c07c50bfa1686a6c336b71b36d77354cea19a8b52">Int</enumvalue>
      <enumvalue file="classime_1_1_preference.html" anchor="a06e6274ba7713ce516b532f7c07c50bfa0b1291eded63143ac04709711274785a">UInt</enumvalue>
      <enumvalue file="classime_1_1_preference.html" anchor="a06e6274ba7713ce516b532f7c07c50bfad909d38d705ce75386dd86e611a82f5b">Double</enumvalue>
      <enumvalue file="classime_1_1_preference.html" anchor="a06e6274ba7713ce516b532f7c07c50bfa22ae0e2b89e5e3d477f988cc36d3272b">Float</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>Preference</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>a14fdb0b9d44dd3945f293ac4a4947ba8</anchor>
      <arglist>(const std::string &amp;key, Type type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Preference</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>aa1cb64f140618368ea6088151c3331cc</anchor>
      <arglist>(const std::string &amp;key, Type type, T value, const std::string &amp;description=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>a819d8f2d85de542e6efc8b03ff7e8750</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasValue</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>a7c982f577a72f237395ae4fe43ab8ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>a4e6c5b9ff0166edded600fc2f0ea8763</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>a2014bdffecdb176ee28b48c2ba568935</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getKey</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>a0b787c9cbe17bbefc1bf9f0b84827c47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDescription</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>a26a1eea3eb34c0b6a69e65f8a54f2825</anchor>
      <arglist>(const std::string &amp;description)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getDescription</name>
      <anchorfile>classime_1_1_preference.html</anchorfile>
      <anchor>a932be0e97085b946dc6d8c07b881a81b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::ProgressBar</name>
    <filename>classime_1_1ui_1_1_progress_bar.html</filename>
    <base>ime::ui::ClickableWidget</base>
    <member kind="enumeration">
      <type></type>
      <name>FillDirection</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a460fbafaa3bc5b0edda5ff06148a4c49</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1ui_1_1_progress_bar.html" anchor="a460fbafaa3bc5b0edda5ff06148a4c49ad1e80c506f4c89e3c4fb1c1b4867a03c">LeftToRight</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_progress_bar.html" anchor="a460fbafaa3bc5b0edda5ff06148a4c49ab7b0ea3028791689ea070674776855e2">RightToLeft</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_progress_bar.html" anchor="a460fbafaa3bc5b0edda5ff06148a4c49af2b1a19a8d0f523d042f9ede79a80804">TopToBottom</enumvalue>
      <enumvalue file="classime_1_1ui_1_1_progress_bar.html" anchor="a460fbafaa3bc5b0edda5ff06148a4c49a63dc349be51108dcfd197c7ab02b486a">BottomToTop</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ProgressBar &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>abf4501656c55bc919b5963bc69a8f3eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ProgressBar &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a59cc2214cb19e23ee7e0d9ffcf195c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressBar</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>aea5a6f560b2e1512e3cfaf3cd28f2031</anchor>
      <arglist>(const ProgressBar &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ProgressBar &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a97101ba1825a1f81bc7c4738ea909877</anchor>
      <arglist>(const ProgressBar &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProgressBar</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a881ef55326f6db94b2a434ec4527892f</anchor>
      <arglist>(ProgressBar &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ProgressBar &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>aca0566001454998702a810fb88110a7c</anchor>
      <arglist>(ProgressBar &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ProgressBar::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a100a58771c4b44be44e61573c6e6bcde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProgressBarRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>abc223ec06c4ecda69a480bccbf2ca876</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumValue</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a48f4b943232d593fbc0cca730dc0c1a3</anchor>
      <arglist>(unsigned int minValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMinimumValue</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a813c96112555d576668ecb279e34a5fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumValue</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a3b55d7c3366bc9215f13266089a7c088</anchor>
      <arglist>(unsigned int maxValue)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getMaximumValue</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a48e98969f3bbb5f9a74fd86854d7f9cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>ad9c943063aa5e9500f770c18dd84355a</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getValue</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>aba06e32750ef46b7e1eb35ebae43aacf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>incrementValue</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a31025d5416270804e8cc965a72985d8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillDirection</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a481b0db45305c501e676b3e565ef097f</anchor>
      <arglist>(FillDirection direction)</arglist>
    </member>
    <member kind="function">
      <type>FillDirection</type>
      <name>getFillDirection</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a6edfeda7235dd83ac0515aa608cccfff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>aab26481059295618c93956094c214003</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>ab2a9a5d5b88d91b1d4373bb18a47f973</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a87c000c331c0c878348ae810a616bb62</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>aae186670e0336afd1627c0d3483e4c9c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProgressBar</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a8e7a4654b4c2c4d4844aae3428533a40</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>af9e2710fa80d4302bfcf3bbe598a7f9d</anchor>
      <arglist>(bool isEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aef17b82d68a97101bed11d120b0cd3fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a3873c38840d4d313d03aeb6894511e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a9d4deb57bcd9d3cfb390d4d7e941ab62</anchor>
      <arglist>(bool isFocused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a22a95490969b9836a4f9421346527188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProgressBar::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar.html</anchorfile>
      <anchor>a4d0984b466d759ecfce2969abc839341</anchor>
      <arglist>(const std::string &amp;text=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::ProgressBarRenderer</name>
    <filename>classime_1_1ui_1_1_progress_bar_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; ProgressBarRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a0bd605992a64966ecbaf86a0b4ca2f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a1e77cacf0374046a86d9a49fb13dcf7d</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a05b3f376f0334171cec01f4fac5e875b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColour</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a4c44834c87fb8aba6cd146995ed978e1</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColour</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a8cdaf961a329b409d3c0f01dcc3774e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColourFilled</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a214ee0c0cc28698f22ab671eb27101ec</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColourFilled</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a2b1830ff14e7c5c03438881757d82535</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a77a9dae8b0fdfd5c838a0880fea2d336</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>addbee894b4d0fe1ca8f0b5c05e7af60b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColour</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>abcbaef744d33f181cdec61a1b655125f</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFillColour</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a60c7fda00566d1c18241baa5a2c1508d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>acd25e4f7eef99b0b814ce45ca6553cea</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a0b1e6d72ae730de8c3047054e87ebb30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundTexture</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a96904ec98571a36614d7fe402ea32ef0</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillTexture</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>ad0e11e5dc66f0edcbc41cf43b01335d8</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a76ba934b7d84a61143299bdba75d67c8</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a63b01136c3244a98cc3b946cb0134ad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a8a1d227639947a38a8ea79ad673fff62</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a9a226c1d5f646b6090b05d46163a3589</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a504414992dc0de6a223719d3f8524603</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>ad55e7ddc74cb9b98db7a866b40b23949</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a0370b61a18fbf11f141566160cad7332</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a08edbd541643812ca60548355f9b2703</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a7de3f3fc2578dc1a44cc538b276d9e08</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>a0f3ca0d04f85283ca43422c93f37475e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ProgressBarRenderer</name>
      <anchorfile>classime_1_1ui_1_1_progress_bar_renderer.html</anchorfile>
      <anchor>af0e6042c50a07abceaf20ee11375defb</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Property</name>
    <filename>classime_1_1_property.html</filename>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classime_1_1_property.html</anchorfile>
      <anchor>ada66e9b6a3ed38bd98d0486b939cbc24</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Property</name>
      <anchorfile>classime_1_1_property.html</anchorfile>
      <anchor>aece16be44765cacfeaef871e1a62dfe7</anchor>
      <arglist>(const std::string &amp;name, T &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1_property.html</anchorfile>
      <anchor>a7b25ca137a677751074b1708653a9016</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classime_1_1_property.html</anchorfile>
      <anchor>a77409c600065f4f632074464169244ea</anchor>
      <arglist>(T &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>classime_1_1_property.html</anchorfile>
      <anchor>a479983eb96ec875c444bb2da128545d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasValue</name>
      <anchorfile>classime_1_1_property.html</anchorfile>
      <anchor>aa60ec02f8f6a61f30a6b05fecb3c156e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onValueChange</name>
      <anchorfile>classime_1_1_property.html</anchorfile>
      <anchor>a893f9d2cb447baa71b7e9e539dd51361</anchor>
      <arglist>(const Callback&lt; Property *const &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1_property.html</anchorfile>
      <anchor>a8841afe1dee30d12d18904f18a942988</anchor>
      <arglist>(int id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::PropertyContainer</name>
    <filename>classime_1_1_property_container.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>a1d3f44182174ec26d27d6a33567a812c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>addProperty</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>a34620364ea1399b72ea1d5e4ab463bac</anchor>
      <arglist>(const Property &amp;Property)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>adecfc41236ac413874bca00eba798e4f</anchor>
      <arglist>(const std::string &amp;name, T &amp;&amp;value)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getValue</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>ab3aeca73c5d4b534328266ec860076a8</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeProperty</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>aee121f76480c586f68d2d34211bfc767</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProperty</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>abe9b5adec3c9d7b0d271ef09d1b2fe35</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>propertyHasValue</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>ad61866db03f24123b4294d2b80c59308</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>a89b412eff1a6ab0f430656743e54fa95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachProperty</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>a1ad4543800b40586133738857252faaa</anchor>
      <arglist>(const Callback&lt; Property &amp; &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onValueChange</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>a23ee85d90c9bf4808c458fa9016f05bb</anchor>
      <arglist>(const std::string &amp;name, const Callback&lt; Property *const &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>af21cb1ca2d01e1d21df4f58890311891</anchor>
      <arglist>(const std::string &amp;name, int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classime_1_1_property_container.html</anchorfile>
      <anchor>a15bf39114248009da7277317c7a5f344</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::RadioButton</name>
    <filename>classime_1_1ui_1_1_radio_button.html</filename>
    <base>ime::ui::ClickableWidget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RadioButton &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>adcc9ed49675d689894d259899f80fd5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const RadioButton &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a6ac0f4b75b03cc0408aa9f1014b4733a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadioButton</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a9765e3b4012251ea7d9627f219e1eb24</anchor>
      <arglist>(const RadioButton &amp;)</arglist>
    </member>
    <member kind="function">
      <type>RadioButton &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>adcb4c9dbeb0638de5dba47e3e6f567c1</anchor>
      <arglist>(const RadioButton &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RadioButton</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a66682ea60e3f207a96bed009ccc7ac93</anchor>
      <arglist>(RadioButton &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RadioButton &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>ac45f98d14b98196247bbbe181cd70806</anchor>
      <arglist>(RadioButton &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RadioButton::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a54d716e69c387845e6d93c3d375bb166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RadioButtonRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>aec32d54e4dcc7292b9d7b13c0abea647</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextClickable</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>ac4905561c15364808c7ccde0e2dc0eef</anchor>
      <arglist>(bool acceptTextClick)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTextClickable</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a0da7da091e88078ddf03dc54150e5204</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChecked</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a6bfa8f829095a03837f1e081e5765830</anchor>
      <arglist>(bool isChecked)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChecked</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>ade1e7fda765549d573bf22d963e5ca87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a2dd8b7b6fe6deff33592f201d719ab3f</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a84e6951d33e79afbcba3d7afb2a472df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>ad48c5a6ae5780d5eb8f64e818066992b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a867ef59a0d225523ffe6043c9d9f98dc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RadioButton</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a6317dd4f6f3eb508e03a14d286522ab5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>af9e2710fa80d4302bfcf3bbe598a7f9d</anchor>
      <arglist>(bool isEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aef17b82d68a97101bed11d120b0cd3fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a3873c38840d4d313d03aeb6894511e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a9d4deb57bcd9d3cfb390d4d7e941ab62</anchor>
      <arglist>(bool isFocused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a22a95490969b9836a4f9421346527188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RadioButton::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_radio_button.html</anchorfile>
      <anchor>a911f31ad90ac965505cf25c0cb047802</anchor>
      <arglist>(const std::string &amp;text=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::RadioButtonRenderer</name>
    <filename>classime_1_1ui_1_1_radio_button_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RadioButtonRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ac2b2532cc3d28816bd9a25f38fd9d8a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ad8db166583f465a8022dab6c60ad63e1</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>aa848be76877e77c46aba6da0b9511c56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextDistanceRatio</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a9b112217fc2fe6ee4e1b025b5917149d</anchor>
      <arglist>(float ratio)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTextDistanceRatio</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a62e347fbdb182cf026dfe1b7a991744b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a933623c2325f5695f83e64c98e28b7f5</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ac5e9bfb322a6a495883a14b70186d1cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a1898dd63e5a1a961d0171beab8817269</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>af519878b206e28c4059ab92069348da9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a5a4b6a7518cffdf7cc3ce574ac6792c4</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a969cd96a582017cbe67a0b7279baf3dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a963c08cc9ff9b179588fd72e0348a942</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColourChecked</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a44f6dc1faf2047819141c4aac84afa93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a04fcd89f1f623eeed6dae64a94400a60</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>aaec93b27e4ece85148e9bd7cc32e314b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ae83e3dff8aaf25f18a594547c95bb836</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a534e66c03f0ad13a9320bc22fcd5645c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a0c009b2d1954ca4bda96f1d42c612b59</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a381c5beb1eb97a2269beffc8e54e3a09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a36e9dc1a679faaf003b7ca33a358e4bc</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>abb6ab70187e111266c7954550e5abf3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>afb4582d1a634f276f201114c22960ea0</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>abcd8635e11eb72481f83da89110abefc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a66f65e1ca3533e7539c8cb7df051e3d0</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>adae6c2c350ce463ca2ac062096fe8238</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedHoverBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a4602e4a74a9acf3bd78dca8589af55cf</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedHoverBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a279ba9bfcbd17789b879e955fe0989fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a3763aef430b0c7598f9b078676d74089</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>adff97acdcf4ea1ff7e6a7eab37864ee7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a94c36846396875c9a64f9d6d065eb6eb</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a8fadd95b2d0bab2bcb09e85469817394</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>af64493bfc9145ac8efd0606c361aaa5f</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a675e14e2d97e1c26527d3da65c494068</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>afc22d02a536dceb44856d9cf50dfa41d</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>aab4fbb4e54711bbcb39b4eec2cdbc6ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a26274a9fea4dcdda2fdd97c1c9daacaf</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a170e755377b2527f7c09888d80cafc68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ae0d898acecab618306675803da25c12e</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a8d0c8dbcfdaaa5f36ef8bca535ea3952</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedHoverBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a69dbda192123a10a3686e8d35e67a003</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedHoverBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a07716e09305fa075c4e4f4777dc6bd57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a0ded899cc5846e2c3404717c6302c90a</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedDisabledBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a5d6ba2717854816abdef77bf849c1bf8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ae044709b895b8042ecd0334cfb6cbbb9</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckedFocusedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>afb7b41f072c3361b36268571be7bcb96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ab214d428881258a6af30d90ac74a8125</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a065de57bd6f8a9add351b4dedbdacd9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a72358c71d2724b50b38e768d92d18a99</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getCheckHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>aaa462575051679041db2967ae8242cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledCheckedColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a50ddc58ba9f99882af8699de113b73b1</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledCheckColour</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a5e07605aff190141ccee916ec9d0bb7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUncheckedTexture</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ad7586cb408e5af0cf103ab53fa6430e8</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedTexture</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>aadf1488500f24ebd2b9a0f60cdc6d000</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUncheckedHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a1d6b3c96a73de180694dcf5ad49568d1</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ad6c733fdcd7cb2d90eeb00b3efb1b311</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUncheckedDisabledTexture</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a72e90a769c28fb031a4f9c624b448d9d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedDisabledTexture</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a78778db8d1dbe6576652541e5c1a4df7</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUncheckedFocusedTexture</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a4f8d716fd0af5b337cee729b881817c4</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedFocusedTexture</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>aeca4d190a46ef954dfd19bac2fb0bfc5</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>acf105a2d8273124ab6d4086e2bc4f60c</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a883f309ff440258f3ac5957f31bd2409</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCheckedTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>aa8e79aabe9a2b7b201584abba4d79613</anchor>
      <arglist>(TextStyle style)</arglist>
    </member>
    <member kind="function">
      <type>TextStyle</type>
      <name>getCheckedTextStyle</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ad0e856f172d7b5d4917ba622b1f69b3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ac7c516c6e21f91024ff6dcd9904b11c2</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a6bc6931670ef7814eabd2b519e97ae7f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a4f9f843f9426608cacbd784c7fd13a6d</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>aa117faf83ea3e989e407fde12f050e24</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>af6f05aed0caefb99d06b2b8c86debbed</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ab84fb669198ad50c259697eb77376858</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>a6efbb833c2fcde431f665567b5a573d7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>aa6123b9ae6068c48dad3512815407475</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RadioButtonRenderer</name>
      <anchorfile>classime_1_1ui_1_1_radio_button_renderer.html</anchorfile>
      <anchor>ade0a619a909f89350100001f8307f65b</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::RandomGridMover</name>
    <filename>classime_1_1_random_grid_mover.html</filename>
    <base>ime::GridMover</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RandomGridMover &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_random_grid_mover.html</anchorfile>
      <anchor>a1067474cd54ac36468832f3c31acba5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a07b612eb1a30ee0d7012a891a805e93a</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aae1ba155a9f2e8c3be94020eef32a0301">Manual</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa64663f4646781c9c0110838b905daa23">Random</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aac41a31890959544c6523af684561abe5">Target</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aad71670d62b238eaf063979407361034e">Cyclic</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aaa55529813aef6ca28b9d22ee0442e02b">KeyboardControlled</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MoveRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a62c372e0dbb8e5a0be9b8fa5fd9724fc</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcab1c94ca2fbc3e78fc30069c8d0f01680">All</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca9ac677ee4eec25d9e59707a661d2c5e1">Diagonal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca3e85a6323568ffe699745b4eef821495">NonDiagonal</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomGridMover</name>
      <anchorfile>classime_1_1_random_grid_mover.html</anchorfile>
      <anchor>a0671b18a1f3acbac61c24e6f21b3099f</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *target=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_random_grid_mover.html</anchorfile>
      <anchor>a41ba8d414a8f63dbbe11220df1e6e4a5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startMovement</name>
      <anchorfile>classime_1_1_random_grid_mover.html</anchorfile>
      <anchor>af8a557d02eb54549df2da612bf0f1bb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopMovement</name>
      <anchorfile>classime_1_1_random_grid_mover.html</anchorfile>
      <anchor>ac200f1ea3d7e9ad54e8e53c04f781ef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomGridMover</name>
      <anchorfile>classime_1_1_random_grid_mover.html</anchorfile>
      <anchor>a8abff81fbc1c95d0267a305281c15f01</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8e3a0ca52ae74832ef1525671ba1b49c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncWith</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a0627539f4f7e59a9905c4d9d37396089</anchor>
      <arglist>(const GridMover &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestMove</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a82d5a2809795725446f88f0ed90f4c71</anchor>
      <arglist>(const Direction &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, GridObject * &gt;</type>
      <name>isBlockedInDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a266600fc2eef282439b2d507b358c427</anchor>
      <arglist>(const Direction &amp;direction) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a39ab796c7ce3807533afd9d64bce8425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getPrevDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a986f4a16ef608e0873ee2c8a1455c65f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2b8a2eb07cdf61592f63a32e8e88436f</anchor>
      <arglist>(GridObject *target)</arglist>
    </member>
    <member kind="function">
      <type>GridObject *</type>
      <name>getTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa519ad160ab2062363eb65a596f61d4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ada3898f9de6562ae8ff0ab9a6b7c813f</anchor>
      <arglist>(const Vector2f &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6d91709a02eb517e68edb798949bd91d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a3a9c1ee303df652a29e07ac33ecb00b7</anchor>
      <arglist>(float multiplier)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>acf2934181430189656188257bd77ed5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a121bf39232196e459b0c0b619e963c7b</anchor>
      <arglist>(MoveRestriction moveRestriction)</arglist>
    </member>
    <member kind="function">
      <type>MoveRestriction</type>
      <name>getMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a04e9f2ca7f76fd6c6278797ab46e6a65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementFreeze</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2a264750eeefd2cacf760ad9d785d3a7</anchor>
      <arglist>(bool freeze)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMovementFrozen</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7f7c162f7555b076e7a490baca60edcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getCurrentTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aaf9fa52e0e29d28c988b1d645e1e29ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getPrevTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a75dd6cd8343b1741e88ff8de80c5830f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af8722af658036b2f6b7b40fe5bdbf1e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grid2D &amp;</type>
      <name>getGrid</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7872637d83ac8efddac5a4bf956469f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTargetMoving</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af2f703bf9dfc0c91c76716dac3ded84a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teleportTargetToDestination</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a1861b96d89d9bc4539eda2cdacd356b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDirectionChange</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa54c01c573b9b968117a0b5ef0fd8618</anchor>
      <arglist>(const Callback&lt; Direction &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetTile</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ade350b65cfb3791254d942550882b895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTargetTileReset</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a77f61b75e33ec1e8ef9a3da3076938d0</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveBegin</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa8181e77c50a31a9200e7f64120144ec</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveEnd</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a37f1bbb0367901e3f8b79dfb4d764e8e</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onObjectCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ae56a395c13ead1ca472909d9d1f77993</anchor>
      <arglist>(const Callback&lt; GridObject *, GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onBorderCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8a29c1e5ea9348913794d21428197b13</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTileCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6a0ec54bb9214803536761cc7cd9a18a</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RandomGridMover::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_random_grid_mover.html</anchorfile>
      <anchor>a439227f53b811c2cab2720639bd00730</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *target=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Rect</name>
    <filename>classime_1_1_rect.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a3d12e8b33a72943b7c638959a4d2c8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a72f6f02055e02d7332a6b3c46ad55b36</anchor>
      <arglist>(T rectLeft, T rectTop, T rectWidth, T rectHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a895b17b8ccb4479b189255f75629518b</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;position, const Vector2&lt; T &gt; &amp;size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>ab1f249eb41e250dfa5341d45e911b158</anchor>
      <arglist>(const Rect&lt; U &gt; &amp;rectangle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>ad23a7ccbcc85f273fee7b6321f27b50f</anchor>
      <arglist>(T x, T y) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a47432e79c50354389e3dfb1a4520bee0</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>ad13ecaa6ff67cec51c1e38154cd45cf4</anchor>
      <arglist>(const Rect&lt; T &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a96c2a1a45864b8576793cc2d5f1a0670</anchor>
      <arglist>(const Rect&lt; T &gt; &amp;rectangle, Rect&lt; T &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt;</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>afee3e8f9932c2f57d433f63b8c337c09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt;</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a5b64515f1073aa85393014194d52c27d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>left</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a6dab8db913dd18b02d806844a9464198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>top</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a81e5bb7d4b7165b1d9f3e71f156c429a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>width</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a0ed67ed89362406e5947cd93f664489a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>height</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a905a8a65bc9e9401a7955727ebd58fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>ab3488b5dbd0e587c4d7cb80605affc46</anchor>
      <arglist>(const Rect&lt; T &gt; &amp;left, const Rect&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a03fc4c105687b7d0f07b6b4ed4b45581</anchor>
      <arglist>(const Rect&lt; T &gt; &amp;left, const Rect&lt; T &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Rect&lt; unsigned int &gt;</name>
    <filename>classime_1_1_rect.html</filename>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a3d12e8b33a72943b7c638959a4d2c8aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a72f6f02055e02d7332a6b3c46ad55b36</anchor>
      <arglist>(unsigned int rectLeft, unsigned int rectTop, unsigned int rectWidth, unsigned int rectHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a895b17b8ccb4479b189255f75629518b</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;position, const Vector2&lt; unsigned int &gt; &amp;size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rect</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>ab1f249eb41e250dfa5341d45e911b158</anchor>
      <arglist>(const Rect&lt; U &gt; &amp;rectangle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>ad23a7ccbcc85f273fee7b6321f27b50f</anchor>
      <arglist>(unsigned int x, unsigned int y) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a47432e79c50354389e3dfb1a4520bee0</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>ad13ecaa6ff67cec51c1e38154cd45cf4</anchor>
      <arglist>(const Rect&lt; unsigned int &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a96c2a1a45864b8576793cc2d5f1a0670</anchor>
      <arglist>(const Rect&lt; unsigned int &gt; &amp;rectangle, Rect&lt; unsigned int &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt;</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>afee3e8f9932c2f57d433f63b8c337c09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt;</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a5b64515f1073aa85393014194d52c27d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>left</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a6dab8db913dd18b02d806844a9464198</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>top</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a81e5bb7d4b7165b1d9f3e71f156c429a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>width</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a0ed67ed89362406e5947cd93f664489a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>height</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a905a8a65bc9e9401a7955727ebd58fa5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>ab3488b5dbd0e587c4d7cb80605affc46</anchor>
      <arglist>(const Rect&lt; unsigned int &gt; &amp;left, const Rect&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classime_1_1_rect.html</anchorfile>
      <anchor>a03fc4c105687b7d0f07b6b4ed4b45581</anchor>
      <arglist>(const Rect&lt; unsigned int &gt; &amp;left, const Rect&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::RectangleShape</name>
    <filename>classime_1_1_rectangle_shape.html</filename>
    <base>ime::Shape</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RectangleShape &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>ac5acf5042d61b6e06d13ae3e7e4a1551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a2adff49d5377088a787ab5d5e78e1b2a</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aace9291906a4c3b042650b70d7f3b152e">Rectangle</enumvalue>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aa30954d90085f6eaaf5817917fc5fecb3">Circle</enumvalue>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aa766cae017fab4bcc1d1e83fbb9af87c3">Convex</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleShape</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>ae105b6cef987b991994d42c1672e2cc5</anchor>
      <arglist>(const Vector2f &amp;size=Vector2f(0, 0))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleShape</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>a862a42b23ddd4c378c4bca626aecf719</anchor>
      <arglist>(const RectangleShape &amp;)</arglist>
    </member>
    <member kind="function">
      <type>RectangleShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>a863694afa5172d6fd93f143bde727124</anchor>
      <arglist>(const RectangleShape &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RectangleShape</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>ac7ed717c0a3bf605f80c85e0f26c215f</anchor>
      <arglist>(RectangleShape &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RectangleShape &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>a8c0af9f97a72416f18010bf70c1e6c3e</anchor>
      <arglist>(RectangleShape &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RectangleShape::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>ad0c6b449c4765ba48e4b7ff9ee5d41bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Shape::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>a15aa45c5210f82ccc9e5d3e3f423069e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>a2b5ec76011acdaddcc76318296a42539</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>a7301f7f7e3d3cc511639768f1734c93f</anchor>
      <arglist>(const Vector2f &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>a9e3c4962d0eea130385a57b883ed6582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RectangleShape</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>a35f194e3b38dbd22fed4590fe2e6ca98</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aa3098cf8ffc8cde7adb16f977f35efe4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getShapeType</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ae0af9160257c5bf49c14581f214bc126</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ab90bc710480aa08120f355da43006f18</anchor>
      <arglist>(RigidBody::Ptr body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a02ab88051df380b3188f5a4c43dacc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aadc548793f5ba7c5aeb2b9d86ce12be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a0ad598930dc030f93da8e72b4ddbece7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a7228784d060da6750f2816f05d65c144</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a33424011e839c0157b90422030ab0b4f</anchor>
      <arglist>(const Texture &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>Texture *</type>
      <name>getTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a86be4c524fb7519ecc13595fa004b5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a49f20a202dc872e2317289c5d5a8493d</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFillColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a73e5a769b8bd86f4af8fc65ccf8532c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aeace88d91e94bdee09ee8e4dad9ba75f</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getOutlineColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a43fea7c097fe6317c74ccaa78d8d1b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineThickness</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af36c470d2e5809c7d5371f4a190b8f6c</anchor>
      <arglist>(float thickness)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOutlineThickness</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a1ca4905e8910ffb4283c3c1ca86b1a32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getLocalBounds</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>afd26385a59b4505a28855981eb5c1210</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getGlobalBounds</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ada6248699b13ff029af0f5ea777b67ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a283bf269d05e37bafcdf85d41317264d</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af3017f59a397b4405bf1424bead653d1</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ad8b1e72beffd398c64be419697993a36</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a3be1c9c89ef144fbeb510549aedfc77e</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aee18048dd56be84142dd1dc0c8aea2d8</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a3f82f21625f68ea7ac46c49fd752d090</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ad3f3ebc572e1b324575ae1af07126444</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a160c8bdea9afb979c7f808ad3f737c4e</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a682678070416426f84d83a2e80fa99b8</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a203ca64eb5d8721db62151d910c0b4a2</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aa8e7dcf591164a703f60d7797d38b086</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a7a480796831e01bd042e2078f0ba8ad3</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af7439d591633b8bb84b12e0d45552e73</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a98b264b897bc940e68df895b3a04557e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a549d3d6cee255015d8800b750ab49cba</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a594eefa0a97b9421cfa9f8b8b659e99a</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>afcd6406bb20fbd4473af9e6135579e23</anchor>
      <arglist>(priv::RenderTarget &amp;renderTarget) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static RectangleShape::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_rectangle_shape.html</anchorfile>
      <anchor>a84f2a8732cc7ade9460f103082feb6ea</anchor>
      <arglist>(const Vector2f &amp;size=Vector2f(0, 0))</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::RenderLayer</name>
    <filename>classime_1_1_render_layer.html</filename>
    <base>ime::Object</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; RenderLayer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>abfd3aeddc1a640e4976980fff3942c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderLayer</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>a141b78d6a7480df087fa7787f09efe20</anchor>
      <arglist>(const RenderLayer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RenderLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>a1756ab73673e73b0c286699ff28a9a3d</anchor>
      <arglist>(const RenderLayer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderLayer</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>af3681c3421d31e41adf39b89c448fe59</anchor>
      <arglist>(RenderLayer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>RenderLayer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>af29781a9b5dab2b22d229b80d45f1f8a</anchor>
      <arglist>(RenderLayer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>a3d656bc937987060967ce6c98fe6516b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDrawable</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>a7a23ecb1226f3c9b790471e7c8a2decb</anchor>
      <arglist>(bool render)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDrawable</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>adacdacb8b9d94e152d1f8db40148d276</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleDrawable</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>a8e222a36f95c4456e58e23d4c7c74a50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIndex</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>a769849769d402ef370fd420dcdfffee2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>ab4b5e74e5cc709ee7ed8beb33bba8e0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>ab232756e1cf44bfc2736c0953f6fb325</anchor>
      <arglist>(Drawable &amp;drawable, int renderOrder=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>ac19a05e0cecfbb73a03418771a412890</anchor>
      <arglist>(const Drawable &amp;drawable) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>a3aedb3f7d164f3b58fc8ea64cc25f297</anchor>
      <arglist>(Drawable &amp;drawable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>ae232292a8b8a28dded2c03b797d6f969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>adb1f2f9dac2c63c21353b1fad6292b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RenderLayer</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>a5a5c66aa8707ac71f0abcaf2961edea6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a8c3d545176c422a07532de6e2eb35f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RenderLayerContainer</name>
      <anchorfile>classime_1_1_render_layer.html</anchorfile>
      <anchor>ae2d333554ef90c8737cdd239bf3e5661</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::RenderLayerContainer</name>
    <filename>classime_1_1_render_layer_container.html</filename>
    <base>ime::Object</base>
    <member kind="typedef">
      <type>std::function&lt; void(const RenderLayer::Ptr &amp;)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a63b483eb3dce14557128edb38db2277c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Object &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ad7bb736ac3c2213c99521958fd75c289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderLayerContainer</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a30e373c9b49eb6b16d04ef6cd5381c52</anchor>
      <arglist>(const RenderLayerContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RenderLayerContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a1244751d3f40df4203c10b43682c3e09</anchor>
      <arglist>(const RenderLayerContainer &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RenderLayerContainer</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>ac2bb92bb711920caabefae4c00fadc15</anchor>
      <arglist>(RenderLayerContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>RenderLayerContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a61ee8f4d56866127bc35e24255504339</anchor>
      <arglist>(RenderLayerContainer &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>RenderLayer::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a232c3946ce19e0dac106d7127ce02518</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a54b15c86361e0ae216f5f997447f2b38</anchor>
      <arglist>(Drawable &amp;drawable, int renderOrder=0u, const std::string &amp;renderLayer=&quot;default&quot;)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>afa8967d8a62cd36aa575ce854da382cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>RenderLayer::Ptr</type>
      <name>front</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a5d86dfe630cd560b6c904ae6af763d4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RenderLayer::Ptr</type>
      <name>back</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a55b66c6b9d2627403274c27c8eb26bc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RenderLayer::Ptr</type>
      <name>findByIndex</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a91c856078eee4dce2091efd9e2dd8155</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>RenderLayer::Ptr</type>
      <name>findByName</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a41aea9edc986052fc64012fb10b52fd3</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIndexValid</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a3f7b721ad80c718d2f1547fb65e274c8</anchor>
      <arglist>(unsigned int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLayer</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>aedfe8a3fb7eb6523807e0d1b9bb1b6b0</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeByIndex</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a9a700ba4b0848f139541ecd86adfbd90</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeByName</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a1955b4651bb3e9c7e4825fad6e685beb</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>ae00d70a9f9b3e5f4566cebb49829b98d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveUp</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a21bdc81d3ce4c3220279a77dca81a2d7</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveUp</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a1f3c0edd70a009d3b5c5237cd770f12c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveDown</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a13e28868adc0832545cd88f6557fb774</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveDown</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a743d7b077bbfa69712151904d05d5d17</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToFront</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a3a7cac5197d558ed4d7dad32d60dd982</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToFront</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a3876c3725f94c1b5e3f4efc05e200c3c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToBack</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a0019c1c09284c5f840906ff9170e8dba</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendToBack</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a9721f41c872484b917e6c07c9e72a074</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>swap</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a732e594eca6bc0e030c123d148608768</anchor>
      <arglist>(unsigned int layerOneIndex, unsigned int layerTwoIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a47f9d0c8570bd5eee0791e6e37f753da</anchor>
      <arglist>(const std::string &amp;layerOne, const std::string &amp;layerTwo)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>af2e33494df7d5259ec764748eab3fe08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachLayer</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>af2814fae1a749f7701f899407649b0e5</anchor>
      <arglist>(const Callback &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RenderLayerContainer</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a3480d5b6bf2f34d8a77ce2a8337ad0c7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a8c3d545176c422a07532de6e2eb35f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Scene</name>
      <anchorfile>classime_1_1_render_layer_container.html</anchorfile>
      <anchor>a032858ae1fe02d2d1170981c2af2d67c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ResourceLoader</name>
    <filename>classime_1_1_resource_loader.html</filename>
    <member kind="typedef">
      <type>std::initializer_list&lt; std::string &gt;</type>
      <name>FileNameList</name>
      <anchorfile>classime_1_1_resource_loader.html</anchorfile>
      <anchor>ab14681735c4e6229967cb1f3a10c1496</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const std::string &amp;)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_resource_loader.html</anchorfile>
      <anchor>a4acb9ac501a41dc2c9d1202f26e65375</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setPath</name>
      <anchorfile>classime_1_1_resource_loader.html</anchorfile>
      <anchor>ac2c82348f77f14af881b5635ca325d12</anchor>
      <arglist>(ResourceType type, const std::string &amp;path)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getPath</name>
      <anchorfile>classime_1_1_resource_loader.html</anchorfile>
      <anchor>ac65ab0389aed694b7e06d0f9f3140414</anchor>
      <arglist>(ResourceType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>loadFromFile</name>
      <anchorfile>classime_1_1_resource_loader.html</anchorfile>
      <anchor>a376cd566741b0a7a9de0a8c78647f7e4</anchor>
      <arglist>(ResourceType type, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadFromFile</name>
      <anchorfile>classime_1_1_resource_loader.html</anchorfile>
      <anchor>a70ca7deb362272615b19fd11c061338b</anchor>
      <arglist>(ResourceType type, const FileNameList &amp;filenames, const Callback &amp;callback=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>unload</name>
      <anchorfile>classime_1_1_resource_loader.html</anchorfile>
      <anchor>ad20091c1be936459929caf1b3ee7b3cd</anchor>
      <arglist>(ResourceType type, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unloadAll</name>
      <anchorfile>classime_1_1_resource_loader.html</anchorfile>
      <anchor>ab5252c7437a814549ed359e85d7aac90</anchor>
      <arglist>(ResourceType type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>unloadAll</name>
      <anchorfile>classime_1_1_resource_loader.html</anchorfile>
      <anchor>ac3f935c4d2a6d5bfdb53e17cd91dea07</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::RigidBody</name>
    <filename>classime_1_1_rigid_body.html</filename>
    <base>ime::Object</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a33a6b6f654f14f4fd0abfbdb9868f462</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_rigid_body.html" anchor="a33a6b6f654f14f4fd0abfbdb9868f462a84a8921b25f505d0d2077aeb5db4bc16">Static</enumvalue>
      <enumvalue file="classime_1_1_rigid_body.html" anchor="a33a6b6f654f14f4fd0abfbdb9868f462a40c78b58b86002ee38fad2d3c9dd787e">Kinematic</enumvalue>
      <enumvalue file="classime_1_1_rigid_body.html" anchor="a33a6b6f654f14f4fd0abfbdb9868f462a971fd8cc345d8bd9f92e9f7d88fdf20c">Dynamic</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; RigidBody &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a8592233e886c34129aa6f6a59a84e642</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a4905b28e1a544a17a5190ca318f2688b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RigidBody</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a530467c7b263629accedffb05549f677</anchor>
      <arglist>(const RigidBody &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>RigidBody &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>acfd70407b17de2f4d6566c5c05ff9eec</anchor>
      <arglist>(const RigidBody &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RigidBody</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a9e8c582b5c87de50023efb82bc72d65d</anchor>
      <arglist>(RigidBody &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RigidBody &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a358a35fda7d60179ce3c9eadbd5714cc</anchor>
      <arglist>(RigidBody &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>RigidBody::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a231de123e3c60bca51024524930e3876</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>aaa6563dfd647d04514f23434203c6abf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Collider *</type>
      <name>attachCollider</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>abf3f98eaea1589fd8c54fec0571074ca</anchor>
      <arglist>(Collider::Ptr collider)</arglist>
    </member>
    <member kind="function">
      <type>Collider *</type>
      <name>getColliderById</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a725a3205f04f61a5825380cd1f44224b</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeColliderWithId</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a9c3d4d1dd599123a14b8e6e4ab83136e</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a69c00ae8a7b902794bde59c8db287094</anchor>
      <arglist>(const Vector2f &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>acc92452c2d491b1cb8fadd116979e095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a758ccef628792312d137b673e18fa9b2</anchor>
      <arglist>(float angle)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a1fd507f7498bafc6fd947cc027113083</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getWorldCenter</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a358d41e1135f0769f9637451adf51f0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getLocalCenter</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ad1a3e6c8567fb624238b30212506aa4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearVelocity</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a79517a6d2631500a85b6873374549da1</anchor>
      <arglist>(const Vector2f &amp;velocity)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getLinearVelocity</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a099f0b00090a12c0148bd95318fa9ce8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularVelocity</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ac4d1441f419181ca42c572a55252e22c</anchor>
      <arglist>(float degrees)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAngularVelocity</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a706e823ed2d3904f220af4c207c7f16f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyForce</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ab4d8f42592eafe57fa940f0c36837eb9</anchor>
      <arglist>(const Vector2f &amp;force, const Vector2f &amp;point, bool wake=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyForceToCenter</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a5dd0b1942cad2724f8d66931d9992b73</anchor>
      <arglist>(const Vector2f &amp;force, bool wake=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTorque</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a039fb39bb3eeb882c39c6d881ddfddb0</anchor>
      <arglist>(float torque, bool wake=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyLinearImpulse</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ae4f374f60be476fe7cccfc4b21faae97</anchor>
      <arglist>(const Vector2f &amp;impulse, const Vector2f &amp;point, bool wake=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyLinearImpulseToCenter</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a5e66d73a3b674046ffd33ca5001ad12b</anchor>
      <arglist>(const Vector2f &amp;impulse, bool wake=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyAngularImpulse</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ab7bf28eb05bf9fddd772a7e2f2b1c36f</anchor>
      <arglist>(float impulse, bool wake=true)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMass</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a61f400d4aea5e1fb140fc1367f311eca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getInertia</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>aa3fd1c0fdb38acfdefca9423216557cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getLocalPoint</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a699fe55b888efe38a44f1ae66451ed16</anchor>
      <arglist>(const Vector2f &amp;worldPoint) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getWorldPoint</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ac555d00927aa78d59bf72375ee24e20d</anchor>
      <arglist>(const Vector2f &amp;localPoint) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getLocalRotation</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a3f8e997036dda96090a991ebc48c76da</anchor>
      <arglist>(const Vector2f &amp;worldVector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getWorldRotation</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a9b42a95774c7553a47a45e36afdd6fee</anchor>
      <arglist>(const Vector2f &amp;localVector) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getLinearVelocityFromLocalPoint</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a19668ae98041259ee789fda044f7ddd2</anchor>
      <arglist>(const Vector2f &amp;localPoint) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getLinearVelocityFromWorldPoint</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a869d90ee991b71dcfa84a7830a87ba66</anchor>
      <arglist>(const Vector2f &amp;worldPoint) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLinearDamping</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ae357a559b34760412129b9b642eefc77</anchor>
      <arglist>(float damping)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getLinearDamping</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a3746d332a46f8da3c76218f12a4bf2fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAngularDamping</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a3c6fb79bc80a70f04cb51667a1dd8b1b</anchor>
      <arglist>(float damping)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getAngularDamping</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a5a53000875640e1be3f708adf4888cfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGravityScale</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a86d9ce890c8ab6b9491cf3cd47a63441</anchor>
      <arglist>(float scale)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getGravityScale</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>adbc2c655f690fffe3b58b31f549a9152</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setType</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a0b528740c50b51cfb3533c10579258eb</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a45dd9d5859caf2c5b5669589edb2406d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFastBody</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ad5409243bee36748f51b23473e7c4df8</anchor>
      <arglist>(bool fast)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFastBody</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a762564cc629506b4573c75fbc72bbc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSleepingAllowed</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ad478fc1c49c57f690a691457e1ecbe66</anchor>
      <arglist>(bool sleeps)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSleepingAllowed</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a2c38fab8cbced8d50ffea13d122c5032</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAwake</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>af93699967cbf48f1049215f8387fc547</anchor>
      <arglist>(bool awake)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAwake</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ac85cc10d8e530a229fb0c7759f135a81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a8a1466523f46b8b5caba7ecb18b884e5</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a6cc866730b861eecaa9517eedc1c1e89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFixedRotation</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a44d6fa73c6f85815fcab202db9b76566</anchor>
      <arglist>(bool rotate)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFixedRotation</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a13f7e10e7e9d38d9cfb5a24e5d156b61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GameObject *</type>
      <name>getGameObject</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>aee0c212bfb8471c8554e6ce771182270</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsEngine *</type>
      <name>getWorld</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a153aa3acb7fe405bdf5bbe8a96c24fef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getUserData</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>ae1fb804eaa3f6f6698eab62fbadcb94c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachCollider</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a23f13df3c2f25115eb24f2f3e59308e8</anchor>
      <arglist>(const Callback&lt; Collider * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getColliderCount</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>aa37416d2dbfc30829d80f022e39b5a94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RigidBody</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a8d0657aac94357d0fd6e6df76048d04e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a8c3d545176c422a07532de6e2eb35f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PhysicsEngine</name>
      <anchorfile>classime_1_1_rigid_body.html</anchorfile>
      <anchor>a639ae8db08b48373cb96fa3728d3c447</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Scene</name>
    <filename>classime_1_1_scene.html</filename>
    <base>ime::Object</base>
    <member kind="enumeration">
      <type></type>
      <name>OnPauseAction</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Default</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5a5d9b62f406e06b89066111167ba86ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Show</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5a3e7fc592d7e0161ddaee1edab7ca54f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpdateTime</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5ac0b7807f5f371aa16fec2b23e44bb639</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpdateSystem</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5a7b1acaa2153f22874980758872aba133</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpdateAll</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5aa8eb4398e10ebba872462ae9dbeac311</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Scene &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a19be3b925a89e1a5363660abbfe22444</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Default</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5a5d9b62f406e06b89066111167ba86ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Show</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5a3e7fc592d7e0161ddaee1edab7ca54f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpdateTime</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5ac0b7807f5f371aa16fec2b23e44bb639</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpdateSystem</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5a7b1acaa2153f22874980758872aba133</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UpdateAll</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae65cf357c9d0b15f90643b421e152ba5aa8eb4398e10ebba872462ae9dbeac311</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scene</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a4bb630f4b530b5d84fce10361828be62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scene</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ab4e037440ca28f2995fe9a864803843d</anchor>
      <arglist>(const Scene &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Scene &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a8d927a4bc573cb7a3edc1768e0e6276e</anchor>
      <arglist>(const Scene &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Scene</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae9fa455dccb91488cdd1482c9622766f</anchor>
      <arglist>(Scene &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Scene &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>afc959259cb233f8b3b2196c60ee55644</anchor>
      <arglist>(Scene &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onInit</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>abecd28cc4cdb055748b7f2c9361b2969</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onEnter</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a86f2cb62fbd6a285988dc1a8d3d4e877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onHandleEvent</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a7aa7061178c1b16ac5e7f61a941334c7</anchor>
      <arglist>(Event event)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onPreUpdate</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ab95e913e1bc7c1b35783dc6128a54330</anchor>
      <arglist>(Time deltaTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onUpdate</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a728364368050cb4c1510e2c33ec4fc34</anchor>
      <arglist>(Time deltaTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onFixedUpdate</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>aa18c7e78958a6b37c8874da8c173153a</anchor>
      <arglist>(Time deltaTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onPostUpdate</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a1f6a37b4019d518d69aa8ae7c34736ae</anchor>
      <arglist>(Time deltaTime)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onPreRender</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a40c13bb802e90542db3efd1381a457e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onPostRender</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae9c0a430d340f2de97a9c3064607ce07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onPause</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a489beed81128977aac54748f42abc6a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onResume</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ab2a0e54fb4fa8d95db9f29b5619d4379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onCache</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>aee3ec6ed24abc486070ef6487f367c65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onResumeFromCache</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ab9998682aca9103f0fe5c3c98dd8d30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onExit</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a7ffd6c6a26d0c1cbcabe6c812e8a3206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onFrameBegin</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ad8a85987bb443ee0ecdab799bb1e6dc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>onFrameEnd</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ad58cc74e3fa21e0032d17bc8fadfa26f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a3f7ed55d83520d7365fa9008b26f447d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEntered</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a52353eae9abc63d50a2b71d71f2f79ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>aaee83c66f99a02cc1e41eb77faab8b31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOnPauseAction</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ab0009c6684ee4f638afbf852c8701038</anchor>
      <arglist>(Uint32 action)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisibleOnPause</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>af03e6a0d21251ccc89f155a0ae28107f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCached</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a7f1782dde08c5daced90af06d3e2e938</anchor>
      <arglist>(bool cache, const std::string &amp;alias=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCached</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>aff6b69f1e4cb3f4a7e2c1a303d9614c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimescale</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ac33a22eb7dc8cb54eaf2984b1ffb4f74</anchor>
      <arglist>(float timescale)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTimescale</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a58f34f66784c51e231d9b1034a99a2ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Engine &amp;</type>
      <name>getEngine</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae42725b183405dca6726a3417ff2ee54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Window &amp;</type>
      <name>getWindow</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a0427a125dbdcc858d778fdf1bc73a6e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Camera &amp;</type>
      <name>getCamera</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>aea7a743c89d01dac6762824798eca076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CameraContainer &amp;</type>
      <name>getCameras</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a0e15419a693f9b75d79f94f033aad3ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PhysicsEngine &amp;</type>
      <name>getPhysicsEngine</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ad45c911971020918b9ce8f3d9b5d5626</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GridMoverContainer &amp;</type>
      <name>getGridMovers</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a0f4e727ddc825d31691a09a41e4104ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EventEmitter &amp;</type>
      <name>getEventEmitter</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>afe394ccb3386048f1fa0772593d8866a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EventDispatcher &amp;</type>
      <name>getGlobalEventEmitter</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a6a06a54143fb1d350921ba4b18510300</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>input::InputManager &amp;</type>
      <name>getInput</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a7625202d1db5c736f83c6e766b1579aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>audio::AudioManager &amp;</type>
      <name>getAudio</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a1bc62e996ca9ee81f4e0d2b2450e1536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TimerManager &amp;</type>
      <name>getTimer</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a8382e74b0e14fee8ad1ee6d886e4ec17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PropertyContainer &amp;</type>
      <name>getCache</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a1477e3fc4f2972acdd55d037895e67eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PrefContainer &amp;</type>
      <name>getSCache</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>aef166ace49017e062e2ffdd7c27ed1fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RenderLayerContainer &amp;</type>
      <name>getRenderLayers</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a8d6764a4e4c7f57f99d8e39415e09ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Grid2D &amp;</type>
      <name>getGrid</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a236b45ccef970a57257f1842ec49b074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ui::GuiContainer &amp;</type>
      <name>getGui</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a450c5e3caddda4f47a7dd41347cce5a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ShapeContainer &amp;</type>
      <name>getShapes</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>ae87098973f38f17b777b3a0d66a356b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GameObjectContainer &amp;</type>
      <name>getGameObjects</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a5762a6db11c82f864eceb760205ddfbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SpriteContainer &amp;</type>
      <name>getSprites</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>af6a6a605bc3a71a072a6302139aa53c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createPhysicsEngine</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a31167a3af808b5b3226d3b98f980d728</anchor>
      <arglist>(const Vector2f &amp;gravity, const PhysIterations &amp;iterations={3, 8})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createGrid2D</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a544958e577c1e6d20211d57e4c09c92d</anchor>
      <arglist>(unsigned int tileWidth, unsigned int tileHeight)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Scene</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a89160cb4fa6dc1ce7332b14c3f4c3efd</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a8c3d545176c422a07532de6e2eb35f84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Scene::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>a76a7e8e9a9ff92cf0343cc18288fca51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>priv::SceneManager</name>
      <anchorfile>classime_1_1_scene.html</anchorfile>
      <anchor>abfe1806f9e458eaf927f82c4fc9c49a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::ScrollablePanel</name>
    <filename>classime_1_1ui_1_1_scrollable_panel.html</filename>
    <base>ime::ui::WidgetContainer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ScrollablePanel &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a894551f5d1cd23d298aa37902a34fe09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ScrollablePanel &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a8bb62ceb647ee0a0d597f7047fa65a5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScrollablePanel</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a7c254b49b1d2a8b5c6878e03765ed955</anchor>
      <arglist>(const ScrollablePanel &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ScrollablePanel &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a4dec68e8356c28400e0d038c4d0340ab</anchor>
      <arglist>(const ScrollablePanel &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScrollablePanel</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>acd1d1b35532f4eebe1dc51d576d3d526</anchor>
      <arglist>(ScrollablePanel &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ScrollablePanel &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>aa3cd0b8c17d4b542049e4a26dc8271aa</anchor>
      <arglist>(ScrollablePanel &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ScrollablePanel::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a3b7806aacd6dde248a537c875a4d286c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScrollablePanelRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a55ff72f3d375e6fd8209da08ad092cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContentSize</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>af536eea631f91670737bd6ba689071b5</anchor>
      <arglist>(Vector2f size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getContentSize</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a8cdb2e299ef38addbbecb14a7761d69b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getContentOffset</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>ad201097be66fe92b51155a7bff429c6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScrollbarWidth</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a2414af2a11b3006477962f5062a90a1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerticalScrollStep</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>aaf7954ac8147b847dc19a2a0826ee86e</anchor>
      <arglist>(unsigned int step)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getVerticalScrollStep</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>ad58d17ed9cc91c92799167111f992d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHorizontalScrollStep</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>abb803bf89ff132c7f09610878ba6f496</anchor>
      <arglist>(unsigned int step)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getHorizontalScrollStep</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a88438b7d3bb9bdcc99ceb804c262c1b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerticalThumbValue</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a85758811efa61173a9fba8aba7658152</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getVerticalThumbValue</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a8a9711baf4a8c5946b3ef90739104b06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHorizontalThumbValue</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a6dced48349f159632f914625851e5091</anchor>
      <arglist>(unsigned int value)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getHorizontalThumbValue</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>aaf61ec762d360fae95a748a829dbb582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a7aa2895c8a97bd22ad9261078974ae04</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a9904b64c66672c1a44185180720c5305</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScrollablePanel</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>ac9a34f75c2d042dfd75486fc9491d98b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a655ee1010db960c007c2be5e32a4ca25</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7b4149560be75c68d9874bb650cd1a20</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aab8793c4004717e8a3df985cfa86e22d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a6dbb5d766d355a14f4b68501bb36e703</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetAtPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ac0ffedec6aaa059237db9900a454a064</anchor>
      <arglist>(Vector2f pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8894e84e51733d3be13054df9a4f60e5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a24e9c179de1f8f39ca6c15dd1ab97b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ae071b10b1dd275b7b21b2dc8e0b045f2</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ab8fa96eadd34575b8a2a84923391895b</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ad398e39dc582f530bfd0492566eaa261</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8fcd040ece49ba681d4a49e33222a0c9</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a0826fe366a440cde9efb62dc520cd414</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>abd9db967affeef6e89ec3635a28e5504</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a5c5447ea7d1ffd6e87f2bbe2a935d146</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a294427255e4ed49aa2cf150e7d3d2a6e</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa0f983e4503190f75648b4c68dd44235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedLeaf</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a3ca1a14ea74975a02def0b1245705546</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusNextWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7e0bf072b5396208fc7ca2a8705490c0</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusPreviousWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa48887ce4b7f524910f21d34d9e061ed</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a530b03d553311b0321417543408a04e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a1046a4c1183e1bdfd0a9f15d551c3fa1</anchor>
      <arglist>(const Callback&lt; Widget * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ScrollablePanel::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel.html</anchorfile>
      <anchor>a0b36e9aa468bc6c7d5eef4682c0ddef5</anchor>
      <arglist>(const std::string &amp;width=&quot;100%&quot;, const std::string &amp;height=&quot;100%&quot;, Vector2f contentSize={0, 0})</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::ScrollablePanelRenderer</name>
    <filename>classime_1_1ui_1_1_scrollable_panel_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ScrollablePanelRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a02f40e3fa658e5dbf16d8d2e7225569d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a3f217782c91bef5032647b8a2ca89404</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a5614dde3dae30c3831294a5b8c34eefb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>af8864e287916e789ef8e7b5dbec02121</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a2b899b3395dcb96267ef0a474e97054b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a04ce9e2818917dbaef12a606c26e5ae9</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a9fbece11b51e703587bf9e80ee83d5a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundTexture</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a499ecceeded353970b26dcf2fb397bc0</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScrollbarWidth</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a897d38061f9e0428c72747c6cd5a7637</anchor>
      <arglist>(float scrollbarWidth)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getScrollbarWidth</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>afcc4dae096a1053a2b2406ac46141000</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a911d2909611eefae2cea46aeb2f7a21e</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a38ae2b29cc27ee2f5b6a1b2a03f0ebb7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a388d62660dad3285687e8cd069cda289</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a9916ef31a6d61ce1e914bfb7b3a8e95f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>ab96a814fbf230afec64874b2c5901b69</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>aa1474aa9ba8ceaa2fd15f426e4fc42f4</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>a6f0e48db6b49c83cc14da3b117687bd7</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>aa948111a960e20772754b8b909cb7031</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ScrollablePanelRenderer</name>
      <anchorfile>classime_1_1ui_1_1_scrollable_panel_renderer.html</anchorfile>
      <anchor>acde049f1c2a93b0b7142069a825e6ac2</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::Separator</name>
    <filename>classime_1_1ui_1_1_separator.html</filename>
    <base>ime::ui::Widget</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Separator &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a357b8e5c2f47a6a5324c47dc19ae193c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Separator &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a31284018a5bae96b25d7201af0f5a93b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Separator</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a428e0c9088a8a6ce915788f0755d0c94</anchor>
      <arglist>(const Separator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Separator &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a34a501cc5b09e9721261b3facb2497fc</anchor>
      <arglist>(const Separator &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Separator</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a0ab5f602a4c9c1f653757b01cffd578d</anchor>
      <arglist>(Separator &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Separator &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a88eafd3b5346157fe06e38e4accba19a</anchor>
      <arglist>(Separator &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Separator::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>ae29478534b8e00b09dc3abbaa91815ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SeparatorRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>ad704b51d097a750a0c6c6907c7459e3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a8c61bd1ba727df1b66c3980b1b94caa5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a205faecc06dd4bd325ef685e4ca213b4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Separator</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a41830b3151d19a290ee2dea2da2cf5e8</anchor>
      <arglist>() override=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Separator::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_separator.html</anchorfile>
      <anchor>a6afdf674572c109177c33c06e2c93a63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::SeparatorRenderer</name>
    <filename>classime_1_1ui_1_1_separator_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; SeparatorRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>a6d7a6d80642cf77b781844e660fab0e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>a2d8abf9bd898c337f97eedb46b4339bf</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColour</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>aee64da689a666a0a97a0c083d620c5cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>a4a335c5ba446b7a73199e591167b0765</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>a4d529d3aee354c13bc361c927393ebed</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>afc055b28330d0569bc2e25456282c79a</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>a6865ee0d7e2437b73fec84474a705187</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>aa97895b3c8a204510a49029669a72c23</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>a968a1fbc23f3578275205dcd048e0e3a</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>a0562e786ec641681e34b2179b841d219</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>ab67a3dfa16a40be3fe2c744356546d86</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SeparatorRenderer</name>
      <anchorfile>classime_1_1ui_1_1_separator_renderer.html</anchorfile>
      <anchor>acee821c364157255da04e786da34b930</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Shape</name>
    <filename>classime_1_1_shape.html</filename>
    <base>ime::Drawable</base>
    <base>ime::ITransformable</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a2adff49d5377088a787ab5d5e78e1b2a</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aace9291906a4c3b042650b70d7f3b152e">Rectangle</enumvalue>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aa30954d90085f6eaaf5817917fc5fecb3">Circle</enumvalue>
      <enumvalue file="classime_1_1_shape.html" anchor="a2adff49d5377088a787ab5d5e78e1b2aa766cae017fab4bcc1d1e83fbb9af87c3">Convex</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Shape &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a523d6e5a844213554066ffd8e2723717</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a51e950463607f41272d32b725f641bc1</anchor>
      <arglist>(const Shape &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a855cbd0944967b5c20f2f29cd184c181</anchor>
      <arglist>(const Shape &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Shape</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aeba19c1e906da64099ea1f35efe8e7af</anchor>
      <arglist>(Shape &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Shape &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a6bda6e61750f7489db7250e034e500af</anchor>
      <arglist>(Shape &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aa3098cf8ffc8cde7adb16f977f35efe4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getShapeType</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ae0af9160257c5bf49c14581f214bc126</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ab90bc710480aa08120f355da43006f18</anchor>
      <arglist>(RigidBody::Ptr body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a02ab88051df380b3188f5a4c43dacc38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RigidBody *</type>
      <name>getRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aadc548793f5ba7c5aeb2b9d86ce12be8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasRigidBody</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a0ad598930dc030f93da8e72b4ddbece7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a7228784d060da6750f2816f05d65c144</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a33424011e839c0157b90422030ab0b4f</anchor>
      <arglist>(const Texture &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>Texture *</type>
      <name>getTexture</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a86be4c524fb7519ecc13595fa004b5cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a49f20a202dc872e2317289c5d5a8493d</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFillColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a73e5a769b8bd86f4af8fc65ccf8532c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aeace88d91e94bdee09ee8e4dad9ba75f</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getOutlineColour</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a43fea7c097fe6317c74ccaa78d8d1b81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOutlineThickness</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af36c470d2e5809c7d5371f4a190b8f6c</anchor>
      <arglist>(float thickness)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOutlineThickness</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a1ca4905e8910ffb4283c3c1ca86b1a32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getLocalBounds</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>afd26385a59b4505a28855981eb5c1210</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getGlobalBounds</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ada6248699b13ff029af0f5ea777b67ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a283bf269d05e37bafcdf85d41317264d</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af3017f59a397b4405bf1424bead653d1</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ad8b1e72beffd398c64be419697993a36</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a3be1c9c89ef144fbeb510549aedfc77e</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aee18048dd56be84142dd1dc0c8aea2d8</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a3f82f21625f68ea7ac46c49fd752d090</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>ad3f3ebc572e1b324575ae1af07126444</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a160c8bdea9afb979c7f808ad3f737c4e</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a682678070416426f84d83a2e80fa99b8</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a203ca64eb5d8721db62151d910c0b4a2</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>aa8e7dcf591164a703f60d7797d38b086</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a7a480796831e01bd042e2078f0ba8ad3</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af7439d591633b8bb84b12e0d45552e73</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a98b264b897bc940e68df895b3a04557e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a549d3d6cee255015d8800b750ab49cba</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a594eefa0a97b9421cfa9f8b8b659e99a</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Shape::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>af7d4e4a9f6d0d0226483521996f6ba33</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>afcd6406bb20fbd4473af9e6135579e23</anchor>
      <arglist>(priv::RenderTarget &amp;renderTarget) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Shape</name>
      <anchorfile>classime_1_1_shape.html</anchorfile>
      <anchor>a2fc632629cea230e116ab06cb50e9d4e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a893e90e8498458bd9d43fe9041a22f02</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Event::SizeEvent</name>
    <filename>structime_1_1_event_1_1_size_event.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>width</name>
      <anchorfile>structime_1_1_event_1_1_size_event.html</anchorfile>
      <anchor>a5682fc29dd4114c7650053dd4e6eac6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>height</name>
      <anchorfile>structime_1_1_event_1_1_size_event.html</anchorfile>
      <anchor>aeb259b447d7dcbb2f961323c9eb28a7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::Slider</name>
    <filename>classime_1_1ui_1_1_slider.html</filename>
    <base>ime::ui::Widget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Slider &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a4aa6af6bbb4827c5d160c1b881ec2369</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const Slider &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a9aaf878df6962792328813334b21a9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a9a8b697cdc1b52f9e2bfd1fed8c66f80</anchor>
      <arglist>(const Slider &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Slider &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a9837ea6e941a9ce7612731e50f7e835b</anchor>
      <arglist>(const Slider &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Slider</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a8431479e4ab1e4b4094c646f29c2d30b</anchor>
      <arglist>(Slider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Slider &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a4641b50d4bf1e55375dc0199c320dac3</anchor>
      <arglist>(Slider &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Slider::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>aa488fe265461ceb6666ef87c89c7059c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SliderRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a8cca73cd09212487a169a493cdb06ed7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumValue</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a92e0fe446e175fea138aa37286b5b7d0</anchor>
      <arglist>(float minValue)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMinimumValue</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a27bdd44c19d542280416134ec8070be8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumValue</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a301ebaab9ed4846b832ac156de31bc7e</anchor>
      <arglist>(float maxValue)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMaximumValue</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>afb3b14faccd68275cc6781f42ab3c13d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>ad6afdba1dbce1c0c2cf6335c5f6fb7f3</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getValue</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>abff5e460fd600368697a2de531f3e38f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStep</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a2844a7de0e4bdd73489e6b4ea70bd40e</anchor>
      <arglist>(float step)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStep</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>acff9f4911307891890aebd9ee44d6305</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerticalScroll</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a00961058c2fccc7f969d655fcc538ad8</anchor>
      <arglist>(bool isVertical)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVerticalScroll</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a491532c3b7a230dde3c2766867ea4e5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>ad05722c1a920b56e65768fe33ae89738</anchor>
      <arglist>(bool isInverted)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInverted</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a789fe908186cdc4d7f87b10b956b558c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChangeValueOnScroll</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a3d53bc7598c11d0c8448adf8df6ae702</anchor>
      <arglist>(bool changeValueOnScroll)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValueChangedOnScroll</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a9a0330bbbc778925c7ea3c1f30e6188b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a9cc0447ee3a5835ab745c9875d2d1668</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a170448cdfc5c9b609dbdc9cf0f401813</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Slider</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a48e35a2f32da9a612f193a4abd1229e8</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Slider::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_slider.html</anchorfile>
      <anchor>a5a1ed96a5dee55781633cd8e3f1d609d</anchor>
      <arglist>(float minimum=0, float maximum=10)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::SliderRenderer</name>
    <filename>classime_1_1ui_1_1_slider_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; SliderRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a624735aabe48caa1a243ee1d149dc00b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a5080fdc4ee34b82a923c8bf99c4f7400</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>afa56337693dcbacf9ed164034e6c14b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a18398bdea4168a30d5e6dbe7abca215d</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTrackColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>acbe29cfa838110358791da0a474dc814</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a2c3c9f4524181fe575aaaf3b410eaafb</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTrackHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a3bfa91bcfea86eff76d83e7ff7b9aec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThumbColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a2243ff129752ccaa142b75b8445c19ed</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getThumbColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a24679b088418125df69f7f59a4e44344</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThumbHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a328213d6d7060a5806a98ba7de2dc8d5</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getThumbHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>abb98b8459a86c835d3aee32173d7673b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>ad1f008ee429f1f40f13f424a11eca161</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a17a36e5cf6f7fd3eeca483c33c18333c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a89364380836f6944ce9fbc827b518884</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a2bfad63caf0055db691028d66b12bf71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackTexture</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>ac75540208cea4fca3181a4e642b52f90</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTrackHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a908cd58631c1234e7a919c3f6df44d5a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThumbTexture</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>ada24baabf8e5f69c07643de5070aca7c</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThumbHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a03d6d18234c5875ed3173d650777b76a</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setThumbWithinTrack</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a6a8ccec6eaf3994fa299bbe847e9737f</anchor>
      <arglist>(bool keepThumbInside)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isThumbWithinTrack</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a6855c587cbcb54f51d6dd24ae6c846d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>ad2e2fa325e3843653dc8f2c1fd1abf08</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a623caaf600bff24fd43119d69f9842d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a7443fe4f6d5ba4e438851d2ad8f82110</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>afb19e837ad0491a8169f6fe1d1d1f165</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a7f0bc17454f94a64fbed7a9a11d5d3e6</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a70e7da8c240f858ffcc25f87c121b0e7</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a9f1d2907b9088f13f0a46f55370d88d9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>a4c3e4fe461868da649478059db31aeb0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SliderRenderer</name>
      <anchorfile>classime_1_1ui_1_1_slider_renderer.html</anchorfile>
      <anchor>ab959d1b4f412344b642ea17c25f89a3a</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::audio::SoundEffect</name>
    <filename>classime_1_1audio_1_1_sound_effect.html</filename>
    <base>ime::audio::Audio</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Object &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ad7bb736ac3c2213c99521958fd75c289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoundEffect</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a96b6d3d19a16514a1da9415df368682d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoundEffect</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a5e23c944026b6914e4a3598cd86fbc4e</anchor>
      <arglist>(const SoundEffect &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SoundEffect &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>aee0a1b5a8b5a425d82e91556208272a3</anchor>
      <arglist>(const SoundEffect &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SoundEffect</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>af2fa37ba15038ef2c50dd89ee6519d03</anchor>
      <arglist>(SoundEffect &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SoundEffect &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>ae46ca3e8450a90720d06da894b791386</anchor>
      <arglist>(SoundEffect &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a0911f6d3b5c1b783f7f12f2026dc96f0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSource</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a8925556105530ddd3eddba2dea7bd403</anchor>
      <arglist>(const std::string &amp;source) override</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getSource</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>af2712be0dc5e630bd8bc9ebd46bfa488</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a3a23152356bf18c3f8c9b88611a3a0d5</anchor>
      <arglist>(float volume) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getVolume</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>ad35f06ef1e73acab51e22a143a408d02</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPitch</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a740e867089c7c74b14801bdc1467fad5</anchor>
      <arglist>(float pitch) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getPitch</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>aa310b554bfb15bc6f6cfbf1dc0815706</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoop</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>af1eddad8087afbab5963bdd48b00385d</anchor>
      <arglist>(bool isLooped) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooped</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a68978b0b6a356265310ecd45fa0186c3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seek</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>ae8bbbb910b07dc1da976742cdcd94b42</anchor>
      <arglist>(const Time &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getPlayingPosition</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a4b42613691ad25df85b917a865337cbc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>play</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a8cd47ba9803965487d3e785326872cd7</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a4bb1fb1d03f9456a18c944c70648ba4e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a563b1b905fc76966c8d61d0639dcbbbc</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getDuration</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a37a23a4fb826b8d4ed52230020a04c0e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>getStatus</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a220b9312199847f419bfe9d017c0dcff</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SoundEffect</name>
      <anchorfile>classime_1_1audio_1_1_sound_effect.html</anchorfile>
      <anchor>a315c7ebac713debda2abb9b6ccfb60c1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>aceed0b98ff7d86e61f52c53e0ba778ca</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjustVolume</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a7ea0e35e6f8849c1732eab2a3355855a</anchor>
      <arglist>(float offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMute</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a641456dc11a33b6bea9bcfddaeb6e806</anchor>
      <arglist>(bool mute)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuted</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>aa106dfe9809c7381947c93b70db2ee94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>classime_1_1audio_1_1_audio.html</anchorfile>
      <anchor>a882d301183c31f0a79c1171bbe2974e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::audio::SoundEffects</name>
    <filename>classime_1_1audio_1_1_sound_effects.html</filename>
  </compound>
  <compound kind="class">
    <name>ime::ui::SpinButtonRenderer</name>
    <filename>classime_1_1ui_1_1_spin_button_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; SpinButtonRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>aeb500de43e550bafb0f9a75bc3731f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a0786dede6380ac1fe7b6be113e2c60d9</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a71c326434445b52331f68def1b302f14</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpaceBetweenArrows</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>ac3c4e20650d83e5651d5373f43ffcf18</anchor>
      <arglist>(float space)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSpaceBetweenArrows</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>acbce7efdaed9d2ca64adc20dd365b1d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a1c4500848f267cb96536aec521d77993</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a78d0b254ba8f1c1a16d6cc48f24b6159</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>adc0eae809fbf2855aaa36f2c994531d3</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>ac686f7e19549f70b90ce75055830b028</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrowColor</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a1d1f847b97e24777aeedddcbfb936965</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getArrowColour</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a4f8858a2ad31a0992fcf91ca3de64a7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrowHoverColor</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a01260735c255c6efb1130c06441df804</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getArrowHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>addaaab904b8b7b08c50495aa8e12dbbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a2c6fcc39b3150b4280a6b1632ed47554</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a18ab192f5db1b8ee6529aa624335ab07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpArrowTexture</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a1e7b30b9242510226fde11f06bbb811c</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUpArrowHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>adf8f3ba146896d02e49c283163c401c3</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDownArrowTexture</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a6070e9b8b0402b884459d488a57bce1c</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDownArrowHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>ae8db5825f05188f5e97524876e645e08</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a535aedf3498acfd3a202978062a19914</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>aa3ed0bc329482e6346511ca506c0d51d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>adb3a0617d06113b3f5e03738c4c32fa4</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a3a2dcdbaeca0479f94791d6a623ea350</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>ababd58e46d956abcbf6383cca02c7798</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>ae6e2a6f048cd939f551568a7be3cd6e0</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a71956ad2302d8646e7578735ffff99b9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a8707623da8c16342a616cd68963aaa7a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpinButtonRenderer</name>
      <anchorfile>classime_1_1ui_1_1_spin_button_renderer.html</anchorfile>
      <anchor>a18b7e4b4200dcfdb054e7e24aa9316a4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::SpinControl</name>
    <filename>classime_1_1ui_1_1_spin_control.html</filename>
    <base>ime::ui::Widget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; SpinControl &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a1a203d87881be514a352cc815688ae85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const SpinControl &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a500a26871fe8b9f9ac7404c4d984d976</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpinControl</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>ab8f2cbc5845884909227561f038d5d14</anchor>
      <arglist>(const SpinControl &amp;)</arglist>
    </member>
    <member kind="function">
      <type>SpinControl &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a8e6c7c9bb1abbfc61a982760d14aec3e</anchor>
      <arglist>(const SpinControl &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpinControl</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a66e193c5240c56a1b7cc1172d88fd8b2</anchor>
      <arglist>(SpinControl &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SpinControl &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a9721c4f249313835b57e5034e5f7b89a</anchor>
      <arglist>(SpinControl &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>SpinControl::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a8bf81c263f1364d6727899e58dc046b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SpinButtonRenderer *</type>
      <name>getSpinButtonRenderer</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>af0d50ac790b758312f2829e72a932b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumValue</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a2b6cbb425e70455745270a4cc795f7de</anchor>
      <arglist>(float minValue)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMinimumValue</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a89f0928fe501ad01d1bc8782d7a994ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumValue</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a166597ad60df2627218b71cc8d4d1622</anchor>
      <arglist>(float maxValue)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMaximumValue</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a757960aefefb9d9907977bb98ee2a841</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setValue</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a9bbcdd92f6a18b9eed7b51da6a2df127</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getValue</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>af9d29b734d9b5533ebcce93ca7e4f4d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStep</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>ac5c693b0a007868329a4e0550301de64</anchor>
      <arglist>(float step)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getStep</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a69bd5b88e9a0ce970ef028b7fbeaa3bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDecimalPlaces</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a66909e744990c925c4d7468e58056287</anchor>
      <arglist>(unsigned int decimalPlaces)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getDecimalPlaces</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a7a075c435941451c9695777d8f27faf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a31b2ce7500473b5de1d5237e47b33767</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>ad0879d305a3dc3af54981efe011f8757</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpinControl</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a97a1c7733279bf139f5adfb4c034c427</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14f1c77dcb99eaba385845363242c061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SpinControl::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_spin_control.html</anchorfile>
      <anchor>a4892c384e1a28ac997eac3f63d531ef0</anchor>
      <arglist>(float minValue=0.0f, float maxValue=10.0f, float initialValue=0.0f, unsigned int decimal=0, float step=1.0f)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Sprite</name>
    <filename>classime_1_1_sprite.html</filename>
    <base>ime::ITransformable</base>
    <base>ime::Drawable</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Sprite &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>ad916c96eb4e713d9aec277fd4644cfb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sprite</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a19cc17466df7ab8caf52d9a850b1f765</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sprite</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a02a271db5c794f30b3a45ed8746004da</anchor>
      <arglist>(const std::string &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sprite</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>ac674f97d4b79a74ccba5dbe2af2ccf47</anchor>
      <arglist>(const Texture &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sprite</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a1e9b2c5b07389d19454ffc394be3288a</anchor>
      <arglist>(const Texture &amp;texture, const UIntRect &amp;rectangle)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sprite</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a18bbac3be06283b06745172ebadf1a0a</anchor>
      <arglist>(const Sprite &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Sprite &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>ac1411253e35fb3e220b763b17202f2db</anchor>
      <arglist>(const Sprite &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Sprite</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>ae0b5ff71cc8e23455d64f1bc83d4c48a</anchor>
      <arglist>(Sprite &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Sprite &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a53b0d83aaa109baf3493ebe4b249b27c</anchor>
      <arglist>(Sprite &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>ae95f867250572375b828ce275e245f4d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>af36910f950489479fb006765043cdebf</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTexture</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a9e8e693d0e4f0b3d0a75affaf7efe475</anchor>
      <arglist>(const Texture &amp;texture)</arglist>
    </member>
    <member kind="function">
      <type>const Texture &amp;</type>
      <name>getTexture</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a73700a40de2eb9e25ca7bfa354baf0fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureRect</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a6633cc0966a1714b3bb58754704fe71a</anchor>
      <arglist>(unsigned int left, unsigned int top, unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextureRect</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a7b6e852e0852f17fa87232c4a62ac338</anchor>
      <arglist>(const UIntRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <type>UIntRect</type>
      <name>getTextureRect</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a8a02aca9aa1b5f21f3828c2af7af7924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setColour</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a0f4b3cb549dddaa02558368f4138f4ff</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getColour</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>aff4012cea6d0e52d48c3da239c06ef26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>ace63526dcd3de7993d7a06e0adf8b4e1</anchor>
      <arglist>(unsigned int opacity)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>af66c4ad8241782efed6024e7bba04475</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a491b7d33569eb4ce38fe91ec1f9303a2</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>af1c96095a8f2b50063c4afcacc5fcafa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a14b885f1fd7fbad6c8ec4d536f5c13a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getLocalBounds</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a6923c8e5d34ed7d55cb67b60db8002d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FloatRect</type>
      <name>getGlobalBounds</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a78e0f02a3a3665d973957b6b5d43c434</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a3a604b6fbb7f36f14f0311ba5ce76ce5</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>aa162ebe625be2c4fec65aadd3fb07103</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>ad9a42df0e13b0e5eb23d9108525a6d09</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a487ba9ac8e08fa8c553e8d05f1fc684c</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>af5bd21128856e79b0ce1a56de66a8fe8</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a4e5e2cfc0e570873b3cf06135c3ad895</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>abf82479756127f23b3c9ae14e3ce8708</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a2ad9aeb9a1cdb2d5cc233fc670a8dcc4</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a68c035c58610387597380b30cbc7d47c</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a0db1db47b877c7dfcb1b52d42ad073e2</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a24e369fd3de1786a95a300df386a42f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a7c0b06f217a0934af8e232ba1a998f62</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a3c5e6aaf1a6cb86b7a8a7d49520cfbf4</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>ad91a868fb2b9d470e08e9ee0c7bee05a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a679bb2a789ebc2a4cd6ee90002108089</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a620c32f5dd608c2c5943218cef3f85ef</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>ac236c9bc48c5ed494cd80f921d8c1809</anchor>
      <arglist>(priv::RenderTarget &amp;renderTarget) const override</arglist>
    </member>
    <member kind="function">
      <type>Animator &amp;</type>
      <name>getAnimator</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a91d9ce7d38679d0ba0cb8f09f27db73e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a8800a1ef3f9a140bc27c3dc8f0c55e6f</anchor>
      <arglist>(Sprite &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Sprite</name>
      <anchorfile>classime_1_1_sprite.html</anchorfile>
      <anchor>a2197eb469f44812dd6a2355b0b139f2d</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_drawable.html</anchorfile>
      <anchor>a1e8d316e2a6496204db4d47b9f590fd5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::SpriteImage</name>
    <filename>classime_1_1_sprite_image.html</filename>
    <base>ime::Object</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SpriteImage &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a7eb971034b28a27d79be9905e27a2e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpriteImage</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>ad774c6c724aca0841eca2666f9f0cab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpriteImage</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a6801e895752d6fd2e3c3c28da06da5c3</anchor>
      <arglist>(const std::string &amp;sourceTexture, UIntRect area={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>aea063e6fb65efd2de399e66780c16239</anchor>
      <arglist>(const std::string &amp;sourceTexture, UIntRect area={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpriteImage</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>abb4a126dfa0e23eff8339349bc5c8068</anchor>
      <arglist>(const SpriteImage &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>SpriteImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a3511e200e97514db6c81adfa2875dedb</anchor>
      <arglist>(const SpriteImage &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpriteImage</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a8b283442f209d2fdf6f83e10ba764644</anchor>
      <arglist>(SpriteImage &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>SpriteImage &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a1f22cd49e2bf0b1ee4a57b8d913c111c</anchor>
      <arglist>(SpriteImage &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>ae19da74ce55af46ce12bd8a2921d58ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getWidth</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a72019a8e2482ccd5e6ce0e762c803368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getHeight</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>ae94404a8487de89077e8bbeb0c7712e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a29c88ad4295d33a2c8d246ebd9234cb6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Texture &amp;</type>
      <name>getTexture</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a6c9296160161344aed222d4e2e202522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getRelativePosition</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a55b7d525b91dceb5c9f72958a8f089ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpriteImage</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a4b348c015079976d95a1bb20e8c15028</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a893e90e8498458bd9d43fe9041a22f02</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a8e290d3b14b4faf56a6ae077c2e01816</anchor>
      <arglist>(Vector2u point) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::SpriteSheet</name>
    <filename>classime_1_1_sprite_sheet.html</filename>
    <base>ime::SpriteImage</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; SpriteSheet &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a24e31dd6be77f037bf581ab6f37e6434</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UIntRect</type>
      <name>Frame</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>aa8ce683347e8b8658ade9d3974604654</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpriteSheet</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>af6699f36fe695e4089b707338eb3ec54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpriteSheet</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a48beb4f096ffa8bc7359dcf23a9ddef3</anchor>
      <arglist>(const std::string &amp;sourceTexture, Vector2u frameSize, Vector2u spacing={0, 0}, UIntRect area={})</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>ac17b7b4cf7719f70379e8371a4fe2e30</anchor>
      <arglist>(const std::string &amp;sourceTexture, Vector2u frameSize, Vector2u spacing={0, 0}, UIntRect area={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpriteSheet</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>abafe5f4fe7faa8a0cd06398d5ac98a79</anchor>
      <arglist>(const SpriteSheet &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>SpriteSheet &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a12ff5306563fddba52920f332a7d8183</anchor>
      <arglist>(const SpriteSheet &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpriteSheet</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>ab2d1d2a19602808c2d00f1ad247572e7</anchor>
      <arglist>(SpriteSheet &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>SpriteSheet &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a3ecb5d65add76e9245cb7f48dccc03fb</anchor>
      <arglist>(SpriteSheet &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>afb6273a4d3daa131ba481ef23dd784df</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getFrameSize</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>ae13f3a80ad65da9360cde46a11e6f8cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getSpaceBetweenFrames</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a9735e906af5dd73a1e826ab0ef5a0b65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getFramesCount</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a8e6801a695ca4dbce4174df4ff537fc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Frame &gt;</type>
      <name>getFrame</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>ad549b1ad8df33814316539c89cdc6245</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; Frame &gt;</type>
      <name>getFrame</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>ad8d3a153439db5fc609bce7cf19ca877</anchor>
      <arglist>(const std::string &amp;alias) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Frame &gt;</type>
      <name>getFramesOnRow</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a0dfab39a2d2fdff62700e80cc119739d</anchor>
      <arglist>(unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Frame &gt;</type>
      <name>getFramesOnColumn</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a2d96d3b505d4f2461148d2a9a9f8f842</anchor>
      <arglist>(unsigned int column) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Frame &gt;</type>
      <name>getFramesInRange</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a9db2261e6415b3b3bc8cc656dd394e68</anchor>
      <arglist>(Index start, Index end) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Frame &gt;</type>
      <name>getAllFrames</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a6425187e0a4e9df416bb5680c699d73e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getSizeInFrames</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a8053b53d7b2b91814428bbfdcb8a85d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getRowCount</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a10e8f828f1269db8df6fa44d7db5cbe2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getColumnCount</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a31c06bbe5e4fbd1071b73e3aaefa5f6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Sprite</type>
      <name>getSprite</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a4a72d86d3e7326f14180fa438937f8fe</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Sprite</type>
      <name>getSprite</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>ac2df0cae9b0015475d191a093bcce2b7</anchor>
      <arglist>(const std::string &amp;alias) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Sprite &gt;</type>
      <name>getSpritesOnRow</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>ab2f97a77e076848016c428f623b51bae</anchor>
      <arglist>(unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Sprite &gt;</type>
      <name>getSpritesOnColumn</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>ab411e302ca8fedf7d4a955152f77640e</anchor>
      <arglist>(unsigned int column) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Sprite &gt;</type>
      <name>getSpritesInRange</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a0c86d0546f53d2c82f15f3914ddf5c62</anchor>
      <arglist>(Index start, Index end) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; Sprite &gt;</type>
      <name>getAllSprites</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a3aad74d0614373434ee9cd05ae61a76e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFrame</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a80c3e44c9f081780c3aeb6b7f53ad393</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFrame</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>ad7eb689b9d56a76c2f3985664b90e0e6</anchor>
      <arglist>(const std::string &amp;alias) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>assignAlias</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a4bf2123ae502b7deed7e1d1b29a5a460</anchor>
      <arglist>(Index index, const std::string &amp;alias)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SpriteSheet</name>
      <anchorfile>classime_1_1_sprite_sheet.html</anchorfile>
      <anchor>a3507d23a2140379e1804e9375ff9fe69</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>aea063e6fb65efd2de399e66780c16239</anchor>
      <arglist>(const std::string &amp;sourceTexture, UIntRect area={})</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>ae19da74ce55af46ce12bd8a2921d58ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getWidth</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a72019a8e2482ccd5e6ce0e762c803368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getHeight</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>ae94404a8487de89077e8bbeb0c7712e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a29c88ad4295d33a2c8d246ebd9234cb6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>const Texture &amp;</type>
      <name>getTexture</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a6c9296160161344aed222d4e2e202522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getRelativePosition</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a55b7d525b91dceb5c9f72958a8f089ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1_sprite_image.html</anchorfile>
      <anchor>a8e290d3b14b4faf56a6ae077c2e01816</anchor>
      <arglist>(Vector2u point) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::Tabs</name>
    <filename>classime_1_1ui_1_1_tabs.html</filename>
    <base>ime::ui::Widget</base>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Tabs &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a64cc2c06711d38a81e3a749e1d630431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Tabs &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a9f76d819145b47726d552af388d54982</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tabs</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>ab2c7aa8588bd4828738cea5ee6c63b79</anchor>
      <arglist>(const Tabs &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Tabs &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>afe64152ce06893ef89ea2f856f879b61</anchor>
      <arglist>(const Tabs &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tabs</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>ac17f7a9e8c84dc13711260265872180f</anchor>
      <arglist>(Tabs &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Tabs &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>ac578004fadbefb70710646a197e9e232</anchor>
      <arglist>(Tabs &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Tabs::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>ae1d715ba26d0d788e6ed21d9947a1473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TabsRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a012ec556e4589fa34f5dd5fed4c44976</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAutoSize</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a5e5a27fc1eca9ad6df52e64ae9001218</anchor>
      <arglist>(bool autoSize)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAutoSize</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a5abfd6344cc99f09973c9162f6544c6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>add</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a1f9830c37f3e524afd764f5518f5e5a5</anchor>
      <arglist>(const std::string &amp;text, bool select=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>abd4018b2369767fa68bf2b4d92ed9bc2</anchor>
      <arglist>(std::size_t index, const std::string &amp;text, bool select=true)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>ad78df6b04d3d9ab610729d2ff52af1b2</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeText</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>af0d9a0619f123c1f39a6cff2e155c121</anchor>
      <arglist>(std::size_t index, const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>select</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>aecc3c9ced37da3fa6b91adc3ab35fc39</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>select</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a7213e8acf6197d2df378d6057893ec25</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deselect</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>af9006282804f3343c18813d495d42e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a8229a0d2ff7e79e880f01d9533405856</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>abbe27a68133f9ed4dd8f3eb8be9d33e8</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAll</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a231973d11752495b939a79487a3e1f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSelected</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>aca323af42f9af9763d35446cdb7cd924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSelectedIndex</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a996cb21ce0a500884e5a535ec2aff6f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabVisible</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>afdd538801dfaebc4db25580ec7ec8705</anchor>
      <arglist>(std::size_t index, bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTabVisible</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a5a014a80b34eb159078c6960284b158b</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabEnabled</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>aa08ea019bbcafa877400512e5553bad1</anchor>
      <arglist>(std::size_t index, bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTabEnabled</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a746264d04d18c332b5af6c9092ac27a5</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabHeight</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>ab4835f1e67e88da928d55ed6a01e8234</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaximumTabWidth</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a6b1ea0449911642bae3921175dbb84b7</anchor>
      <arglist>(float maximumWidth)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMaximumTabWidth</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>aa0adf8dd315a3028ade797924132ddb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinimumTabWidth</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a3a2e1aebc19d90d466dbcb7ffed1e27e</anchor>
      <arglist>(float minimumWidth)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getMinimumTabWidth</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a771c0f1f3d127b2b8355067d73306d1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getTabsCount</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a07bf1f216feac152334ae59dcc171015</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>aaaeec1176763bfec7b7c04fed980d9fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a4c91cb1c0ee997203bf8471551948fc5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tabs</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>aa709f43b595d47cd25e6056732a67e5c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Tabs::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_tabs.html</anchorfile>
      <anchor>a1aa7447b98c2ef82f0a65c53363b0344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::TabsContainer</name>
    <filename>classime_1_1ui_1_1_tabs_container.html</filename>
    <base>ime::ui::Widget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TabsContainer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a0e3876d0f35a5d12bbb08b12fd194eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const TabsContainer &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a5f596a11766087af6c3649a17459180f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TabsContainer</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>af4076c14374137c39830af99bc5dad23</anchor>
      <arglist>(const TabsContainer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TabsContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a05f29b21098b9aa120301fb65b693980</anchor>
      <arglist>(const TabsContainer &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TabsContainer</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a04373069b7fbea59c7bd61ef4ca3f471</anchor>
      <arglist>(TabsContainer &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TabsContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a4082d7c32336b1b7b774d40fdda7eaa4</anchor>
      <arglist>(TabsContainer &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>TabsContainer::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a2c35ce1e12436603b6b4fcd7b31b1ccf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TabsRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>ad96e13c3d949cb50420c360411b934fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabsHeight</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>af560aa7ca44b871c8fa57e1b0857333a</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>Panel *</type>
      <name>addPanel</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a2cb993f09535139046fcbad8e7206a1a</anchor>
      <arglist>(Panel::Ptr panel, const std::string &amp;text, bool select=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>insertPanel</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a78371dcdfa406c49b34dd7959bc4c9af</anchor>
      <arglist>(Panel::Ptr panel, const std::string &amp;text, std::size_t index, bool select=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removePanel</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a5c6fa9cbdbb41291887306828d98385f</anchor>
      <arglist>(Panel *panel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>select</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>afbe56f26b51e26b3aaa89f2882a1e70f</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getPanelCount</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a7b0ec7509cc05e937619f574ff2aa9f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a378bd46824658dd621e07213e6ea65e5</anchor>
      <arglist>(const Panel *panel)</arglist>
    </member>
    <member kind="function">
      <type>Panel *</type>
      <name>getSelected</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a77ffee8c41728716fd4c650f5bbcd5df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSelectedIndex</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>aad02187994afa42b52fbb134b384eea2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Panel *</type>
      <name>getPanel</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a117418e4d36381546cf6b0cf6abd4631</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>Panel *</type>
      <name>getPanel</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a9921b4c2a99b1965a999f7c31b3e8b7b</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getTabText</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a65b6dac25010bcbbe936157c468b2fb1</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>changeTabText</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a9595747a4f6c295498fa7e0463268691</anchor>
      <arglist>(std::size_t index, const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>ab91939cc84052bba891d0627994de7a5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a018250694a63f45074260c7a8e53ae4e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a4610a00fcb7815dd506984ce9e885c85</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a948c595cf0f29cce8ff85ba02f21531a</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TabsContainer</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>a893231e549a3c66bc05745b3efce67ed</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TabsContainer::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_tabs_container.html</anchorfile>
      <anchor>af5406681efed77411fa06450dd7f7d66</anchor>
      <arglist>(const std::string &amp;width=&quot;100%&quot;, const std::string &amp;height=&quot;100%&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::TabsRenderer</name>
    <filename>classime_1_1ui_1_1_tabs_renderer.html</filename>
    <base>ime::ui::IWidgetRenderer</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TabsRenderer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a282b4a9e71e7f2f5ee13542f3bc6d814</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorders</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a64bf5d49786b51f5c34dbb0babbe95e0</anchor>
      <arglist>(const Borders &amp;borders)</arglist>
    </member>
    <member kind="function">
      <type>Borders</type>
      <name>getBorders</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a219ac1839acd60f65849444e68143d92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a4e7cadd94192a7e573e92532545487d1</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>aec916f47c83a29eec19a2148e50cd280</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a3a670d5ac6110002246327d1c1a48fbb</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ad649ef429fb69e4446fadf2b71bf30b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a8e4048c27bca94de2e4b72466e2397c1</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>aa4aa98e163b0f91d8f9cac9a2f11eb57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>add65a95185694d6f9b941e44115af279</anchor>
      <arglist>(Colour backgroundColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedBackgroundColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a69e22e848501a3f451587c9ccab962c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ab599a0f1017877e2a229ca6151e89db5</anchor>
      <arglist>(Colour backgroundColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedBackgroundHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ad64433bfda6e5f4c89ac59059bc6231a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a21d8d8481fd1114a2a97d79c62ef8bb5</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a9de3f3bfbc1ac2de38252659d0d93e49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a1e54c16c922e32b9b550e7e1c7396ce2</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a87111d47ac047b3024b5c62cba84e1d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>aa5f7dd24883256ff414df95823622bed</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getDisabledTextColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a39ac23e0bb7a31a332b27e56fbf03af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a1e522204deb0a9732662ead2d1b59b8f</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedTextColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ae767817b59cdb37b765a0094df39ba58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedTextHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ac66b1fa640d4e73ec3918f89f058cf64</anchor>
      <arglist>(Colour textColour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedTextColourHover</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a4e8178ebf07a2f4004497602da601890</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a524372b0024546bbf0507758c26a97f5</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a9fbe3cc14135b624ed5cfbbc52850873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a9b85ee6ff66f4edb065066dfdc4c71cc</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>acb8e377a7906a8c7efbba8b8c3d7dce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ae99a616d8f82186d89dfa0b61b02034e</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedBorderColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a20e2d460683637a8be8e2fadc2bc7c31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>aba34606ee371731fca41c3af60164195</anchor>
      <arglist>(Colour colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getSelectedBorderHoverColour</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a56d811d731ba75abf20df472a8a47e44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabTexture</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a56416691835c8c47e531b1373c6cd150</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTabHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ad41ed7ec6f8c3b8d3bf82f14f32eb5c4</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedTabTexture</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a953c1cda102ecb0c61bff616e3edf98c</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSelectedTabHoverTexture</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>abbf919af7b4d54b276a8bc69aefe5208</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisabledTabTexture</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ad2b7ff888b21df7683d71a983ef4f3e7</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDistanceToSide</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a4463cd06b113778ef054bb0d8283985f</anchor>
      <arglist>(float distanceToSide)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getDistanceToSide</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>af04d1f92cd472ad6220993e82c492be0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacity</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a71b22e8b4515e402882e41baaad91924</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacity</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ae0fdf1575dae8d3809707754806ba6d1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a4524bae35fde00772f3db1b2a34a6de4</anchor>
      <arglist>(float opacity) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getOpacityDisabled</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a793c70bc5f9bbe225e8987d3595fd166</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFont</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a30be69bc6a64b200f806cf70f7270cf8</anchor>
      <arglist>(const std::string &amp;filename) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ignoreTransparentTexture</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a07cd3d24113b2f947fcec240a09df907</anchor>
      <arglist>(bool ignoreTransparentParts) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTransparentTextureIgnored</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>ad87e295cf7c9db70dbc853b6dd7d3d43</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a76ae8ad8992746afe5f685285d9bbbb1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TabsRenderer</name>
      <anchorfile>classime_1_1ui_1_1_tabs_renderer.html</anchorfile>
      <anchor>a749a27a299baee93e020d19f5b5435e8</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::TargetGridMover</name>
    <filename>classime_1_1_target_grid_mover.html</filename>
    <base>ime::GridMover</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; TargetGridMover &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>acb2fb126bcdd0f8c089aa71026ef355e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a07b612eb1a30ee0d7012a891a805e93a</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aae1ba155a9f2e8c3be94020eef32a0301">Manual</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa64663f4646781c9c0110838b905daa23">Random</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aac41a31890959544c6523af684561abe5">Target</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aad71670d62b238eaf063979407361034e">Cyclic</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aaa55529813aef6ca28b9d22ee0442e02b">KeyboardControlled</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a07b612eb1a30ee0d7012a891a805e93aa90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MoveRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a62c372e0dbb8e5a0be9b8fa5fd9724fc</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcab1c94ca2fbc3e78fc30069c8d0f01680">All</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fcac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca9ac677ee4eec25d9e59707a661d2c5e1">Diagonal</enumvalue>
      <enumvalue file="classime_1_1_grid_mover.html" anchor="a62c372e0dbb8e5a0be9b8fa5fd9724fca3e85a6323568ffe699745b4eef821495">NonDiagonal</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>TargetGridMover</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>ab2e0e14768a934ec5730d186f150e708</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *target=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>ad52bbb5eb1a4052656dda478b89e4c6e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPathFinder</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a48987d1e2fe8c55b07e45726d3c92e54</anchor>
      <arglist>(std::unique_ptr&lt; IPathFinderStrategy &gt; pathFinder)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getPathFinderType</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a13825a8f1d5ceef29742fbd770b1eaaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestination</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a6c47f0e7ce429200ab770d5c2cdd0827</anchor>
      <arglist>(const Index &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDestination</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>afc428a0d3594a35358d76655838a3c19</anchor>
      <arglist>(const Vector2f &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getDestination</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a2cb16e8b4ed5532ba1237141d70f742d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDestination</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a4e3169722296e475ae94cd0dde1b5c49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::stack&lt; Index &gt; &amp;</type>
      <name>getPath</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>afe799b95f47e9bb34e7436f7817d4722</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearPath</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>ade50a634406c18021f994283702a0907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDestinationReachable</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>afaebe9b460cf77ef7ee1212359b71075</anchor>
      <arglist>(const Index &amp;index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDestinationReachable</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a499e4bca46050c9e5f8b69b350a91382</anchor>
      <arglist>(const Vector2f &amp;position) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startMovement</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>acf9d65dd47d96148be35af6e615b2cda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stopMovement</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a09b339c8b28d83ab65247aab40570d06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdaptiveMoveEnable</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a12cabfa262b6cc45d9ede24ed503d835</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAdaptiveMoveEnabled</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>ac1a11da222fcd5ea60a3588adc194643</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestinationReached</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a462a6e612366d8baf7e15b83cbc71755</anchor>
      <arglist>(Callback&lt; Index &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPathViewEnable</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a8a77cd910f82fa19210873cc2f43f152</anchor>
      <arglist>(bool showPath)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPathViewEnabled</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a739c29a8ac4ad6a2ee9012138be9281f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onPathGenFinish</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a0699481b3d24a96d677b828712c0be71</anchor>
      <arglist>(const Callback&lt; const std::stack&lt; Index &gt; &amp; &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TargetGridMover</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>af46ab15420ad59e91c96d948e10f9e61</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8e3a0ca52ae74832ef1525671ba1b49c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>syncWith</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a0627539f4f7e59a9905c4d9d37396089</anchor>
      <arglist>(const GridMover &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>requestMove</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a82d5a2809795725446f88f0ed90f4c71</anchor>
      <arglist>(const Direction &amp;dir)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; bool, GridObject * &gt;</type>
      <name>isBlockedInDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a266600fc2eef282439b2d507b358c427</anchor>
      <arglist>(const Direction &amp;direction) const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a39ab796c7ce3807533afd9d64bce8425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Direction</type>
      <name>getPrevDirection</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a986f4a16ef608e0873ee2c8a1455c65f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2b8a2eb07cdf61592f63a32e8e88436f</anchor>
      <arglist>(GridObject *target)</arglist>
    </member>
    <member kind="function">
      <type>GridObject *</type>
      <name>getTarget</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa519ad160ab2062363eb65a596f61d4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ada3898f9de6562ae8ff0ab9a6b7c813f</anchor>
      <arglist>(const Vector2f &amp;speed)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getSpeed</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6d91709a02eb517e68edb798949bd91d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a3a9c1ee303df652a29e07ac33ecb00b7</anchor>
      <arglist>(float multiplier)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getSpeedMultiplier</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>acf2934181430189656188257bd77ed5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a121bf39232196e459b0c0b619e963c7b</anchor>
      <arglist>(MoveRestriction moveRestriction)</arglist>
    </member>
    <member kind="function">
      <type>MoveRestriction</type>
      <name>getMovementRestriction</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a04e9f2ca7f76fd6c6278797ab46e6a65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMovementFreeze</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a2a264750eeefd2cacf760ad9d785d3a7</anchor>
      <arglist>(bool freeze)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMovementFrozen</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7f7c162f7555b076e7a490baca60edcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getCurrentTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aaf9fa52e0e29d28c988b1d645e1e29ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getPrevTileIndex</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a75dd6cd8343b1741e88ff8de80c5830f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af8722af658036b2f6b7b40fe5bdbf1e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grid2D &amp;</type>
      <name>getGrid</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a7872637d83ac8efddac5a4bf956469f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTargetMoving</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>af2f703bf9dfc0c91c76716dac3ded84a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>teleportTargetToDestination</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a1861b96d89d9bc4539eda2cdacd356b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDirectionChange</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa54c01c573b9b968117a0b5ef0fd8618</anchor>
      <arglist>(const Callback&lt; Direction &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetTargetTile</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ade350b65cfb3791254d942550882b895</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTargetTileReset</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a77f61b75e33ec1e8ef9a3da3076938d0</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveBegin</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>aa8181e77c50a31a9200e7f64120144ec</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMoveEnd</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a37f1bbb0367901e3f8b79dfb4d764e8e</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onObjectCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>ae56a395c13ead1ca472909d9d1f77993</anchor>
      <arglist>(const Callback&lt; GridObject *, GridObject * &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onBorderCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a8a29c1e5ea9348913794d21428197b13</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onTileCollision</name>
      <anchorfile>classime_1_1_grid_mover.html</anchorfile>
      <anchor>a6a0ec54bb9214803536761cc7cd9a18a</anchor>
      <arglist>(const Callback&lt; Index &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TargetGridMover::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_target_grid_mover.html</anchorfile>
      <anchor>a3c6bde5b5b68b88119fc7e01b92389c1</anchor>
      <arglist>(Grid2D &amp;grid, GridObject *target=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::Event::TextEvent</name>
    <filename>structime_1_1_event_1_1_text_event.html</filename>
    <member kind="variable">
      <type>unsigned int</type>
      <name>unicode</name>
      <anchorfile>structime_1_1_event_1_1_text_event.html</anchorfile>
      <anchor>afadd4626e3284fcc3da376232923ef78</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Texture</name>
    <filename>classime_1_1_texture.html</filename>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Texture &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>aebfe80ac2b113c14d34e554a976b150d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a81d00bc58b9a2f910ad5ac463e9a32b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>abe9596804f8a153ad17fd9af0bc8e255</anchor>
      <arglist>(const std::string &amp;filename, const UIntRect &amp;area=UIntRect())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a65e946efaae4edfb0b95c6880eddd2f4</anchor>
      <arglist>(const Texture &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Texture &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>abaf33fb3d69bb56dc588de6329556120</anchor>
      <arglist>(const Texture &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a91d9e67495384ca09640b2e8ad864f2d</anchor>
      <arglist>(Texture &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Texture &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a2ab2378c3e8b9e239350b17b94420127</anchor>
      <arglist>(Texture &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>create</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a6f103a1227d8e53b8d2e17dc57a3d86d</anchor>
      <arglist>(unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>create</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a6b1c7d186234f3de1543ecd74e13cc2f</anchor>
      <arglist>(const Vector2u &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadFromFile</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>ae4aad4b748f2c8a51d81b54d49e79c4c</anchor>
      <arglist>(const std::string &amp;filename, const UIntRect &amp;area=UIntRect())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>saveToFile</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>ad03a23b4e944c1d54abd7ad3c385f993</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a3cb11e7c3e65ad5b384950e00a780dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSmooth</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>ad739709446c185c8a40aa72cb513f675</anchor>
      <arglist>(bool smooth)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSmooth</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a7198406390898ae9ac5fb13844aa763f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeated</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a859f11f67686e1b70a3002617c4ee97b</anchor>
      <arglist>(bool repeated)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRepeated</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a6bc86ffe1df91ceba49178cd56f11e44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getFilename</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a818de9f0c99793165d0f39f79cdc11dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a04c6a48269796044afd2c220bf2d19af</anchor>
      <arglist>(const Texture &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Texture</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a6e868b92b306b3049d1c8b571cab0196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>getMaximumSize</name>
      <anchorfile>classime_1_1_texture.html</anchorfile>
      <anchor>a82dad2c24e6ad5f8d88c5d1b9e06a05a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Tile</name>
    <filename>classime_1_1_tile.html</filename>
    <base>ime::Drawable</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Object &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ad7bb736ac3c2213c99521958fd75c289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tile</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a764b60d1b25564b84ad37b3d5fc64e84</anchor>
      <arglist>(Vector2u size, Vector2f position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tile</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a8ae7011339a177992986e43dfe103254</anchor>
      <arglist>(const Tile &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Tile &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a2b4307182a3e020a80697ef0fc5915e7</anchor>
      <arglist>(Tile)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tile</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a91cea8e2a38ef454800a4168501af8b1</anchor>
      <arglist>(Tile &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>Tile &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a8660f61895650d9c74b04715d0d5918e</anchor>
      <arglist>(Tile &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a7dae6a638e7ebffb1de0409679e50be6</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>ac14db9b8aff1713f1c7b85831e9b9741</anchor>
      <arglist>(Vector2f pos)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a94c226f52b8eecd56e1037938319723f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>aea4416f83a40cee65fc375dece55c718</anchor>
      <arglist>(unsigned int width, unsigned int height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>ad41bf618dfe02e234fbb1c9debcf608d</anchor>
      <arglist>(Vector2u size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>aca3780e9f79f6e5786f622959635dd20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a6417d52a3754863e5c67e31f9e89864f</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a1da5d77942660800ea2434793fa76598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndex</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a7b17f334c4a095e2537db6a3c920cc6c</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getIndex</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a8349050cba6762e7b5b0d605ec76b411</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setId</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a7c1eeff8113732d9a3e65a17f0dd523d</anchor>
      <arglist>(char id)</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getId</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>ab50da7b02c2e3321f8ff5663d80ebf61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCollidable</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>ac4d52b74a581a15eb12ca63d431d5927</anchor>
      <arglist>(bool collidable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCollidable</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a35a3d9891cef7aae55a3120eafdd3166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillColour</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a29fed02470d031230d61c422a43bdc90</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>Colour</type>
      <name>getFillColour</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>af0e6fda9a7497706a79f841980af3c5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassName</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>abfd5a642b933440ded393a0285e28f14</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getLocalCentre</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a12c0bc7015a4b972b636abf15c91bbd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getWorldCentre</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>ad2af75c0c3441a31d2249cbeb643243a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>ad1b07df97b211a25be06ca5d76955243</anchor>
      <arglist>(Vector2f point) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attachCollider</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>abad48940a836e110616d05cb425e5756</anchor>
      <arglist>(std::unique_ptr&lt; BoxCollider &gt; collider)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeCollider</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a53938a62b1b3a24d9d0b1b1290347a44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCollider</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>acb92e10aaf79d3c0dd7710415b6e063a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a23ec69dd3ab49c15327418fa3b2368a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a3a8bdc37bcbf5f2fd019ead4802e1e0b</anchor>
      <arglist>(Tile &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBody</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>aa2dc5cfc2044f867883fc0900984a5fe</anchor>
      <arglist>(RigidBody::Ptr body)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>draw</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>aa00369758cb942fc8a7b55996aa13e29</anchor>
      <arglist>(priv::RenderTarget &amp;renderTarget) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Tile</name>
      <anchorfile>classime_1_1_tile.html</anchorfile>
      <anchor>a699dfad44e8792224cfb14fe4e0716eb</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getClassType</name>
      <anchorfile>classime_1_1_drawable.html</anchorfile>
      <anchor>a1e8d316e2a6496204db4d47b9f590fd5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aed3c3b9d74f3f5d26f1eb9ad2e8dbc1c</anchor>
      <arglist>(const std::string &amp;tag)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTag</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ab83221ea2cf2002ee4657cc8b3d39c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getObjectId</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>ac2e9c8f45f13c68e129775bc058231af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a0a5d4f512ca54743a3d5ab21c2022050</anchor>
      <arglist>(const std::string &amp;property, const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a50e4e9783f6eb2de80ae33435381f453</anchor>
      <arglist>(const Callback&lt; Property &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>aad38f902db7325b4898fdbe2830ef898</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>acedadb2161e63cb84f2964e3e4b03b4f</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a62658e4b24f61452ae7308f8bdf23994</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a33f5fcb279d0bd9f58faffe663d19554</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a13cca84e762939e48b6949d0aa87e571</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSameObjectAs</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a3c92fb0cf8a7b25988b91c01ccb3320c</anchor>
      <arglist>(const Object &amp;other) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitChange</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a18e26cf15b23c3f2a349ace7ec17cb2f</anchor>
      <arglist>(const Property &amp;property)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>emitDestruction</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a287b8c6ccf353b6fafcab97110ad7f42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EventEmitter</type>
      <name>eventEmitter_</name>
      <anchorfile>classime_1_1_object.html</anchorfile>
      <anchor>a805a30e8835e41133a4bdbfbed2e1b52</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Time</name>
    <filename>classime_1_1_time.html</filename>
    <member kind="function">
      <type></type>
      <name>Time</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>aaddeacf5b835156cf671c996f67a5ce7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Int64</type>
      <name>asNanoseconds</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a53f6620a3f47da3644e248904beb9fb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Int64</type>
      <name>asMicroseconds</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a809403dc7883e272ef026ae9101eb60d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Int32</type>
      <name>asMilliseconds</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a0f26589255608b2412c5c97deb898d43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>asSeconds</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ae107f9e8e4764a67bd2d201ebcd5643a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Int64</type>
      <name>asMinutes</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ab485440f0c810ba06f1cc1fedc1d87a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Int64</type>
      <name>asHours</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a064711d2bd19621cd9ae90c684d8ad47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Time</type>
      <name>Zero</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a52c83eeb1308450a0eb9d4308e96d986</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>nanoseconds</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a8e77bdb4cde34da37eb6a27121ff6f0e</anchor>
      <arglist>(Int64 nanoseconds)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>microseconds</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a9d576fc3e79537b45b768b63128c0ca1</anchor>
      <arglist>(Int64 microseconds)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>milliseconds</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ae8a7c2938d3e3fd2b34c70be33637ec6</anchor>
      <arglist>(Int32 milliseconds)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>seconds</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a1b6272b447ec9bc577d62268bfd21142</anchor>
      <arglist>(float seconds)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>minutes</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ac438da8e2f1996d63771d7913e9c6fda</anchor>
      <arglist>(Int64 minutes)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>hours</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a8f16080cd48956f7d0460d738954bc85</anchor>
      <arglist>(Int64 hours)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator==</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a8c750317a9adb1361cd7418d37bb2232</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator!=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>acd66ce789f54281b55eaa13bdb44c263</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator&lt;</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a91b689ad53578d97f8a6ce2212b8b6f2</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator&gt;</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ac949a9c11595cadb0bccfcb79dfa5ded</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a7f73ba1c0e054d73865f6e35a727031e</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ab9e61688b199c88d530e69cffc1c31f3</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a02613ed6f347f5f3546ae3dc7c7f4620</anchor>
      <arglist>(Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator+</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a87d1be3d9b0ef2a657f6765b7d345dd1</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time &amp;</type>
      <name>operator+=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a1c355cb28331d4c71ba6e5753fc96457</anchor>
      <arglist>(Time &amp;left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>aefd6b5aee8e31f5ac849fbcbaa72cdb9</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time &amp;</type>
      <name>operator-=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>afc5a79b2e303cfad20e9aa1f81403c72</anchor>
      <arglist>(Time &amp;left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator*</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a30c48d32c5f626822147bba6aaaa8e45</anchor>
      <arglist>(Time left, float right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator*</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a1cfe552b21467b0825a4f14f8862abcb</anchor>
      <arglist>(Time left, Int64 right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator*</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ac5d8abd2a7a51a7e2755c13d55044f57</anchor>
      <arglist>(float left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator*</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a8ecdd5def09244f65bcce81517e5af67</anchor>
      <arglist>(Int64 left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time &amp;</type>
      <name>operator*=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>aadeffcf1305f9bc94cbf339cfddc31b6</anchor>
      <arglist>(Time &amp;left, float right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time &amp;</type>
      <name>operator*=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a01c6d184ac31c86b834ea140e1a4950b</anchor>
      <arglist>(Time &amp;left, Int64 right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator/</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ae3da802d5fcce1f1b2b0fdfb8dc4224c</anchor>
      <arglist>(Time left, float right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator/</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a1506fb02745c899f0ed120f5e21125f7</anchor>
      <arglist>(Time left, Int64 right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time &amp;</type>
      <name>operator/=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>af92aeb815b5f54e928dadfc9fae28a7d</anchor>
      <arglist>(Time &amp;left, float right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time &amp;</type>
      <name>operator/=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>a797135f7cb704994e7799c170908bfc2</anchor>
      <arglist>(Time &amp;left, Int64 right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API float</type>
      <name>operator/</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ab154cc8d2187e90eed5775e09cae46af</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time</type>
      <name>operator%</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ab584c71442eccd045c07124a71b3a1be</anchor>
      <arglist>(Time left, Time right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Time &amp;</type>
      <name>operator%=</name>
      <anchorfile>classime_1_1_time.html</anchorfile>
      <anchor>ab4505b37dc9bad8ead8129dea03248c5</anchor>
      <arglist>(Time &amp;left, Time right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Timer</name>
    <filename>classime_1_1_timer.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a4805f86c2d16e8a7c75aa6eb4fc5b45c</anchor>
      <arglist></arglist>
      <enumvalue file="classime_1_1_timer.html" anchor="a4805f86c2d16e8a7c75aa6eb4fc5b45ca5bda814c4aedb126839228f1a3d92f09">Running</enumvalue>
      <enumvalue file="classime_1_1_timer.html" anchor="a4805f86c2d16e8a7c75aa6eb4fc5b45cae99180abf47a8b3a856e0bcb2656990a">Paused</enumvalue>
      <enumvalue file="classime_1_1_timer.html" anchor="a4805f86c2d16e8a7c75aa6eb4fc5b45cac23e2b09ebe6bf4cb5e2a9abe85c0be2">Stopped</enumvalue>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a99cfdcf7da5b2568420161ae9a6a63b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>ae72ce32a4518e25f25171421c9f6d1ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterval</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a917f8367eca39efa0175a42074055c34</anchor>
      <arglist>(Time interval)</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getInterval</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a7065cf6691bc95a80e2b921a405563d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getElapsedTime</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>aa56692c7dba558fcd37f4cf984384e18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Time</type>
      <name>getRemainingDuration</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a4996680e1c22d4831d0f7a2e77ce8de4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRepeatCount</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a8f7bbbbd8f275600e21c05d9cd7d0ff1</anchor>
      <arglist>(int repeatCount)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRepeatCount</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a367d0504bb99e7bad7ed0dbe4b541b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRepeating</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a6039b46a92d809664b339f688aa1dc52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLoop</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a9064c89a910428ed143b36c1abfff836</anchor>
      <arglist>(bool loop)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLooped</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>aa1c9fa2789f7809ed053fb3dcad7f9c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>ada54b9cd49e8bd5cb8c24a78cb01d5bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stop</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>ae5db0e692b2ed88a04be689aad339928</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forceTimeout</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a0b343c18fd5f0e115317ffe75b0aa549</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pause</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>ae75eb3872ef3cf3ae577380c017bfdd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resume</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>ab6898f0d2370dfdca0752b99adb4bbc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restart</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a079b17e3b3215ef8d869aef75b437f2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Status</type>
      <name>getStatus</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a2ea17343aeb1a007f8f3546a458e4ba1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRunning</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a868662fbe641b3f915ca1262dbd09c5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPaused</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a8e78c71944440be0ba58bdb5d9aa3710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStopped</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>ad64b90f342dfe8a4674bcab649543034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getDispatchCount</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a9614b838fc1ced14e3fdf4b0d4c46066</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDispatched</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>ac6e539dd728a3b493b486d4db9afe4b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimescale</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a04163d7776aeee7728baaf5e7be63454</anchor>
      <arglist>(float timescale)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getTimescale</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a5bc7bbbf9f1611497c1fc6c18c2b4b12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onTimeout</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a29667f218de14c89f31c4c14fafd2506</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onTimeout</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>afb3439708bcb636552bd30411b2e29cb</anchor>
      <arglist>(const Callback&lt; Timer &amp; &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onStart</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a2e8f638ae4f62a0fb538fb3ea4a981e5</anchor>
      <arglist>(const Callback&lt; Timer &amp; &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onPause</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a1e08008208d5df70eb80c25913ff5d2c</anchor>
      <arglist>(const Callback&lt; Timer &amp; &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onResume</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a149f8dc228c603a6955f6fbdc562bf07</anchor>
      <arglist>(const Callback&lt; Timer &amp; &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onStop</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a9198f6ed46d626eab2cdd7e1e2ea2f84</anchor>
      <arglist>(const Callback&lt; Timer &amp; &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onRestart</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>ae467126b3b398e60c08fb5d892c1e611</anchor>
      <arglist>(const Callback&lt; Timer &amp; &gt; &amp;callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onUpdate</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a7a2546679131109878659423ff41f510</anchor>
      <arglist>(const Callback&lt; Timer &amp; &gt; &amp;callback)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>a23c3d7c5a40698f4fcad1a7a7d0a2002</anchor>
      <arglist>(Time interval, const Callback&lt;&gt; &amp;callback, int repeatCounter=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Timer::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1_timer.html</anchorfile>
      <anchor>ae5ea219ab60f31675e7f19db534f8cf4</anchor>
      <arglist>(Time interval, const Callback&lt; Timer &amp; &gt; &amp;callback, int repeatCounter=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::TimerManager</name>
    <filename>classime_1_1_timer_manager.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_timer_manager.html</anchorfile>
      <anchor>a35b34ad0bd86ecee680476c47c3702b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Timer &amp;</type>
      <name>setTimeout</name>
      <anchorfile>classime_1_1_timer_manager.html</anchorfile>
      <anchor>ac6aa441a12f6bf16c77b378650d5e3f7</anchor>
      <arglist>(Time delay, Callback&lt; Timer &amp; &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>Timer &amp;</type>
      <name>setTimeout</name>
      <anchorfile>classime_1_1_timer_manager.html</anchorfile>
      <anchor>a8fb893f0cb0f55d78349a6645858dc1e</anchor>
      <arglist>(Time delay, Callback&lt;&gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>Timer &amp;</type>
      <name>setInterval</name>
      <anchorfile>classime_1_1_timer_manager.html</anchorfile>
      <anchor>aca5f2a216dd3018a52373bb79d30d1e0</anchor>
      <arglist>(Time delay, Callback&lt; Timer &amp; &gt; callback, int repeatCount=-1)</arglist>
    </member>
    <member kind="function">
      <type>Timer &amp;</type>
      <name>setInterval</name>
      <anchorfile>classime_1_1_timer_manager.html</anchorfile>
      <anchor>a779a97377f80621a7e4b80408cccf7e9</anchor>
      <arglist>(Time delay, Callback&lt;&gt; callback, int repeatCount=-1)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getTimerCount</name>
      <anchorfile>classime_1_1_timer_manager.html</anchorfile>
      <anchor>a7b5ed28d0aa3e92f2c7f39914a74cedc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>classime_1_1_timer_manager.html</anchorfile>
      <anchor>a441444781e0e7d812a7157f686de994f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::ToggleButton</name>
    <filename>classime_1_1ui_1_1_toggle_button.html</filename>
    <base>ime::ui::ClickableWidget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; ToggleButton &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a5dc0c97e0dd73aa7a2215e4d245dee0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const ToggleButton &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>af787629e603ff3ae201b78c6329b2a97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToggleButton</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>aeaa312a58960c224d3774d0101be23a2</anchor>
      <arglist>(const ToggleButton &amp;)</arglist>
    </member>
    <member kind="function">
      <type>ToggleButton &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a1d878291454861286f7edcd3395028fd</anchor>
      <arglist>(const ToggleButton &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ToggleButton</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a78dae4cbbf4a9dcc06ffad567a28cdb1</anchor>
      <arglist>(ToggleButton &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ToggleButton &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a8b238f007bb4c47e6e440c64f5032479</anchor>
      <arglist>(ToggleButton &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>ToggleButton::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a4d200c354c077fef8f166a68ac4e5655</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ButtonRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a29e9b405104c8e3f7ff440fbfaf39fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setText</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a05c08c4ebed9fc610af3e11563250f0b</anchor>
      <arglist>(const std::string &amp;text)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getText</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a779b54346420c7976d09566b6caf2b0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setChecked</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a7001df943d4f786be20839666daf4556</anchor>
      <arglist>(bool checked)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChecked</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a0032d4cd906e48ca7765f181cb455342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a241f29dfad7d0f3a5c503fbba460b942</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a8c3aab079381eaedd4304ebbecc2a348</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ToggleButton</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>adc85efa4ba8a78f7f363baffa48fc226</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>af9e2710fa80d4302bfcf3bbe598a7f9d</anchor>
      <arglist>(bool isEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>aef17b82d68a97101bed11d120b0cd3fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleEnabled</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a3873c38840d4d313d03aeb6894511e94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a9d4deb57bcd9d3cfb390d4d7e941ab62</anchor>
      <arglist>(bool isFocused)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFocused</name>
      <anchorfile>classime_1_1ui_1_1_clickable_widget.html</anchorfile>
      <anchor>a22a95490969b9836a4f9421346527188</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ToggleButton::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_toggle_button.html</anchorfile>
      <anchor>a5cfa59499d4650c9939989238edbadc8</anchor>
      <arglist>(const std::string &amp;text=&quot;&quot;, bool checked=false)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Transform</name>
    <filename>classime_1_1_transform.html</filename>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>ae82558240e834572e202882340842701</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>aca1f0d9197a29df584150884b1e707da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>a2ee31c1b0a3aabdbda60e899d041d7a3</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>a97bb96b69ecee69d49705e66f11b3d62</anchor>
      <arglist>(const Vector2f &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>acefb0b51caffcfa718371c99a5b1df85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>ae4ca2ae21707dc2907a89bd0f38023b3</anchor>
      <arglist>(float angle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>a6477498e6a693ad3f5b9559c0d6b7214</anchor>
      <arglist>(float angle)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>ab6e707bc6a3baaf3a1b72f55eb9561fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>afbf1756e5c02e1d939731c83996e2d6e</anchor>
      <arglist>(float factorX, float factorY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>a09857356195d66eb61143572bcf50c71</anchor>
      <arglist>(const Vector2f &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>a4261dcf9f7898208884e6fca450284a6</anchor>
      <arglist>(float factorX, float factorY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>ab08c7c3f1c64d732bf17f9e6f4901e92</anchor>
      <arglist>(const Vector2f &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getScale</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>a933fca0603f37e07e1e175bb18f5029a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>a71aa3ef0834fa1909121612f2a16dc25</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>aa904503a8224cbb4e8f7090f4f15a4ef</anchor>
      <arglist>(const Vector2f &amp;origin)</arglist>
    </member>
    <member kind="function">
      <type>const Vector2f &amp;</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>a9391a052bac82cc3f28d0d6cad774985</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>ac68d0b7e6f9e37953cc5ab858e1dec48</anchor>
      <arglist>(float offsetX, float offsetY)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>acbc44b0b4d5c62bfb359aaa98a0df4f0</anchor>
      <arglist>(const Vector2f &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>onPropertyChange</name>
      <anchorfile>classime_1_1_transform.html</anchorfile>
      <anchor>a93eeca3a2e4c01baa7ef9ca46c4bee18</anchor>
      <arglist>(Callback&lt; const Property &amp; &gt; callback)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ime::TriggerKeys</name>
    <filename>structime_1_1_trigger_keys.html</filename>
    <member kind="variable">
      <type>Keyboard::Key</type>
      <name>leftKey</name>
      <anchorfile>structime_1_1_trigger_keys.html</anchorfile>
      <anchor>af97894845fdb39886acfec86663a3c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Keyboard::Key</type>
      <name>rightKey</name>
      <anchorfile>structime_1_1_trigger_keys.html</anchorfile>
      <anchor>aafc1c67f0a15cf4f6cdee3e25dd051d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Keyboard::Key</type>
      <name>upKey</name>
      <anchorfile>structime_1_1_trigger_keys.html</anchorfile>
      <anchor>aa1d3929571dd69ef315eda66015761e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Keyboard::Key</type>
      <name>downKey</name>
      <anchorfile>structime_1_1_trigger_keys.html</anchorfile>
      <anchor>aa60b4163cc0de170e2e390bdaf5e9531</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Vector2</name>
    <filename>classime_1_1_vector2.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a95fb703c978e3395b3878c5fbaf7de45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>aecb096ec736144de4794767b5accf931</anchor>
      <arglist>(T X, T Y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac0ea1a5add4bc6b7c2626a6045c00e4f</anchor>
      <arglist>(const Vector2&lt; U &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>magnitude</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a39c9bcba14ea33d912b5334ebb989dfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dot</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a3f67e016d03b3d17dcb1a7db011f8914</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>cross</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a0ef98992e956275d73af206048ea847e</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distanceTo</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a86196b572a87660e9b6d098c06b92d31</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>angle</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>af68436d248d39259710494610d1f678e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>angleTo</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a5e67fb77c560316878ab8f4468991e80</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt;</type>
      <name>asUnitVector</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac229d5a7769a70c7a98d5b86b909409e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>x</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a142e0447628e2025bf1e71e69034e878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>y</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a570517566c0127ddfa4bb1d00e1ab4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a3885c2e66dc427cec7eaa178d59d8e8b</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ad4b7a9d355d57790bfc7df0ade8bb628</anchor>
      <arglist>(Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a30a5a12ad03c9a3a982a0a313bf84e6f</anchor>
      <arglist>(Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt;</type>
      <name>operator+</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a72421239823c38a6b780c86a710ead07</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt;</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ad027adae53ec547a86c20deeb05c9e85</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a5f48ca928995b41c89f155afe8d16b02</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, T right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt;</type>
      <name>operator/</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a7409dd89cb3aad6c3bc6622311107311</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, T right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac4d293c9dc7954ccfd5e373972f38b03</anchor>
      <arglist>(Vector2&lt; T &gt; &amp;left, T right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a9a7b2d36c3850828fdb651facfd25136</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a01673da35ef9c52d0e54b8263549a956</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac787cbd5d34ee155b47b20e8d9f9f43f</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>abf8ffb2fbaccd8dd9cbcca238c045667</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a6fe335339ad8154926792dfdc9c78106</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a6aa8691fd4142d171a354fff333f94b4</anchor>
      <arglist>(const Vector2&lt; T &gt; &amp;left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector2&lt; float &gt;</name>
    <filename>classime_1_1_vector2.html</filename>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a95fb703c978e3395b3878c5fbaf7de45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>aecb096ec736144de4794767b5accf931</anchor>
      <arglist>(float X, float Y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac0ea1a5add4bc6b7c2626a6045c00e4f</anchor>
      <arglist>(const Vector2&lt; U &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>magnitude</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a39c9bcba14ea33d912b5334ebb989dfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dot</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a3f67e016d03b3d17dcb1a7db011f8914</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>cross</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a0ef98992e956275d73af206048ea847e</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distanceTo</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a86196b572a87660e9b6d098c06b92d31</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>angle</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>af68436d248d39259710494610d1f678e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>angleTo</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a5e67fb77c560316878ab8f4468991e80</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt;</type>
      <name>asUnitVector</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac229d5a7769a70c7a98d5b86b909409e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>x</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a142e0447628e2025bf1e71e69034e878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>float</type>
      <name>y</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a570517566c0127ddfa4bb1d00e1ab4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt;</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a3885c2e66dc427cec7eaa178d59d8e8b</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt;</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ad027adae53ec547a86c20deeb05c9e85</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ad4b7a9d355d57790bfc7df0ade8bb628</anchor>
      <arglist>(Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a30a5a12ad03c9a3a982a0a313bf84e6f</anchor>
      <arglist>(Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt;</type>
      <name>operator+</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a72421239823c38a6b780c86a710ead07</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt;</type>
      <name>operator*</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a5f48ca928995b41c89f155afe8d16b02</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, float right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt;</type>
      <name>operator/</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a7409dd89cb3aad6c3bc6622311107311</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, float right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac4d293c9dc7954ccfd5e373972f38b03</anchor>
      <arglist>(Vector2&lt; float &gt; &amp;left, float right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a9a7b2d36c3850828fdb651facfd25136</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a01673da35ef9c52d0e54b8263549a956</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac787cbd5d34ee155b47b20e8d9f9f43f</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>abf8ffb2fbaccd8dd9cbcca238c045667</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a6fe335339ad8154926792dfdc9c78106</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a6aa8691fd4142d171a354fff333f94b4</anchor>
      <arglist>(const Vector2&lt; float &gt; &amp;left, const Vector2&lt; float &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector2&lt; int &gt;</name>
    <filename>classime_1_1_vector2.html</filename>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a95fb703c978e3395b3878c5fbaf7de45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>aecb096ec736144de4794767b5accf931</anchor>
      <arglist>(int X, int Y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac0ea1a5add4bc6b7c2626a6045c00e4f</anchor>
      <arglist>(const Vector2&lt; U &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>magnitude</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a39c9bcba14ea33d912b5334ebb989dfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dot</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a3f67e016d03b3d17dcb1a7db011f8914</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cross</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a0ef98992e956275d73af206048ea847e</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distanceTo</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a86196b572a87660e9b6d098c06b92d31</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>angle</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>af68436d248d39259710494610d1f678e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>angleTo</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a5e67fb77c560316878ab8f4468991e80</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt;</type>
      <name>asUnitVector</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac229d5a7769a70c7a98d5b86b909409e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>x</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a142e0447628e2025bf1e71e69034e878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>y</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a570517566c0127ddfa4bb1d00e1ab4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; int &gt;</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a3885c2e66dc427cec7eaa178d59d8e8b</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; int &gt;</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ad027adae53ec547a86c20deeb05c9e85</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; int &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ad4b7a9d355d57790bfc7df0ade8bb628</anchor>
      <arglist>(Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; int &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a30a5a12ad03c9a3a982a0a313bf84e6f</anchor>
      <arglist>(Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; int &gt;</type>
      <name>operator+</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a72421239823c38a6b780c86a710ead07</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; int &gt;</type>
      <name>operator*</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a5f48ca928995b41c89f155afe8d16b02</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, int right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; int &gt;</type>
      <name>operator/</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a7409dd89cb3aad6c3bc6622311107311</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, int right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; int &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac4d293c9dc7954ccfd5e373972f38b03</anchor>
      <arglist>(Vector2&lt; int &gt; &amp;left, int right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a9a7b2d36c3850828fdb651facfd25136</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a01673da35ef9c52d0e54b8263549a956</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac787cbd5d34ee155b47b20e8d9f9f43f</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>abf8ffb2fbaccd8dd9cbcca238c045667</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a6fe335339ad8154926792dfdc9c78106</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a6aa8691fd4142d171a354fff333f94b4</anchor>
      <arglist>(const Vector2&lt; int &gt; &amp;left, const Vector2&lt; int &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Vector2&lt; unsigned int &gt;</name>
    <filename>classime_1_1_vector2.html</filename>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a95fb703c978e3395b3878c5fbaf7de45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>aecb096ec736144de4794767b5accf931</anchor>
      <arglist>(unsigned int X, unsigned int Y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Vector2</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac0ea1a5add4bc6b7c2626a6045c00e4f</anchor>
      <arglist>(const Vector2&lt; U &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>magnitude</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a39c9bcba14ea33d912b5334ebb989dfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>dot</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a3f67e016d03b3d17dcb1a7db011f8914</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cross</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a0ef98992e956275d73af206048ea847e</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>distanceTo</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a86196b572a87660e9b6d098c06b92d31</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>angle</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>af68436d248d39259710494610d1f678e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>angleTo</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a5e67fb77c560316878ab8f4468991e80</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;otherVec) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; float &gt;</type>
      <name>asUnitVector</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac229d5a7769a70c7a98d5b86b909409e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>x</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a142e0447628e2025bf1e71e69034e878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>y</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a570517566c0127ddfa4bb1d00e1ab4ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt;</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a3885c2e66dc427cec7eaa178d59d8e8b</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt;</type>
      <name>operator-</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ad027adae53ec547a86c20deeb05c9e85</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ad4b7a9d355d57790bfc7df0ade8bb628</anchor>
      <arglist>(Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a30a5a12ad03c9a3a982a0a313bf84e6f</anchor>
      <arglist>(Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt;</type>
      <name>operator+</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a72421239823c38a6b780c86a710ead07</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt;</type>
      <name>operator*</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a5f48ca928995b41c89f155afe8d16b02</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, unsigned int right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt;</type>
      <name>operator/</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a7409dd89cb3aad6c3bc6622311107311</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, unsigned int right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; unsigned int &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac4d293c9dc7954ccfd5e373972f38b03</anchor>
      <arglist>(Vector2&lt; unsigned int &gt; &amp;left, unsigned int right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a9a7b2d36c3850828fdb651facfd25136</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a01673da35ef9c52d0e54b8263549a956</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>ac787cbd5d34ee155b47b20e8d9f9f43f</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>abf8ffb2fbaccd8dd9cbcca238c045667</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a6fe335339ad8154926792dfdc9c78106</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classime_1_1_vector2.html</anchorfile>
      <anchor>a6aa8691fd4142d171a354fff333f94b4</anchor>
      <arglist>(const Vector2&lt; unsigned int &gt; &amp;left, const Vector2&lt; unsigned int &gt; &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::VerticalLayout</name>
    <filename>classime_1_1ui_1_1_vertical_layout.html</filename>
    <base>ime::ui::IBoxLayout</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; VerticalLayout &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a42a6a2eda07ed145c23e10e6e90412be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const VerticalLayout &gt;</type>
      <name>ConstPtr</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a46aeea23b4be95e5555e903eef873dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalLayout</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a6f2dd2f4b5909cddde05869bbf42f473</anchor>
      <arglist>(const VerticalLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type>VerticalLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>af426898a4d55430d6021d7136521789c</anchor>
      <arglist>(const VerticalLayout &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VerticalLayout</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a0e77c9f47bfcc873607b1d3a82e64f98</anchor>
      <arglist>(VerticalLayout &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VerticalLayout &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>ad3f9ed01d4747c82f7b58b7ee4620fe3</anchor>
      <arglist>(VerticalLayout &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>VerticalLayout::Ptr</type>
      <name>copy</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a1e1b03db1ca6e1fb9c57a73cf608d02c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BoxLayoutRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>af52500226f432f0203828c287208c462</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>aeb341a9d3c90a2ed9837107dcbf18e46</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWidget</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a62f538efcca94d0afd2aaf85df68c50b</anchor>
      <arglist>(std::size_t index, Widget *widget, const std::string &amp;name) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidgetAt</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>aa0e189627a5c7c70946745ffac745fca</anchor>
      <arglist>(std::size_t index) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addSpace</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a150ec5fc7a41cf82cc86a662819b5647</anchor>
      <arglist>(float ratio) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertSpace</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a87f2f7d1844b35be4cb0c5bf6876e143</anchor>
      <arglist>(std::size_t index, float ratio) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRatio</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>aad969210c237fe6948f898c9b536b6e0</anchor>
      <arglist>(Widget *widget, float ratio) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setRatio</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a3c961dff84d3a7ebd230923223d20f98</anchor>
      <arglist>(std::size_t index, float ratio) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRatio</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>ae4228ef0c740a22e8b2545797339936d</anchor>
      <arglist>(const Widget *widget) const override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRatio</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>afadd58491d197c397cbc380222e08bab</anchor>
      <arglist>(std::size_t index) const override</arglist>
    </member>
    <member kind="function">
      <type>Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>aa6403bd3f9eefc64b4321e67952a424a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VerticalLayout</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a4b9ff9f326da59fa0c6c3099a7dde69b</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a655ee1010db960c007c2be5e32a4ca25</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7b4149560be75c68d9874bb650cd1a20</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aab8793c4004717e8a3df985cfa86e22d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a6dbb5d766d355a14f4b68501bb36e703</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetAtPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ac0ffedec6aaa059237db9900a454a064</anchor>
      <arglist>(Vector2f pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8894e84e51733d3be13054df9a4f60e5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a24e9c179de1f8f39ca6c15dd1ab97b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ae071b10b1dd275b7b21b2dc8e0b045f2</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ab8fa96eadd34575b8a2a84923391895b</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ad398e39dc582f530bfd0492566eaa261</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8fcd040ece49ba681d4a49e33222a0c9</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a0826fe366a440cde9efb62dc520cd414</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>abd9db967affeef6e89ec3635a28e5504</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a5c5447ea7d1ffd6e87f2bbe2a935d146</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a294427255e4ed49aa2cf150e7d3d2a6e</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa0f983e4503190f75648b4c68dd44235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedLeaf</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a3ca1a14ea74975a02def0b1245705546</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusNextWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7e0bf072b5396208fc7ca2a8705490c0</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusPreviousWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa48887ce4b7f524910f21d34d9e061ed</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a530b03d553311b0321417543408a04e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a1046a4c1183e1bdfd0a9f15d551c3fa1</anchor>
      <arglist>(const Callback&lt; Widget * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static VerticalLayout::Ptr</type>
      <name>create</name>
      <anchorfile>classime_1_1ui_1_1_vertical_layout.html</anchorfile>
      <anchor>a98f352749f364fdc9827505d415aa78c</anchor>
      <arglist>(const std::string &amp;width=&quot;100%&quot;, const std::string &amp;height=&quot;100%&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::Widget</name>
    <filename>classime_1_1ui_1_1_widget.html</filename>
    <base>ime::ITransformable</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; Widget &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af24c43887f6f743e302417f59cdce5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Widget</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9328589018dde701a9e79e45dde7d8f5</anchor>
      <arglist>(const Widget &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Widget &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a52bf806d6e097d2df761b688ef83e382</anchor>
      <arglist>(const Widget &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Widget</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7b16c5db94bfc7c51bd89274314a29fb</anchor>
      <arglist>(Widget &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Widget &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac0a1df9da7b950ff64959856eb693321</anchor>
      <arglist>(Widget &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14f1c77dcb99eaba385845363242c061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a47243168addd736d0dd08eee6b4e7b89</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>acf5e72f074fd7e304e7f6071ce806d2f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Widget</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a01a4958d0a6f5b92644027fa0d94911c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::ui::WidgetContainer</name>
    <filename>classime_1_1ui_1_1_widget_container.html</filename>
    <base>ime::ui::Widget</base>
    <member kind="typedef">
      <type>std::unique_ptr&lt; WidgetContainer &gt;</type>
      <name>Ptr</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a60410b3d5dcbc5d00278a7f798148341</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WidgetContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a02944604ec0e2d93d93b406a45f3ad7f</anchor>
      <arglist>(const WidgetContainer &amp;)</arglist>
    </member>
    <member kind="function">
      <type>WidgetContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>adb82104880bb9af45b6bf74a905b86c2</anchor>
      <arglist>(const WidgetContainer &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>WidgetContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a3778efea05bf7283c6e6a35bf1e6bd90</anchor>
      <arglist>(WidgetContainer &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>WidgetContainer &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a75f5c65a736d8b652d5520607aebc8e1</anchor>
      <arglist>(WidgetContainer &amp;&amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a655ee1010db960c007c2be5e32a4ca25</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aab8793c4004717e8a3df985cfa86e22d</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>addWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7b4149560be75c68d9874bb650cd1a20</anchor>
      <arglist>(Widget::Ptr widget, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>getWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a6dbb5d766d355a14f4b68501bb36e703</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getWidgetAtPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ac0ffedec6aaa059237db9900a454a064</anchor>
      <arglist>(Vector2f pos) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8894e84e51733d3be13054df9a4f60e5</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeAllWidgets</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a24e9c179de1f8f39ca6c15dd1ab97b57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ae071b10b1dd275b7b21b2dc8e0b045f2</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ad398e39dc582f530bfd0492566eaa261</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a0826fe366a440cde9efb62dc520cd414</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a5c5447ea7d1ffd6e87f2bbe2a935d146</anchor>
      <arglist>(const Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToFront</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>ab8fa96eadd34575b8a2a84923391895b</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveWidgetToBack</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a8fcd040ece49ba681d4a49e33222a0c9</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetForward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>abd9db967affeef6e89ec3635a28e5504</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>moveWidgetBackward</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a294427255e4ed49aa2cf150e7d3d2a6e</anchor>
      <arglist>(const std::string &amp;widget)</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa0f983e4503190f75648b4c68dd44235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Widget *</type>
      <name>getFocusedLeaf</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a3ca1a14ea74975a02def0b1245705546</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusNextWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a7e0bf072b5396208fc7ca2a8705490c0</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>focusPreviousWidget</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>aa48887ce4b7f524910f21d34d9e061ed</anchor>
      <arglist>(bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCount</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a530b03d553311b0321417543408a04e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a1046a4c1183e1bdfd0a9f15d551c3fa1</anchor>
      <arglist>(const Callback&lt; Widget * &gt; &amp;callback) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~WidgetContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget_container.html</anchorfile>
      <anchor>a1335b2558884b4f4fb3b471e851375d3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a829b9aa4e756b9db0f18860f80b5e36c</anchor>
      <arglist>(const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getName</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a0f47d1d78b2dfbb0663c8d18384c7a62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac2587e01b76fc8ac42cd0453c38af229</anchor>
      <arglist>(IWidgetRenderer::Ptr renderer)</arglist>
    </member>
    <member kind="function">
      <type>IWidgetRenderer *</type>
      <name>getRenderer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14f1c77dcb99eaba385845363242c061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a1a8a4cb825f1cb8be874cd38949a2384</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a85c65f1c779d68e1e9c1b15ec6ec3771</anchor>
      <arglist>(const Vector2f &amp;position) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>af4a40ca916eca04215dffdc71a6ef895</anchor>
      <arglist>(const std::string &amp;x, const std::string &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a619e9c8e1ebc5c3f016fb8cb57f9b051</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsolutePosition</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ad18385f0ab6d31530cf0ead0f3392fdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a10b4c213383ecf5a5efaed44515c4bc5</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rotate</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a2cd7cb47abc08a8167bd5d5f0917f138</anchor>
      <arglist>(float angle) override</arglist>
    </member>
    <member kind="function">
      <type>float</type>
      <name>getRotation</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adfc6c66a36b6c905b68ed55bfc5b0ae8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3a70786737f8b136245ff1649864b026</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a048678bc8ec7383e370fcaf863e8a2ff</anchor>
      <arglist>(const Vector2f &amp;scale) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a43e141d4ab6c567e021c67fb84ba61f0</anchor>
      <arglist>(float factorX, float factorY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7ed9268d8cb9615888803774faf888c1</anchor>
      <arglist>(const Vector2f &amp;factor) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getScale</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a5484608e485dff73ee9673308bfdd2fd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a14ea2810ba3219556be1967983fc0cf2</anchor>
      <arglist>(float x, float y) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac4568d67d8ad21f497675ed5c75b64e8</anchor>
      <arglist>(const Vector2f &amp;origin) override</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getOrigin</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a135723ff3200623139809e2ea281a70d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ab5169108fd11400886f581cf4278c3f9</anchor>
      <arglist>(float offsetX, float offsetY) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a23aa2acbdcfa1a8114468949ebeeb989</anchor>
      <arglist>(const Vector2f &amp;offset) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4d006c137f6112c93a25542fb3e8db36</anchor>
      <arglist>(unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getTextSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f09eddaa438248ae4d18a51607a6587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a9aaa3562e2fee4a9c1ffd4b695f1887e</anchor>
      <arglist>(float width, float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a41a0cffd12eff8d11271b157eb01b2cd</anchor>
      <arglist>(const std::string &amp;width, const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3450e46f7b98ffcd4e3b3ef35279b23a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector2f</type>
      <name>getAbsoluteSize</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>aa332a87422fda431f7ecd0e73efb71b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a50333640aa3873dad1863a4a126a9edd</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWidth</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6469f715959c00e8826d889e9295e9ca</anchor>
      <arglist>(const std::string &amp;width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a7f8f37d8b1c9e0527440f2b22eed89e6</anchor>
      <arglist>(float height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHeight</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ae2da6abf956dff734ea275c74d21e583</anchor>
      <arglist>(const std::string &amp;height)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a3233941c1b6189e48a131caf46c0e3cb</anchor>
      <arglist>(CursorType cursor)</arglist>
    </member>
    <member kind="function">
      <type>CursorType</type>
      <name>getMouseCursor</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ac51dc25f6c15a3827bc3d5fea5f39d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getWidgetType</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a47243168addd736d0dd08eee6b4e7b89</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>showWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>adb942bd47ed6e8b2fd215243b4c0efa9</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hideWithEffect</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>ada1a44134e37ce3ca93addc4143129e2</anchor>
      <arglist>(AnimationType type, Time duration)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAnimationPlaying</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a045b9170f4e862d0f27eb0b9e879f8eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8d7acfea69cf12a94879e0e360970177</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>afa0f165c3f7b98c43c1c72a67897c1cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleVisibility</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a972d9489a5603377feb0bd75f8ec33c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a4ee7dd6f27a5eacae47ee860464432d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a88a448303599711f7be06232328640e1</anchor>
      <arglist>(float x, float y) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>on</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a6a40221d87860a123262f2f147113507</anchor>
      <arglist>(const std::string &amp;event, Callback&lt; Args... &gt; callback)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>emit</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>abac2f4adebfac6a2c4bdec0bb95ff15c</anchor>
      <arglist>(const std::string &amp;event, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unsubscribe</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a19b2b723ca35841df8c9f7a8f9effc17</anchor>
      <arglist>(const std::string &amp;event, int id)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Widget::Ptr</type>
      <name>clone</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>acf5e72f074fd7e304e7f6071ce806d2f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setAsContainer</name>
      <anchorfile>classime_1_1ui_1_1_widget.html</anchorfile>
      <anchor>a8bbf17575a1831b341f4f8bab5dfbecc</anchor>
      <arglist>(bool container)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ime::Window</name>
    <filename>classime_1_1_window.html</filename>
    <member kind="function">
      <type></type>
      <name>Window</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>aa34b56b2fae3ff6a848122eafb247eda</anchor>
      <arglist>(const Window &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Window &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a990fd6f6e7fd45aad92bba42f1e1dc78</anchor>
      <arglist>(const Window &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Window</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>adcc77782a459202b97ed32ad88e9c07b</anchor>
      <arglist>(Window &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>Window &amp;</type>
      <name>operator=</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>acd34541884fc4c0adf99c3b3bb6ae62a</anchor>
      <arglist>(Window &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStyle</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a083b185d6ea0a56f4d0a627882bbdb8d</anchor>
      <arglist>(Uint32 windowStyle)</arglist>
    </member>
    <member kind="function">
      <type>Uint32</type>
      <name>getStyle</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>aaff2082caf13461413add03a4ca5faab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTitle</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a3fbe54c343c0228bc0e434feffb37c52</anchor>
      <arglist>(const std::string &amp;title)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>getTitle</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>ae102245573f5e5e304c1df5dcc0c4d9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a14e1e18a0589c610c50d3dcf62afa710</anchor>
      <arglist>(const Vector2i &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>Vector2i</type>
      <name>getPosition</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>ae3fe25eeb965267d5bc9b6cc9cb90a18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRelativeMousePosition</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a34736d8cc1c3e187abcc030ee6e38798</anchor>
      <arglist>(const Vector2i &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>Vector2i</type>
      <name>getRelativeMousePosition</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a5f526adc60ef02def123f990d8852f69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>af532f331809dc253189ed1205a2cda68</anchor>
      <arglist>(const Vector2u &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getSize</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>ae349d3efd91fe3f5f232f7b3aabb0530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinSize</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a729d4a6f3cdf738d3d1079735fcd80b1</anchor>
      <arglist>(const Vector2u &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getMinSize</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>aa7937a6dca8320d1b692a0edcb7883db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxSize</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>aa5860edb7e629fe64b58c961b561081c</anchor>
      <arglist>(const Vector2u &amp;size)</arglist>
    </member>
    <member kind="function">
      <type>Vector2u</type>
      <name>getMaxSize</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>ae8540a3348348f80a4c09872f9d5c7ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMinBound</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a0870d47835d065e5f925a698ce104d67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMaxBound</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>ab85fad3c459492059a9e36265678e507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFullScreen</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a684932b108cb17e493056aba670aef99</anchor>
      <arglist>(bool fullScreen)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isFullScreen</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a9546b28cf73c3a4cc3649b2802d69c6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toggleFullScreen</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a36f3f1ed710313ad027c2cbe80198945</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisible</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a1af81e31730c8f153a0e85fcf3d9ed9f</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVisible</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a3e5ce50bc61a86cc750ca6af5c0624ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursorVisible</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a5283387c29328fdece4a3a10fd3874a9</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouseCursorVisible</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>acefaf3fc89a87dd56c47283dcd4991ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMouseCursorGrabbed</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a48f0db7f8880002993eb36c9853714ac</anchor>
      <arglist>(bool grabbed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMouseCursorGrabbed</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a76f2e52b4c2cf8b9dff8c97ad0df3bfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFrameRateLimit</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a63113069aee23554153fe7ce8bd45ece</anchor>
      <arglist>(unsigned int limit)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getFrameRateLimit</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>aab0273758bd17a4b89a9296bded645d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerticalSyncEnable</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a2ecec271ca262817ba657dab2108863e</anchor>
      <arglist>(bool vSyncEnable)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVerticalSyncEnabled</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a6e9896e61e98b45e5da71fe3ab28221c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClearColour</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>ab7e33c5d0c3b4d813de2686441f8d772</anchor>
      <arglist>(const Colour &amp;colour)</arglist>
    </member>
    <member kind="function">
      <type>const Colour &amp;</type>
      <name>getClearColour</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>ad96fddfc9910e65911ad8e71bbec6f61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Texture &gt;</type>
      <name>takeScreenshot</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>af4e6b7f7af4314aed8fce879abe1d2ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>takeScreenshot</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>aa35b9aec791ae245d52447e317acebdc</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a646954d8d29309aff558f1675aec46d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOpen</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a9800e7a9efae7e8613667ce90f7d68b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>suspendedEventListener</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a7653a9a872015325132a836e402401ef</anchor>
      <arglist>(int id, bool suspend)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEventListenerSuspended</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a6ad3ccf08d1b52516daad4b68e6a074e</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultOnCloseHandlerEnable</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a57cea726853d42a0495965a4755469a3</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onClose</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>ae9f80ebc16620097a57e42b07bd1ae21</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onLoseFocus</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>ad47bc0b04b1bd221bb2f052a88920282</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onGainFocus</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a099cd4e5f456954b0b231b1312ef736e</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMouseEnter</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>aae9663eb38d258fa1fecfecf22877662</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onMouseExit</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>aeee564f5b88d7cb8b2edc52de0a66389</anchor>
      <arglist>(const Callback&lt;&gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onFullScreenToggle</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a3a535b2c4b35ac2c1c90b95772293b1c</anchor>
      <arglist>(const Callback&lt; bool &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>onResize</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>af3b09702aeda09789f17ebd3f4db6430</anchor>
      <arglist>(const Callback&lt; Vector2u &gt; &amp;callback, bool oneTime=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeEventListener</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a671e884e555e2025882441cd61755bc7</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector2u</type>
      <name>getFullScreenSize</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a7d724815319219f585e2c97e3383744a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Engine</name>
      <anchorfile>classime_1_1_window.html</anchorfile>
      <anchor>a3e1914489e4bed4f9f23cdeab34a43dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ime</name>
    <filename>namespaceime.html</filename>
    <namespace>ime::audio</namespace>
    <namespace>ime::input</namespace>
    <namespace>ime::ui</namespace>
    <namespace>ime::utility</namespace>
    <class kind="class">ime::AABB</class>
    <class kind="class">ime::AccessViolationException</class>
    <class kind="class">ime::AdjacencyList</class>
    <class kind="class">ime::Animation</class>
    <class kind="class">ime::AnimationFrame</class>
    <class kind="class">ime::Animator</class>
    <class kind="class">ime::BFS</class>
    <class kind="struct">ime::Borders</class>
    <class kind="class">ime::BoxCollider</class>
    <class kind="class">ime::Camera</class>
    <class kind="class">ime::CameraContainer</class>
    <class kind="class">ime::CircleCollider</class>
    <class kind="class">ime::CircleShape</class>
    <class kind="class">ime::Clock</class>
    <class kind="class">ime::Collider</class>
    <class kind="struct">ime::CollisionFilterData</class>
    <class kind="class">ime::Colour</class>
    <class kind="class">ime::ConvexShape</class>
    <class kind="class">ime::CyclicGridMover</class>
    <class kind="struct">ime::DebugDrawerFilter</class>
    <class kind="class">ime::DFS</class>
    <class kind="class">ime::DistanceJoint</class>
    <class kind="struct">ime::DistanceJointDefinition</class>
    <class kind="class">ime::Drawable</class>
    <class kind="class">ime::DrawableContainer</class>
    <class kind="class">ime::EdgeCollider</class>
    <class kind="class">ime::Engine</class>
    <class kind="class">ime::Event</class>
    <class kind="class">ime::EventDispatcher</class>
    <class kind="class">ime::EventEmitter</class>
    <class kind="class">ime::ExcludeList</class>
    <class kind="class">ime::FileNotFoundException</class>
    <class kind="class">ime::GameObject</class>
    <class kind="class">ime::GameObjectContainer</class>
    <class kind="class">ime::Grid2D</class>
    <class kind="class">ime::Grid2DRenderer</class>
    <class kind="class">ime::GridMover</class>
    <class kind="class">ime::GridMoverContainer</class>
    <class kind="class">ime::GridObject</class>
    <class kind="struct">ime::Index</class>
    <class kind="class">ime::InvalidArgumentException</class>
    <class kind="class">ime::InvalidParseException</class>
    <class kind="class">ime::IPathFinderStrategy</class>
    <class kind="class">ime::ITransformable</class>
    <class kind="class">ime::Joint</class>
    <class kind="struct">ime::JointDefinition</class>
    <class kind="class">ime::KeyboardGridMover</class>
    <class kind="class">ime::Object</class>
    <class kind="class">ime::ObjectContainer</class>
    <class kind="struct">ime::Padding</class>
    <class kind="class">ime::PhysicsEngine</class>
    <class kind="struct">ime::PhysIterations</class>
    <class kind="class">ime::PolygonCollider</class>
    <class kind="class">ime::PrefContainer</class>
    <class kind="class">ime::Preference</class>
    <class kind="class">ime::Property</class>
    <class kind="class">ime::PropertyContainer</class>
    <class kind="class">ime::RandomGridMover</class>
    <class kind="class">ime::Rect</class>
    <class kind="class">ime::RectangleShape</class>
    <class kind="class">ime::RenderLayer</class>
    <class kind="class">ime::RenderLayerContainer</class>
    <class kind="class">ime::ResourceLoader</class>
    <class kind="class">ime::RigidBody</class>
    <class kind="class">ime::Scene</class>
    <class kind="class">ime::Shape</class>
    <class kind="class">ime::Sprite</class>
    <class kind="class">ime::SpriteImage</class>
    <class kind="class">ime::SpriteSheet</class>
    <class kind="class">ime::TargetGridMover</class>
    <class kind="class">ime::Texture</class>
    <class kind="class">ime::Tile</class>
    <class kind="class">ime::Time</class>
    <class kind="class">ime::Timer</class>
    <class kind="class">ime::TimerManager</class>
    <class kind="class">ime::Transform</class>
    <class kind="struct">ime::TriggerKeys</class>
    <class kind="class">ime::Vector2</class>
    <class kind="class">ime::Window</class>
    <member kind="typedef">
      <type>Preference::Type</type>
      <name>PrefType</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>ac359a056bde1592b34d94d066f936b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rect&lt; unsigned int &gt;</type>
      <name>UIntRect</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a8639ee826b0255d89caff52181bbd2e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rect&lt; int &gt;</type>
      <name>IntRect</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a40f71852e45edcae316298e1b4fca98b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rect&lt; float &gt;</type>
      <name>FloatRect</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a8b4c9bbaba1c4d18046c6e27eab3cf3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; int &gt;</type>
      <name>Vector2i</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>aaa435a44535a46f5b1d751fe9b34cab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; unsigned int &gt;</type>
      <name>Vector2u</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a28e7c6e92c228aa820537a484a61e04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2&lt; float &gt;</type>
      <name>Vector2f</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a4866528be676b7c7831fb843650a1065</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(Args...)&gt;</type>
      <name>Callback</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a3f45d9e0b4d574a5f97fb0a538bf7a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::vector&lt; char &gt; &gt;</type>
      <name>Map</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a3553be076047bf15c2648d39dad38c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ime::input::Keyboard</type>
      <name>Keyboard</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a3b3b82d9932834de4ee9ca6015c0d19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ime::input::Keyboard::Key</type>
      <name>Key</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>aeeda16af30b5cca18ca33086f4c45c43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ime::input::Mouse</type>
      <name>Mouse</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>af893875683b7e6ce1993cc3d049f667f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector2i</type>
      <name>Direction</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a648c4f6bb8c6dbeceb789b1c9aa5f738</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(Collider *const)&gt;</type>
      <name>AABBCallback</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a576727e5b4cf15b8b15827ee3ff62fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; float(Collider *const, Vector2f, Vector2f, float)&gt;</type>
      <name>RayCastCallback</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a25c573ec7e44551c699d8000b4219860</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DrawableContainer&lt; Sprite &gt;</type>
      <name>SpriteContainer</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a71c9596da6d5d70894f1d3bb37b80bbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DrawableContainer&lt; Shape &gt;</type>
      <name>ShapeContainer</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a756d15dc444059e260d0970939d39176</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FrameArrangement</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>ae55ceda500f4ce44754c03f13fa09fd8</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime.html" anchor="ae55ceda500f4ce44754c03f13fa09fd8ac1b5fa03ecdb95d4a45dd1c40b02527f">Horizontal</enumvalue>
      <enumvalue file="namespaceime.html" anchor="ae55ceda500f4ce44754c03f13fa09fd8a06ce2a25e5d12c166a36f654dbea6012">Vertical</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KeyboardEvent</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a7c2dc1ca25dbb9a50c40a583859800fa</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime.html" anchor="a7c2dc1ca25dbb9a50c40a583859800faa0f8baa14654b1f6ef00fed708c7f198a">KeyUp</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a7c2dc1ca25dbb9a50c40a583859800faacfd07bf1effd88bca04a12a087777354">KeyDown</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a7c2dc1ca25dbb9a50c40a583859800faa9ef346c095c930163fe3b2cffc8ee4dc">KeyHeld</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MouseEvent</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>acf68a652442c8419e9c29812d9c079a9</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime.html" anchor="acf68a652442c8419e9c29812d9c079a9abf90db242043990aa80fde01f233665d">MouseDown</enumvalue>
      <enumvalue file="namespaceime.html" anchor="acf68a652442c8419e9c29812d9c079a9a5c55840fe2a83a886590c780f0aa7031">MouseUp</enumvalue>
      <enumvalue file="namespaceime.html" anchor="acf68a652442c8419e9c29812d9c079a9afd060c0c157323f1e43e0704d4f3ffc8">MouseMove</enumvalue>
      <enumvalue file="namespaceime.html" anchor="acf68a652442c8419e9c29812d9c079a9a538f63e4298bc12f2b7ad838b7317d61">MouseWheelScroll</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MovementTrigger</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>abb4b3295acd5d5723f222430a8056295</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime.html" anchor="abb4b3295acd5d5723f222430a8056295a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
      <enumvalue file="namespaceime.html" anchor="abb4b3295acd5d5723f222430a8056295a0160cca747ee5bce35c8123286c4979b">OnKeyDown</enumvalue>
      <enumvalue file="namespaceime.html" anchor="abb4b3295acd5d5723f222430a8056295a2de9d6ce77019f71da1949f314cd84b4">OnKeyUp</enumvalue>
      <enumvalue file="namespaceime.html" anchor="abb4b3295acd5d5723f222430a8056295a5bc32f3c4968f6c79e41889329287b08">OnKeyHeld</enumvalue>
      <enumvalue file="namespaceime.html" anchor="abb4b3295acd5d5723f222430a8056295a8c52dd213dc6f586da1d587db071bde9">OnKeyDownHeld</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>JointType</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a54f78b4b4ffdf6313037c7d00e486d00</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime.html" anchor="a54f78b4b4ffdf6313037c7d00e486d00a0aa6f4210bf373c95eda00232e93cd98">Distance</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ResourceType</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a10d35e4a0998e985b8bdc251702ba7b9</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime.html" anchor="a10d35e4a0998e985b8bdc251702ba7b9aa3e8ae43188ae76d38f414b2bdb0077b">Texture</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a10d35e4a0998e985b8bdc251702ba7b9a194f5394ae2e9c74dc3c441b92862d1d">Font</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a10d35e4a0998e985b8bdc251702ba7b9abe53a0541a6d36f6ecb879fa2c584b08">Image</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a10d35e4a0998e985b8bdc251702ba7b9a078f6f9d0068fedb79050a274b0ace96">SoundEffect</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a10d35e4a0998e985b8bdc251702ba7b9a47dcbd834e669233d7eb8a51456ed217">Music</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WindowStyle</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a76b40a5524b060b7edd0f4eef03f9d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a76b40a5524b060b7edd0f4eef03f9d2facd141c36d82bcdbac90b0d58a0ae63de</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Titlebar</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a76b40a5524b060b7edd0f4eef03f9d2fa4dfd8eda5f21f206a0400edc093b6b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Resize</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a76b40a5524b060b7edd0f4eef03f9d2faa08219e8a89db72ccab864ba120d6817</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Close</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a76b40a5524b060b7edd0f4eef03f9d2fa92d439e83ff496827ff5d60ed087a71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Fullscreen</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a76b40a5524b060b7edd0f4eef03f9d2fa772e7d53cacaa19b51be698b35229184</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Default</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a76b40a5524b060b7edd0f4eef03f9d2fac648e628f24b95e42430554611c6e9a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TextStyle</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a0c4e1bfc341f0814daa0f273a04492fb</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime.html" anchor="a0c4e1bfc341f0814daa0f273a04492fbad2203cb1237cb6460cbad94564e39345">Regular</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a0c4e1bfc341f0814daa0f273a04492fba114c3050111d8b8ddd830b99ccebd246">Bold</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a0c4e1bfc341f0814daa0f273a04492fba1d874710ccdcd46b95397049d2e7500c">Italic</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a0c4e1bfc341f0814daa0f273a04492fbaefbed21c7db81f58e97c79ae9e73c714">Underlined</enumvalue>
      <enumvalue file="namespaceime.html" anchor="a0c4e1bfc341f0814daa0f273a04492fbadbcb83c76437232e6031f915989c7d23">StrikeThrough</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CursorType</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>aa34709076873a77ab4cf601c81e1e2a9</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9a0f4e1aaabd074689b7d3ead824d1ee8e">Arrow</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9a9dffbf69ffba8bc38bc4e01abf4b1675">Text</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9aa78b1ac16c0cd02168097fc9a9bd7604">Hand</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9a2d63e85c849c2364e6bfb33c3e0738a8">SizeLeft</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9ae9fca55e52735b9cdad7feb6e9e2a13e">SizeRight</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9aaf0ff4ba0b413f0de34c318d978e2a79">SizeTop</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9a35d3d1d5c34e6a124d2d57e39014356f">SizeBottom</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9a46e9c0755cc2152213a4997d6a26c3b0">SizeTopLeft</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9a574c1fd63a9f58096aabd2c78b73c429">SizeBottomRight</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9ada08d08fe4d17077b7f622815e84ad11">SizeBottomLeft</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9a84f7ef771196cacbd7eab64c1e901504">SizeTopRight</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9a0a7ad1fc7e1bda1d661fc937c4e6eedd">Crosshair</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9a6a26f548831e6a8c26bfbbd9f6ec61e0">Help</enumvalue>
      <enumvalue file="namespaceime.html" anchor="aa34709076873a77ab4cf601c81e1e2a9afa89fcc81e9dcfd52671c968fe4e6ddf">NotAllowed</enumvalue>
    </member>
    <member kind="function">
      <type>IME_API void</type>
      <name>savePref</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>aff54f5227892c092d4190f3e72ff0e60</anchor>
      <arglist>(const Preference &amp;pref, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a57e2c216fc770e16a142254f769cb81f</anchor>
      <arglist>(T left, const Vector2&lt; T &gt; &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>Vector2&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a8b78f4ec5955da3b1cf09b6255e0258c</anchor>
      <arglist>(Vector2&lt; T &gt; &amp;left, T right)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator==</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a18f0c1ce153b43c34395404140722f28</anchor>
      <arglist>(const Index &amp;lhs, const Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a5de097ca63b319c87b19801aaacfc8aa</anchor>
      <arglist>(const Index &amp;lhs, const Index &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator==</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a5ba2bb4b39e7eb151fcc5fc0ec3f6ff3</anchor>
      <arglist>(const TriggerKeys &amp;lhs, const TriggerKeys &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IME_API bool</type>
      <name>operator!=</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>ae67261ed71f8926b5c679c8c1f67b96d</anchor>
      <arglist>(const TriggerKeys &amp;lhs, const TriggerKeys &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindLeft</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a25d78c9226f2cfb0acc950fdaf78768b</anchor>
      <arglist>(ui::Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindTop</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>ac55ad06da34a6ded96838c4996f880fa</anchor>
      <arglist>(ui::Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindWidth</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>ae321326e8b636004e717fc90429d3db7</anchor>
      <arglist>(ui::Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindHeight</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>afc2cecf46cdbfcaf835931fdde4242b9</anchor>
      <arglist>(ui::Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindRight</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a0c5b35673add97f2399d98cdbed448da</anchor>
      <arglist>(ui::Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindBottom</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>ae9fe5255a37d80f374d7bdc95b2ea9d6</anchor>
      <arglist>(ui::Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindPosition</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>ad253e2d209362e2ced56a9b94564312f</anchor>
      <arglist>(ui::Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindSize</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>af2b18fc35510b9a1672831a3fe084b63</anchor>
      <arglist>(ui::Widget *widget)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindMin</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a4f665f08199cc1902ddc62473dceeb91</anchor>
      <arglist>(const std::string &amp;value1, const std::string &amp;value2)</arglist>
    </member>
    <member kind="function">
      <type>IME_API std::string</type>
      <name>bindMax</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a79046483afca425a38c74a929c3034f4</anchor>
      <arglist>(const std::string &amp;value1, const std::string &amp;value2)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Direction</type>
      <name>Left</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a54801d5def9ec693135bdb4a564e7679</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Direction</type>
      <name>UpLeft</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a601ee1693b5a1000cbcd742375b647c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Direction</type>
      <name>Up</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a6aab0a15683afb0e391271be3e942dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Direction</type>
      <name>UpRight</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a98a10c365fa922e7b477bcc529d2f1aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Direction</type>
      <name>Right</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a92519b71793e309080ac24261f8018eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Direction</type>
      <name>DownRight</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a3bbbe1e3ce1a9939bc1e19030947ade3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Direction</type>
      <name>Down</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>a4caf6062d473145e8cfa88b578021555</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Direction</type>
      <name>DownLeft</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>ab8b525957071d5521ba984c7ff0d5d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Direction</type>
      <name>Unknown</name>
      <anchorfile>namespaceime.html</anchorfile>
      <anchor>ae4168e65f86cd40e5cf6a9b47350dc12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ime::audio</name>
    <filename>namespaceime_1_1audio.html</filename>
    <class kind="class">ime::audio::Audio</class>
    <class kind="class">ime::audio::AudioManager</class>
    <class kind="class">ime::audio::Music</class>
    <class kind="class">ime::audio::SoundEffect</class>
    <member kind="enumeration">
      <type></type>
      <name>Status</name>
      <anchorfile>namespaceime_1_1audio.html</anchorfile>
      <anchor>ae99dc1ec5873cddcf3b8eb938a0ebf88</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime_1_1audio.html" anchor="ae99dc1ec5873cddcf3b8eb938a0ebf88ac23e2b09ebe6bf4cb5e2a9abe85c0be2">Stopped</enumvalue>
      <enumvalue file="namespaceime_1_1audio.html" anchor="ae99dc1ec5873cddcf3b8eb938a0ebf88ae99180abf47a8b3a856e0bcb2656990a">Paused</enumvalue>
      <enumvalue file="namespaceime_1_1audio.html" anchor="ae99dc1ec5873cddcf3b8eb938a0ebf88ac9dbb2b7c84159b632d71e512eba8428">Playing</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>namespaceime_1_1audio.html</anchorfile>
      <anchor>a14b6fd8c696bd69dc80847ab2dddd085</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime_1_1audio.html" anchor="a14b6fd8c696bd69dc80847ab2dddd085a8e74cb085887902ba25fcf109de2f7a3">Sfx</enumvalue>
      <enumvalue file="namespaceime_1_1audio.html" anchor="a14b6fd8c696bd69dc80847ab2dddd085a47dcbd834e669233d7eb8a51456ed217">Music</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ime::input</name>
    <filename>namespaceime_1_1input.html</filename>
    <class kind="class">ime::input::InputManager</class>
    <class kind="class">ime::input::Joystick</class>
    <class kind="class">ime::input::Keyboard</class>
    <class kind="class">ime::input::Mouse</class>
    <member kind="typedef">
      <type>Callback&lt;&gt;</type>
      <name>KeybindAction</name>
      <anchorfile>namespaceime_1_1input.html</anchorfile>
      <anchor>aee27d90ef024209c127ec2ea95f4f26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>KeyBindType</name>
      <anchorfile>namespaceime_1_1input.html</anchorfile>
      <anchor>a1f9b428dd406ff54c9a08970246adce4</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime_1_1input.html" anchor="a1f9b428dd406ff54c9a08970246adce4a0f8baa14654b1f6ef00fed708c7f198a">KeyUp</enumvalue>
      <enumvalue file="namespaceime_1_1input.html" anchor="a1f9b428dd406ff54c9a08970246adce4acfd07bf1effd88bca04a12a087777354">KeyDown</enumvalue>
      <enumvalue file="namespaceime_1_1input.html" anchor="a1f9b428dd406ff54c9a08970246adce4a9ef346c095c930163fe3b2cffc8ee4dc">KeyHeld</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InputType</name>
      <anchorfile>namespaceime_1_1input.html</anchorfile>
      <anchor>a699fe25c9458be38ca87d00a3d19e119</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime_1_1input.html" anchor="a699fe25c9458be38ca87d00a3d19e119a6ce4d85a628a88bbdb3ac24a8e5a9c2e">Keyboard</enumvalue>
      <enumvalue file="namespaceime_1_1input.html" anchor="a699fe25c9458be38ca87d00a3d19e119af2a47c6809d88e175dade0ef7b16aa13">Mouse</enumvalue>
      <enumvalue file="namespaceime_1_1input.html" anchor="a699fe25c9458be38ca87d00a3d19e119a1162b85b7b993e2edf7da29dd8abf7e2">Joystick</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>JoystickEvent</name>
      <anchorfile>namespaceime_1_1input.html</anchorfile>
      <anchor>a95bc1d81af44f6d058b39b82f9ce7028</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime_1_1input.html" anchor="a95bc1d81af44f6d058b39b82f9ce7028a49ab28040dfa07f53544970c6d147e1e">Connect</enumvalue>
      <enumvalue file="namespaceime_1_1input.html" anchor="a95bc1d81af44f6d058b39b82f9ce7028a42ae25231906c83927831e0ef7c317ac">Disconnect</enumvalue>
      <enumvalue file="namespaceime_1_1input.html" anchor="a95bc1d81af44f6d058b39b82f9ce7028ae331802be240d79912c365112ad41ddb">ButtonPress</enumvalue>
      <enumvalue file="namespaceime_1_1input.html" anchor="a95bc1d81af44f6d058b39b82f9ce7028ac58a283b80d411649376455b98710c95">ButtonRelease</enumvalue>
      <enumvalue file="namespaceime_1_1input.html" anchor="a95bc1d81af44f6d058b39b82f9ce7028a9c0df5b5d050c53c51d01c573fe8ef0d">ButtonHeld</enumvalue>
      <enumvalue file="namespaceime_1_1input.html" anchor="a95bc1d81af44f6d058b39b82f9ce7028a4ef59dc84ba3d2a6f902a76ed74a8f5b">AxisMove</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ime::ui</name>
    <filename>namespaceime_1_1ui.html</filename>
    <class kind="class">ime::ui::BitmapButton</class>
    <class kind="class">ime::ui::BoxLayoutRenderer</class>
    <class kind="class">ime::ui::Button</class>
    <class kind="class">ime::ui::ButtonRenderer</class>
    <class kind="class">ime::ui::CheckBox</class>
    <class kind="class">ime::ui::CheckBoxRenderer</class>
    <class kind="class">ime::ui::ChildWindow</class>
    <class kind="class">ime::ui::ChildWindowRenderer</class>
    <class kind="class">ime::ui::ClickableWidget</class>
    <class kind="class">ime::ui::EditBox</class>
    <class kind="class">ime::ui::EditBoxRenderer</class>
    <class kind="class">ime::ui::GuiContainer</class>
    <class kind="class">ime::ui::HorizontalLayout</class>
    <class kind="class">ime::ui::IBoxLayout</class>
    <class kind="class">ime::ui::IWidgetRenderer</class>
    <class kind="class">ime::ui::Label</class>
    <class kind="class">ime::ui::LabelRenderer</class>
    <class kind="class">ime::ui::MenuBar</class>
    <class kind="class">ime::ui::MenuBarRenderer</class>
    <class kind="class">ime::ui::MessageBox</class>
    <class kind="class">ime::ui::MessageBoxRenderer</class>
    <class kind="class">ime::ui::Panel</class>
    <class kind="class">ime::ui::PanelRenderer</class>
    <class kind="class">ime::ui::Picture</class>
    <class kind="class">ime::ui::PictureRenderer</class>
    <class kind="class">ime::ui::ProgressBar</class>
    <class kind="class">ime::ui::ProgressBarRenderer</class>
    <class kind="class">ime::ui::RadioButton</class>
    <class kind="class">ime::ui::RadioButtonRenderer</class>
    <class kind="class">ime::ui::ScrollablePanel</class>
    <class kind="class">ime::ui::ScrollablePanelRenderer</class>
    <class kind="class">ime::ui::Separator</class>
    <class kind="class">ime::ui::SeparatorRenderer</class>
    <class kind="class">ime::ui::Slider</class>
    <class kind="class">ime::ui::SliderRenderer</class>
    <class kind="class">ime::ui::SpinButtonRenderer</class>
    <class kind="class">ime::ui::SpinControl</class>
    <class kind="class">ime::ui::Tabs</class>
    <class kind="class">ime::ui::TabsContainer</class>
    <class kind="class">ime::ui::TabsRenderer</class>
    <class kind="class">ime::ui::ToggleButton</class>
    <class kind="class">ime::ui::VerticalLayout</class>
    <class kind="class">ime::ui::Widget</class>
    <class kind="class">ime::ui::WidgetContainer</class>
    <member kind="enumeration">
      <type></type>
      <name>AnimationType</name>
      <anchorfile>namespaceime_1_1ui.html</anchorfile>
      <anchor>a794a37eaedfd2a7c8f56f0c420a7640a</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aa04e0385c10aefee8e4681617d2f3ef40">Fade</enumvalue>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aa85a7cd587d6142dbfc1a4de05af7b75d">Scale</enumvalue>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aa32adbe5629238fc4f536d19aa387edde">SlideToRight</enumvalue>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aa2fb2461981483dbe3d8cea762e4f6b4e">SlideToLeft</enumvalue>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aaafd419511c5120bdc1ac7e54b4e81096">SlideToBottom</enumvalue>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aae646468517e881c8fba1b43c3439e9c4">SlideToTop</enumvalue>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aa7eceaa1479b5b4cdea7c6d1cce219f77">SlideFromLeft</enumvalue>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aaf744d5bd565fba1a73e8d920271ff752">SlideFromRight</enumvalue>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aad0c0f4c9fa33f30a64ebc4b5513f0723">SlideFromTop</enumvalue>
      <enumvalue file="namespaceime_1_1ui.html" anchor="a794a37eaedfd2a7c8f56f0c420a7640aa1798106aa3a86db45ce376cbe5de5875">SlideFromBottom</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ime::utility</name>
    <filename>namespaceime_1_1utility.html</filename>
    <class kind="class">ime::utility::ConsoleLogger</class>
    <class kind="class">ime::utility::DiskFileLogger</class>
    <class kind="class">ime::utility::DiskFileReader</class>
    <class kind="class">ime::utility::ILogger</class>
    <member kind="enumeration">
      <type></type>
      <name>WriteMode</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>acb9e8b5f6b968608a2aac3dc46c787a1</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime_1_1utility.html" anchor="acb9e8b5f6b968608a2aac3dc46c787a1ada364eb37e143f6b2b5559aa03f5913a">Overwrite</enumvalue>
      <enumvalue file="namespaceime_1_1utility.html" anchor="acb9e8b5f6b968608a2aac3dc46c787a1a3ac4692f3935a49a0b243eecf529faa9">Append</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MessageType</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>a1598f43af5614561b58c446ebbf1b53b</anchor>
      <arglist></arglist>
      <enumvalue file="namespaceime_1_1utility.html" anchor="a1598f43af5614561b58c446ebbf1b53ba0db377921f4ce762c62526131097968f">General</enumvalue>
      <enumvalue file="namespaceime_1_1utility.html" anchor="a1598f43af5614561b58c446ebbf1b53baec53a8c4f07baed5d8825072c89799be">Status</enumvalue>
      <enumvalue file="namespaceime_1_1utility.html" anchor="a1598f43af5614561b58c446ebbf1b53ba0eaadb4fcb48a0a0ed7bc9868be9fbaa">Warning</enumvalue>
      <enumvalue file="namespaceime_1_1utility.html" anchor="a1598f43af5614561b58c446ebbf1b53ba902b0d55fddef6f8d651fe1035b7d4bd">Error</enumvalue>
    </member>
    <member kind="function">
      <type>IME_API float</type>
      <name>lerp</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>ae0fdf17ecc7794fd645cc794d190cb2d</anchor>
      <arglist>(float min, float max, float ratio)</arglist>
    </member>
    <member kind="function">
      <type>IME_API int</type>
      <name>generateRandomNum</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>a34c6b19aed80374e8084ce96cb8a6558</anchor>
      <arglist>(int min, int max)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>createRandomNumGenerator</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>a2fcdf8670ea4d5ff6cb0734833cc64fc</anchor>
      <arglist>(int min, int max)</arglist>
    </member>
    <member kind="function">
      <type>IME_API Colour</type>
      <name>generateRandomColour</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>aa37c64ed015f001089aaf8c4b504645f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeoutSync</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>abcea0b9c8b061f9ef8c8dd9e9d24bcb1</anchor>
      <arglist>(Time delay, const Callable &amp;callback, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeout</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>adf8fd1ce86fe3ff96a80b462acb73821</anchor>
      <arglist>(Time delay, const Callable &amp;callback, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIntervalSync</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>a322abf88a478b8207c5255cea60e13dc</anchor>
      <arglist>(Time delay, const Callable &amp;callback, Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInterval</name>
      <anchorfile>namespaceime_1_1utility.html</anchorfile>
      <anchor>a2df2db978714c305c4ff4a51cc57f495</anchor>
      <arglist>(Time delay, const Callable &amp;callback, Args &amp;&amp;...args)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title></title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Welcome">welcome</docanchor>
    <docanchor file="index.html" title="Getting started">example</docanchor>
  </compound>
</tagfile>
