# This script provides the IME libraries as imported targets
# ===========================================================
#
# Usage
# -----
#
# Examples:
#   find_package(IME 2.0.0)
#   find_package(IME 2.0.0 REQUIRED)
#
# By default, the dynamic libraries of IME will be found. To find the static ones instead,
# you must set the IME_STATIC_LIBRARIES variable to TRUE before calling find_package(IME ...).
# example:
#   set(IME_STATIC_LIBRARIES TRUE)
#   find_package(IME 2.0.0 REQUIRED)
#
# If IME is not installed in a standard path, you can use the IME_DIR CMake variable
# to tell CMake where IME's config file is located (PREFIX/lib/cmake/IME for a library-based installation,
#
# Output
# ------
#
# This script defines the following variable:
# - IME_FOUND:        true if all the required modules are found
#
# And the following target:
#   - ime
#
# The IME target is the same for both Debug and Release build configurations and will automatically provide
# correct settings based on your currently active build configuration. The IME target name also does not change
# when using dynamic or static IME libraries.
#
# example:
#   find_package(IME 1.0.0 REQUIRED)
#   add_executable(myapp ...)
#   target_link_libraries(myapp ime)

set(FIND_IME_PATHS
    "${CMAKE_CURRENT_LIST_DIR}/../.."
    ${IME_ROOT}
    $ENV{IME_ROOT}
    ~/Library/Frameworks
    /Library/Frameworks
    /usr/local
    /usr
    /sw
    /opt/local
    /opt/csw
    /opt)

# Choose which target definitions must be imported
if (IME_STATIC_LIBRARIES)
    set(config_name "Static")
else()
    set(config_name "Shared")
endif()
set(targets_config_file "${CMAKE_CURRENT_LIST_DIR}/IME${config_name}Targets.cmake")

# Generate imported targets for IME
if (EXISTS "${targets_config_file}")
    # Set IME_FOUND to TRUE by default, may be overwritten by one of the includes below
    set(IME_FOUND TRUE)
    include("${targets_config_file}")
else()
    set(FIND_IME_ERROR "Requested IME configuration (${config_name}) was not found")
    set(IME_FOUND FALSE)
endif()

if (NOT IME_FOUND)
    if(IME_FIND_REQUIRED)
        # fatal error
        message(FATAL_ERROR "${FIND_IME_ERROR}")
    elseif(NOT IME_FIND_QUIETLY)
        # error but continue
        message(STATUS "${FIND_IME_ERROR}")
    endif()
endif()

if (IME_FOUND AND NOT IME_FIND_QUIETLY)
    message(STATUS "Found IME @IME_VERSION_MAJOR@.@IME_VERSION_MINOR@.@IME_VERSION_PATCH@ in ${CMAKE_CURRENT_LIST_DIR}")
endif()
